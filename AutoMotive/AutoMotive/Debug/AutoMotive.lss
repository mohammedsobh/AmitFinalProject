
AutoMotive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  000016b2  00001746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008000d6  008000d6  000017bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003266  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbe  00000000  00000000  00004cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b7b  00000000  00000000  00005a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00007618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080b  00000000  00000000  00007b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d1b  00000000  00000000  0000835f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000a07a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_1>
       8:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ed       	ldi	r26, 0xD6	; 214
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8c 03 	call	0x718	; 0x718 <main>
      8a:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPortDir>:
		case DIO_PORTD:
		value = PIND;
		break;
	}
	return value;
}
      92:	66 23       	and	r22, r22
      94:	19 f0       	breq	.+6      	; 0x9c <DIO_SetPortDir+0xa>
      96:	6f 3f       	cpi	r22, 0xFF	; 255
      98:	89 f0       	breq	.+34     	; 0xbc <DIO_SetPortDir+0x2a>
      9a:	08 95       	ret
      9c:	81 30       	cpi	r24, 0x01	; 1
      9e:	41 f0       	breq	.+16     	; 0xb0 <DIO_SetPortDir+0x1e>
      a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPortDir+0x1a>
      a2:	82 30       	cpi	r24, 0x02	; 2
      a4:	39 f0       	breq	.+14     	; 0xb4 <DIO_SetPortDir+0x22>
      a6:	83 30       	cpi	r24, 0x03	; 3
      a8:	39 f0       	breq	.+14     	; 0xb8 <DIO_SetPortDir+0x26>
      aa:	08 95       	ret
      ac:	1a ba       	out	0x1a, r1	; 26
      ae:	08 95       	ret
      b0:	17 ba       	out	0x17, r1	; 23
      b2:	08 95       	ret
      b4:	14 ba       	out	0x14, r1	; 20
      b6:	08 95       	ret
      b8:	11 ba       	out	0x11, r1	; 17
      ba:	08 95       	ret
      bc:	81 30       	cpi	r24, 0x01	; 1
      be:	49 f0       	breq	.+18     	; 0xd2 <DIO_SetPortDir+0x40>
      c0:	28 f0       	brcs	.+10     	; 0xcc <DIO_SetPortDir+0x3a>
      c2:	82 30       	cpi	r24, 0x02	; 2
      c4:	49 f0       	breq	.+18     	; 0xd8 <DIO_SetPortDir+0x46>
      c6:	83 30       	cpi	r24, 0x03	; 3
      c8:	51 f0       	breq	.+20     	; 0xde <DIO_SetPortDir+0x4c>
      ca:	08 95       	ret
      cc:	8f ef       	ldi	r24, 0xFF	; 255
      ce:	8a bb       	out	0x1a, r24	; 26
      d0:	08 95       	ret
      d2:	8f ef       	ldi	r24, 0xFF	; 255
      d4:	87 bb       	out	0x17, r24	; 23
      d6:	08 95       	ret
      d8:	8f ef       	ldi	r24, 0xFF	; 255
      da:	84 bb       	out	0x14, r24	; 20
      dc:	08 95       	ret
      de:	8f ef       	ldi	r24, 0xFF	; 255
      e0:	81 bb       	out	0x11, r24	; 17
      e2:	08 95       	ret

000000e4 <DIO_SetPinDir>:
      e4:	44 23       	and	r20, r20
      e6:	b9 f1       	breq	.+110    	; 0x156 <DIO_SetPinDir+0x72>
      e8:	41 30       	cpi	r20, 0x01	; 1
      ea:	09 f0       	breq	.+2      	; 0xee <DIO_SetPinDir+0xa>
      ec:	6b c0       	rjmp	.+214    	; 0x1c4 <DIO_SetPinDir+0xe0>
      ee:	81 30       	cpi	r24, 0x01	; 1
      f0:	89 f0       	breq	.+34     	; 0x114 <DIO_SetPinDir+0x30>
      f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPinDir+0x1a>
      f4:	82 30       	cpi	r24, 0x02	; 2
      f6:	c9 f0       	breq	.+50     	; 0x12a <DIO_SetPinDir+0x46>
      f8:	83 30       	cpi	r24, 0x03	; 3
      fa:	11 f1       	breq	.+68     	; 0x140 <DIO_SetPinDir+0x5c>
      fc:	08 95       	ret
      fe:	2a b3       	in	r18, 0x1a	; 26
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDir+0x26>
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	6a 95       	dec	r22
     10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDir+0x22>
     10e:	82 2b       	or	r24, r18
     110:	8a bb       	out	0x1a, r24	; 26
     112:	08 95       	ret
     114:	27 b3       	in	r18, 0x17	; 23
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDir+0x3c>
     11c:	88 0f       	add	r24, r24
     11e:	99 1f       	adc	r25, r25
     120:	6a 95       	dec	r22
     122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDir+0x38>
     124:	82 2b       	or	r24, r18
     126:	87 bb       	out	0x17, r24	; 23
     128:	08 95       	ret
     12a:	24 b3       	in	r18, 0x14	; 20
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_SetPinDir+0x52>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_SetPinDir+0x4e>
     13a:	82 2b       	or	r24, r18
     13c:	84 bb       	out	0x14, r24	; 20
     13e:	08 95       	ret
     140:	21 b3       	in	r18, 0x11	; 17
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_SetPinDir+0x68>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	6a 95       	dec	r22
     14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_SetPinDir+0x64>
     150:	82 2b       	or	r24, r18
     152:	81 bb       	out	0x11, r24	; 17
     154:	08 95       	ret
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	91 f0       	breq	.+36     	; 0x17e <DIO_SetPinDir+0x9a>
     15a:	28 f0       	brcs	.+10     	; 0x166 <DIO_SetPinDir+0x82>
     15c:	82 30       	cpi	r24, 0x02	; 2
     15e:	d9 f0       	breq	.+54     	; 0x196 <DIO_SetPinDir+0xb2>
     160:	83 30       	cpi	r24, 0x03	; 3
     162:	29 f1       	breq	.+74     	; 0x1ae <DIO_SetPinDir+0xca>
     164:	08 95       	ret
     166:	2a b3       	in	r18, 0x1a	; 26
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDir+0x8e>
     16e:	88 0f       	add	r24, r24
     170:	99 1f       	adc	r25, r25
     172:	6a 95       	dec	r22
     174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDir+0x8a>
     176:	80 95       	com	r24
     178:	82 23       	and	r24, r18
     17a:	8a bb       	out	0x1a, r24	; 26
     17c:	08 95       	ret
     17e:	27 b3       	in	r18, 0x17	; 23
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinDir+0xa6>
     186:	88 0f       	add	r24, r24
     188:	99 1f       	adc	r25, r25
     18a:	6a 95       	dec	r22
     18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinDir+0xa2>
     18e:	80 95       	com	r24
     190:	82 23       	and	r24, r18
     192:	87 bb       	out	0x17, r24	; 23
     194:	08 95       	ret
     196:	24 b3       	in	r18, 0x14	; 20
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPinDir+0xbe>
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	6a 95       	dec	r22
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPinDir+0xba>
     1a6:	80 95       	com	r24
     1a8:	82 23       	and	r24, r18
     1aa:	84 bb       	out	0x14, r24	; 20
     1ac:	08 95       	ret
     1ae:	21 b3       	in	r18, 0x11	; 17
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SetPinDir+0xd6>
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	6a 95       	dec	r22
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SetPinDir+0xd2>
     1be:	80 95       	com	r24
     1c0:	82 23       	and	r24, r18
     1c2:	81 bb       	out	0x11, r24	; 17
     1c4:	08 95       	ret

000001c6 <DIO_SetPortVal>:
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	41 f0       	breq	.+16     	; 0x1da <DIO_SetPortVal+0x14>
     1ca:	28 f0       	brcs	.+10     	; 0x1d6 <DIO_SetPortVal+0x10>
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	39 f0       	breq	.+14     	; 0x1de <DIO_SetPortVal+0x18>
     1d0:	83 30       	cpi	r24, 0x03	; 3
     1d2:	39 f0       	breq	.+14     	; 0x1e2 <DIO_SetPortVal+0x1c>
     1d4:	08 95       	ret
     1d6:	6b bb       	out	0x1b, r22	; 27
     1d8:	08 95       	ret
     1da:	68 bb       	out	0x18, r22	; 24
     1dc:	08 95       	ret
     1de:	65 bb       	out	0x15, r22	; 21
     1e0:	08 95       	ret
     1e2:	62 bb       	out	0x12, r22	; 18
     1e4:	08 95       	ret

000001e6 <DIO_SetPinVal>:
     1e6:	44 23       	and	r20, r20
     1e8:	b9 f1       	breq	.+110    	; 0x258 <DIO_SetPinVal+0x72>
     1ea:	41 30       	cpi	r20, 0x01	; 1
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <DIO_SetPinVal+0xa>
     1ee:	6b c0       	rjmp	.+214    	; 0x2c6 <DIO_SetPinVal+0xe0>
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	89 f0       	breq	.+34     	; 0x216 <DIO_SetPinVal+0x30>
     1f4:	28 f0       	brcs	.+10     	; 0x200 <DIO_SetPinVal+0x1a>
     1f6:	82 30       	cpi	r24, 0x02	; 2
     1f8:	c9 f0       	breq	.+50     	; 0x22c <DIO_SetPinVal+0x46>
     1fa:	83 30       	cpi	r24, 0x03	; 3
     1fc:	11 f1       	breq	.+68     	; 0x242 <DIO_SetPinVal+0x5c>
     1fe:	08 95       	ret
     200:	2b b3       	in	r18, 0x1b	; 27
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinVal+0x26>
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	6a 95       	dec	r22
     20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinVal+0x22>
     210:	82 2b       	or	r24, r18
     212:	8b bb       	out	0x1b, r24	; 27
     214:	08 95       	ret
     216:	28 b3       	in	r18, 0x18	; 24
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinVal+0x3c>
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	6a 95       	dec	r22
     224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinVal+0x38>
     226:	82 2b       	or	r24, r18
     228:	88 bb       	out	0x18, r24	; 24
     22a:	08 95       	ret
     22c:	25 b3       	in	r18, 0x15	; 21
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinVal+0x52>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	6a 95       	dec	r22
     23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinVal+0x4e>
     23c:	82 2b       	or	r24, r18
     23e:	85 bb       	out	0x15, r24	; 21
     240:	08 95       	ret
     242:	22 b3       	in	r18, 0x12	; 18
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPinVal+0x68>
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	6a 95       	dec	r22
     250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPinVal+0x64>
     252:	82 2b       	or	r24, r18
     254:	82 bb       	out	0x12, r24	; 18
     256:	08 95       	ret
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	91 f0       	breq	.+36     	; 0x280 <DIO_SetPinVal+0x9a>
     25c:	28 f0       	brcs	.+10     	; 0x268 <DIO_SetPinVal+0x82>
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	d9 f0       	breq	.+54     	; 0x298 <DIO_SetPinVal+0xb2>
     262:	83 30       	cpi	r24, 0x03	; 3
     264:	29 f1       	breq	.+74     	; 0x2b0 <DIO_SetPinVal+0xca>
     266:	08 95       	ret
     268:	2b b3       	in	r18, 0x1b	; 27
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinVal+0x8e>
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinVal+0x8a>
     278:	80 95       	com	r24
     27a:	82 23       	and	r24, r18
     27c:	8b bb       	out	0x1b, r24	; 27
     27e:	08 95       	ret
     280:	28 b3       	in	r18, 0x18	; 24
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPinVal+0xa6>
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	6a 95       	dec	r22
     28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPinVal+0xa2>
     290:	80 95       	com	r24
     292:	82 23       	and	r24, r18
     294:	88 bb       	out	0x18, r24	; 24
     296:	08 95       	ret
     298:	25 b3       	in	r18, 0x15	; 21
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_SetPinVal+0xbe>
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	6a 95       	dec	r22
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_SetPinVal+0xba>
     2a8:	80 95       	com	r24
     2aa:	82 23       	and	r24, r18
     2ac:	85 bb       	out	0x15, r24	; 21
     2ae:	08 95       	ret
     2b0:	22 b3       	in	r18, 0x12	; 18
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPinVal+0xd6>
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	6a 95       	dec	r22
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPinVal+0xd2>
     2c0:	80 95       	com	r24
     2c2:	82 23       	and	r24, r18
     2c4:	82 bb       	out	0x12, r24	; 18
     2c6:	08 95       	ret

000002c8 <DIO_ReadPinVal>:
Uint8 DIO_ReadPinVal(Uint8 Port,Uint8 Pin)
{
	Uint8 value = 0;
	switch (Port)
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	79 f0       	breq	.+30     	; 0x2ea <DIO_ReadPinVal+0x22>
     2cc:	28 f0       	brcs	.+10     	; 0x2d8 <DIO_ReadPinVal+0x10>
     2ce:	82 30       	cpi	r24, 0x02	; 2
     2d0:	a9 f0       	breq	.+42     	; 0x2fc <DIO_ReadPinVal+0x34>
     2d2:	83 30       	cpi	r24, 0x03	; 3
     2d4:	e1 f0       	breq	.+56     	; 0x30e <DIO_ReadPinVal+0x46>
     2d6:	24 c0       	rjmp	.+72     	; 0x320 <DIO_ReadPinVal+0x58>
	{
		case DIO_PORTA:
		value = get_bit(PINA,Pin);
     2d8:	89 b3       	in	r24, 0x19	; 25
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_ReadPinVal+0x1a>
     2de:	95 95       	asr	r25
     2e0:	87 95       	ror	r24
     2e2:	6a 95       	dec	r22
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_ReadPinVal+0x16>
     2e6:	81 70       	andi	r24, 0x01	; 1
		break;
     2e8:	08 95       	ret
		case DIO_PORTB:
		value = get_bit(PINB,Pin);
     2ea:	86 b3       	in	r24, 0x16	; 22
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_ReadPinVal+0x2c>
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	6a 95       	dec	r22
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_ReadPinVal+0x28>
     2f8:	81 70       	andi	r24, 0x01	; 1
		break;
     2fa:	08 95       	ret
		case DIO_PORTC:
		value = get_bit(PINC,Pin);
     2fc:	83 b3       	in	r24, 0x13	; 19
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_ReadPinVal+0x3e>
     302:	95 95       	asr	r25
     304:	87 95       	ror	r24
     306:	6a 95       	dec	r22
     308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_ReadPinVal+0x3a>
     30a:	81 70       	andi	r24, 0x01	; 1
		break;
     30c:	08 95       	ret
		case DIO_PORTD:
		value = get_bit(PIND,Pin);
     30e:	80 b3       	in	r24, 0x10	; 16
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_ReadPinVal+0x50>
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	6a 95       	dec	r22
     31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_ReadPinVal+0x4c>
     31c:	81 70       	andi	r24, 0x01	; 1
		break;
     31e:	08 95       	ret
	}
	return value;
}
Uint8 DIO_ReadPinVal(Uint8 Port,Uint8 Pin)
{
	Uint8 value = 0;
     320:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTD:
		value = get_bit(PIND,Pin);
		break;
	}
	return value;
}
     322:	08 95       	ret

00000324 <DIO_SetPullUp>:

void DIO_SetPullUp(Uint8 Port,Uint8 Pin)
{
	switch(Port)
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	b1 f0       	breq	.+44     	; 0x354 <DIO_SetPullUp+0x30>
     328:	28 f0       	brcs	.+10     	; 0x334 <DIO_SetPullUp+0x10>
     32a:	82 30       	cpi	r24, 0x02	; 2
     32c:	19 f1       	breq	.+70     	; 0x374 <DIO_SetPullUp+0x50>
     32e:	83 30       	cpi	r24, 0x03	; 3
     330:	89 f1       	breq	.+98     	; 0x394 <DIO_SetPullUp+0x70>
     332:	08 95       	ret
	{
		case DIO_PORTA:
		clr_bit(DDRA,Pin);
     334:	2a b3       	in	r18, 0x1a	; 26
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_SetPullUp+0x1c>
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	6a 95       	dec	r22
     342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_SetPullUp+0x18>
     344:	98 2f       	mov	r25, r24
     346:	90 95       	com	r25
     348:	92 23       	and	r25, r18
     34a:	9a bb       	out	0x1a, r25	; 26
		set_bit(PORTA,Pin);
     34c:	9b b3       	in	r25, 0x1b	; 27
     34e:	89 2b       	or	r24, r25
     350:	8b bb       	out	0x1b, r24	; 27
		break;
     352:	08 95       	ret
		case DIO_PORTB:
		clr_bit(DDRB,Pin);
     354:	27 b3       	in	r18, 0x17	; 23
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_SetPullUp+0x3c>
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	6a 95       	dec	r22
     362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_SetPullUp+0x38>
     364:	98 2f       	mov	r25, r24
     366:	90 95       	com	r25
     368:	92 23       	and	r25, r18
     36a:	97 bb       	out	0x17, r25	; 23
		set_bit(PORTB,Pin);
     36c:	98 b3       	in	r25, 0x18	; 24
     36e:	89 2b       	or	r24, r25
     370:	88 bb       	out	0x18, r24	; 24
		break;
     372:	08 95       	ret
		case DIO_PORTC:
		clr_bit(DDRC,Pin);
     374:	24 b3       	in	r18, 0x14	; 20
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_SetPullUp+0x5c>
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	6a 95       	dec	r22
     382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_SetPullUp+0x58>
     384:	98 2f       	mov	r25, r24
     386:	90 95       	com	r25
     388:	92 23       	and	r25, r18
     38a:	94 bb       	out	0x14, r25	; 20
		set_bit(PORTC,Pin);
     38c:	95 b3       	in	r25, 0x15	; 21
     38e:	89 2b       	or	r24, r25
     390:	85 bb       	out	0x15, r24	; 21
		break;
     392:	08 95       	ret
		case DIO_PORTD:
		clr_bit(DDRD,Pin);
     394:	21 b3       	in	r18, 0x11	; 17
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_SetPullUp+0x7c>
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	6a 95       	dec	r22
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_SetPullUp+0x78>
     3a4:	98 2f       	mov	r25, r24
     3a6:	90 95       	com	r25
     3a8:	92 23       	and	r25, r18
     3aa:	91 bb       	out	0x11, r25	; 17
		set_bit(PORTD,Pin);
     3ac:	92 b3       	in	r25, 0x12	; 18
     3ae:	89 2b       	or	r24, r25
     3b0:	82 bb       	out	0x12, r24	; 18
     3b2:	08 95       	ret

000003b4 <IRInit>:
 *  Author: eng_s
 */
#include "IR.h"
void IRInit(void)
{
	DIO_SetPinDir(IR_PORT,FRONT_IR_PIN,DIO_PIN_DIR_INPUT);
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	62 e0       	ldi	r22, 0x02	; 2
     3b8:	83 e0       	ldi	r24, 0x03	; 3
     3ba:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(IR_PORT,BACK_IR_PIN,DIO_PIN_DIR_INPUT);
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	63 e0       	ldi	r22, 0x03	; 3
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	GICR  = 1<<INT0_EN  | 1<<INT1_EN;		/* Enable INT0 & INT1*/
     3c8:	80 ec       	ldi	r24, 0xC0	; 192
     3ca:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<INT0_RISINGEDGE_EN0 | 1<<INT0_RISINGEDGE_EN1 | 1<<INT1_RISINGEDGE_EN0 | 1<<INT1_RISINGEDGE_EN1;  // Trigger INT0 & INT1 on rising edge */
     3cc:	8f e0       	ldi	r24, 0x0F	; 15
     3ce:	85 bf       	out	0x35, r24	; 53
     3d0:	08 95       	ret

000003d2 <LCDEN>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	ec 01       	movw	r28, r24
     3d8:	41 e0       	ldi	r20, 0x01	; 1
     3da:	6c 81       	ldd	r22, Y+4	; 0x04
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     3e2:	8f e8       	ldi	r24, 0x8F	; 143
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <LCDEN+0x14>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LCDEN+0x1a>
     3ec:	00 00       	nop
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	6c 81       	ldd	r22, Y+4	; 0x04
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     3f8:	8f e8       	ldi	r24, 0x8F	; 143
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCDEN+0x2a>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <PortWrite>:
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	ec 01       	movw	r28, r24
     412:	16 2f       	mov	r17, r22
     414:	88 81       	ld	r24, Y
     416:	81 11       	cpse	r24, r1
     418:	35 c0       	rjmp	.+106    	; 0x484 <PortWrite+0x7a>
     41a:	60 ff       	sbrs	r22, 0
     41c:	06 c0       	rjmp	.+12     	; 0x42a <PortWrite+0x20>
     41e:	41 e0       	ldi	r20, 0x01	; 1
     420:	6e 81       	ldd	r22, Y+6	; 0x06
     422:	8d 81       	ldd	r24, Y+5	; 0x05
     424:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     428:	05 c0       	rjmp	.+10     	; 0x434 <PortWrite+0x2a>
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	6e 81       	ldd	r22, Y+6	; 0x06
     42e:	8d 81       	ldd	r24, Y+5	; 0x05
     430:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     434:	11 ff       	sbrs	r17, 1
     436:	06 c0       	rjmp	.+12     	; 0x444 <PortWrite+0x3a>
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	6f 81       	ldd	r22, Y+7	; 0x07
     43c:	8d 81       	ldd	r24, Y+5	; 0x05
     43e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     442:	05 c0       	rjmp	.+10     	; 0x44e <PortWrite+0x44>
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	6f 81       	ldd	r22, Y+7	; 0x07
     448:	8d 81       	ldd	r24, Y+5	; 0x05
     44a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     44e:	12 ff       	sbrs	r17, 2
     450:	06 c0       	rjmp	.+12     	; 0x45e <PortWrite+0x54>
     452:	41 e0       	ldi	r20, 0x01	; 1
     454:	68 85       	ldd	r22, Y+8	; 0x08
     456:	8d 81       	ldd	r24, Y+5	; 0x05
     458:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     45c:	05 c0       	rjmp	.+10     	; 0x468 <PortWrite+0x5e>
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	68 85       	ldd	r22, Y+8	; 0x08
     462:	8d 81       	ldd	r24, Y+5	; 0x05
     464:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     468:	13 ff       	sbrs	r17, 3
     46a:	06 c0       	rjmp	.+12     	; 0x478 <PortWrite+0x6e>
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	69 85       	ldd	r22, Y+9	; 0x09
     470:	8d 81       	ldd	r24, Y+5	; 0x05
     472:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     476:	09 c0       	rjmp	.+18     	; 0x48a <PortWrite+0x80>
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	69 85       	ldd	r22, Y+9	; 0x09
     47c:	8d 81       	ldd	r24, Y+5	; 0x05
     47e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     482:	03 c0       	rjmp	.+6      	; 0x48a <PortWrite+0x80>
     484:	8d 81       	ldd	r24, Y+5	; 0x05
     486:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_SetPortVal>
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	08 95       	ret

00000492 <cmd>:
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	ec 01       	movw	r28, r24
     49a:	16 2f       	mov	r17, r22
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	6a 81       	ldd	r22, Y+2	; 0x02
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     4a6:	88 81       	ld	r24, Y
     4a8:	81 11       	cpse	r24, r1
     4aa:	12 c0       	rjmp	.+36     	; 0x4d0 <cmd+0x3e>
     4ac:	61 2f       	mov	r22, r17
     4ae:	62 95       	swap	r22
     4b0:	6f 70       	andi	r22, 0x0F	; 15
     4b2:	ce 01       	movw	r24, r28
     4b4:	0e 94 05 02 	call	0x40a	; 0x40a <PortWrite>
     4b8:	ce 01       	movw	r24, r28
     4ba:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCDEN>
     4be:	61 2f       	mov	r22, r17
     4c0:	6f 70       	andi	r22, 0x0F	; 15
     4c2:	ce 01       	movw	r24, r28
     4c4:	0e 94 05 02 	call	0x40a	; 0x40a <PortWrite>
     4c8:	ce 01       	movw	r24, r28
     4ca:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCDEN>
     4ce:	07 c0       	rjmp	.+14     	; 0x4de <cmd+0x4c>
     4d0:	61 2f       	mov	r22, r17
     4d2:	ce 01       	movw	r24, r28
     4d4:	0e 94 05 02 	call	0x40a	; 0x40a <PortWrite>
     4d8:	ce 01       	movw	r24, r28
     4da:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCDEN>
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	08 95       	ret

000004e6 <LCDInit>:
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	ec 01       	movw	r28, r24
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	6a 81       	ldd	r22, Y+2	; 0x02
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     4f6:	41 e0       	ldi	r20, 0x01	; 1
     4f8:	6b 81       	ldd	r22, Y+3	; 0x03
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     500:	41 e0       	ldi	r20, 0x01	; 1
     502:	6c 81       	ldd	r22, Y+4	; 0x04
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	6b 81       	ldd	r22, Y+3	; 0x03
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     514:	88 81       	ld	r24, Y
     516:	81 11       	cpse	r24, r1
     518:	3c c0       	rjmp	.+120    	; 0x592 <LCDInit+0xac>
     51a:	41 e0       	ldi	r20, 0x01	; 1
     51c:	6e 81       	ldd	r22, Y+6	; 0x06
     51e:	8d 81       	ldd	r24, Y+5	; 0x05
     520:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     524:	41 e0       	ldi	r20, 0x01	; 1
     526:	6f 81       	ldd	r22, Y+7	; 0x07
     528:	8d 81       	ldd	r24, Y+5	; 0x05
     52a:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     52e:	41 e0       	ldi	r20, 0x01	; 1
     530:	68 85       	ldd	r22, Y+8	; 0x08
     532:	8d 81       	ldd	r24, Y+5	; 0x05
     534:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	69 85       	ldd	r22, Y+9	; 0x09
     53c:	8d 81       	ldd	r24, Y+5	; 0x05
     53e:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     542:	2f ef       	ldi	r18, 0xFF	; 255
     544:	89 ef       	ldi	r24, 0xF9	; 249
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	21 50       	subi	r18, 0x01	; 1
     54a:	80 40       	sbci	r24, 0x00	; 0
     54c:	90 40       	sbci	r25, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <LCDInit+0x62>
     550:	00 c0       	rjmp	.+0      	; 0x552 <LCDInit+0x6c>
     552:	00 00       	nop
     554:	63 e3       	ldi	r22, 0x33	; 51
     556:	ce 01       	movw	r24, r28
     558:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     55c:	8f e9       	ldi	r24, 0x9F	; 159
     55e:	9f e0       	ldi	r25, 0x0F	; 15
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <LCDInit+0x7a>
     564:	00 c0       	rjmp	.+0      	; 0x566 <LCDInit+0x80>
     566:	00 00       	nop
     568:	62 e3       	ldi	r22, 0x32	; 50
     56a:	ce 01       	movw	r24, r28
     56c:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     570:	8f e9       	ldi	r24, 0x9F	; 159
     572:	9f e0       	ldi	r25, 0x0F	; 15
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <LCDInit+0x8e>
     578:	00 c0       	rjmp	.+0      	; 0x57a <LCDInit+0x94>
     57a:	00 00       	nop
     57c:	68 e2       	ldi	r22, 0x28	; 40
     57e:	ce 01       	movw	r24, r28
     580:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     584:	8f e9       	ldi	r24, 0x9F	; 159
     586:	9f e0       	ldi	r25, 0x0F	; 15
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <LCDInit+0xa2>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <LCDInit+0xa8>
     58e:	00 00       	nop
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <LCDInit+0xda>
     592:	6f ef       	ldi	r22, 0xFF	; 255
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPortDir>
     59a:	9f ef       	ldi	r25, 0xFF	; 255
     59c:	29 ef       	ldi	r18, 0xF9	; 249
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	91 50       	subi	r25, 0x01	; 1
     5a2:	20 40       	sbci	r18, 0x00	; 0
     5a4:	80 40       	sbci	r24, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <LCDInit+0xba>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <LCDInit+0xc4>
     5aa:	00 00       	nop
     5ac:	68 e3       	ldi	r22, 0x38	; 56
     5ae:	ce 01       	movw	r24, r28
     5b0:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     5b4:	8f e9       	ldi	r24, 0x9F	; 159
     5b6:	9f e0       	ldi	r25, 0x0F	; 15
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCDInit+0xd2>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <LCDInit+0xd8>
     5be:	00 00       	nop
     5c0:	63 e0       	ldi	r22, 0x03	; 3
     5c2:	ce 01       	movw	r24, r28
     5c4:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     5c8:	8f e1       	ldi	r24, 0x1F	; 31
     5ca:	9e e4       	ldi	r25, 0x4E	; 78
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <LCDInit+0xe6>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <LCDInit+0xec>
     5d2:	00 00       	nop
     5d4:	63 e0       	ldi	r22, 0x03	; 3
     5d6:	ce 01       	movw	r24, r28
     5d8:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     5dc:	8f ed       	ldi	r24, 0xDF	; 223
     5de:	9b ea       	ldi	r25, 0xAB	; 171
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <LCDInit+0xfa>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <LCDInit+0x100>
     5e6:	00 00       	nop
     5e8:	63 e0       	ldi	r22, 0x03	; 3
     5ea:	ce 01       	movw	r24, r28
     5ec:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     5f0:	66 e0       	ldi	r22, 0x06	; 6
     5f2:	ce 01       	movw	r24, r28
     5f4:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     5f8:	8f e9       	ldi	r24, 0x9F	; 159
     5fa:	9f e0       	ldi	r25, 0x0F	; 15
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <LCDInit+0x116>
     600:	00 c0       	rjmp	.+0      	; 0x602 <LCDInit+0x11c>
     602:	00 00       	nop
     604:	6c e0       	ldi	r22, 0x0C	; 12
     606:	ce 01       	movw	r24, r28
     608:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     60c:	8f e9       	ldi	r24, 0x9F	; 159
     60e:	9f e0       	ldi	r25, 0x0F	; 15
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <LCDInit+0x12a>
     614:	00 c0       	rjmp	.+0      	; 0x616 <LCDInit+0x130>
     616:	00 00       	nop
     618:	60 e8       	ldi	r22, 0x80	; 128
     61a:	ce 01       	movw	r24, r28
     61c:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     620:	8f e9       	ldi	r24, 0x9F	; 159
     622:	9f e0       	ldi	r25, 0x0F	; 15
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <LCDInit+0x13e>
     628:	00 c0       	rjmp	.+0      	; 0x62a <LCDInit+0x144>
     62a:	00 00       	nop
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <writeData>:
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	ec 01       	movw	r28, r24
     63a:	16 2f       	mov	r17, r22
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	6a 81       	ldd	r22, Y+2	; 0x02
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     646:	88 81       	ld	r24, Y
     648:	81 11       	cpse	r24, r1
     64a:	12 c0       	rjmp	.+36     	; 0x670 <writeData+0x3e>
     64c:	61 2f       	mov	r22, r17
     64e:	62 95       	swap	r22
     650:	6f 70       	andi	r22, 0x0F	; 15
     652:	ce 01       	movw	r24, r28
     654:	0e 94 05 02 	call	0x40a	; 0x40a <PortWrite>
     658:	ce 01       	movw	r24, r28
     65a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCDEN>
     65e:	61 2f       	mov	r22, r17
     660:	6f 70       	andi	r22, 0x0F	; 15
     662:	ce 01       	movw	r24, r28
     664:	0e 94 05 02 	call	0x40a	; 0x40a <PortWrite>
     668:	ce 01       	movw	r24, r28
     66a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCDEN>
     66e:	07 c0       	rjmp	.+14     	; 0x67e <writeData+0x4c>
     670:	61 2f       	mov	r22, r17
     672:	ce 01       	movw	r24, r28
     674:	0e 94 05 02 	call	0x40a	; 0x40a <PortWrite>
     678:	ce 01       	movw	r24, r28
     67a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <LCDEN>
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	08 95       	ret

00000686 <LcdSetCursor>:
     686:	20 e4       	ldi	r18, 0x40	; 64
     688:	62 9f       	mul	r22, r18
     68a:	40 0d       	add	r20, r0
     68c:	11 24       	eor	r1, r1
     68e:	64 2f       	mov	r22, r20
     690:	60 68       	ori	r22, 0x80	; 128
     692:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     696:	08 95       	ret

00000698 <Clear>:
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	0e 94 49 02 	call	0x492	; 0x492 <cmd>
     69e:	08 95       	ret

000006a0 <writeString>:
	{
		cmd(lcd,0x10);
		_delay_ms(1);
	}
}
void writeString(LCD *lcd,char *LINE){
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	7c 01       	movw	r14, r24
     6ae:	8b 01       	movw	r16, r22
	int i;
	for (i = 0 ; LINE[i] != '\0' ; i++)
     6b0:	c0 e0       	ldi	r28, 0x00	; 0
     6b2:	d0 e0       	ldi	r29, 0x00	; 0
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <writeString+0x1e>
	{
		writeData(lcd,LINE[i]);
     6b6:	c7 01       	movw	r24, r14
     6b8:	0e 94 19 03 	call	0x632	; 0x632 <writeData>
		_delay_ms(1);
	}
}
void writeString(LCD *lcd,char *LINE){
	int i;
	for (i = 0 ; LINE[i] != '\0' ; i++)
     6bc:	21 96       	adiw	r28, 0x01	; 1
     6be:	f8 01       	movw	r30, r16
     6c0:	ec 0f       	add	r30, r28
     6c2:	fd 1f       	adc	r31, r29
     6c4:	60 81       	ld	r22, Z
     6c6:	61 11       	cpse	r22, r1
     6c8:	f6 cf       	rjmp	.-20     	; 0x6b6 <writeString+0x16>
	{
		writeData(lcd,LINE[i]);
	}
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	08 95       	ret

000006d8 <SystemInit>:


void SystemInit(void)
{
	
	Lcd1.mode = LCD_4BIT_MODE;
     6d8:	e7 ed       	ldi	r30, 0xD7	; 215
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	10 82       	st	Z, r1
	Lcd1.controlPort = DIO_PORTB;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	81 83       	std	Z+1, r24	; 0x01
	Lcd1.RSPin = DIO_PIN_1;
     6e2:	82 83       	std	Z+2, r24	; 0x02
	Lcd1.RWPin = DIO_PIN_2;
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	83 83       	std	Z+3, r24	; 0x03
	Lcd1.ENPin = DIO_PIN_3;
     6e8:	83 e0       	ldi	r24, 0x03	; 3
     6ea:	84 83       	std	Z+4, r24	; 0x04
	Lcd1.dataPort = DIO_PORTA;
     6ec:	15 82       	std	Z+5, r1	; 0x05
	Lcd1.D4Pin = DIO_PIN_4;
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	86 83       	std	Z+6, r24	; 0x06
	Lcd1.D5Pin = DIO_PIN_5;
     6f2:	85 e0       	ldi	r24, 0x05	; 5
     6f4:	87 83       	std	Z+7, r24	; 0x07
	Lcd1.D6Pin = DIO_PIN_6;
     6f6:	86 e0       	ldi	r24, 0x06	; 6
     6f8:	80 87       	std	Z+8, r24	; 0x08
	Lcd1.D7Pin = DIO_PIN_7;
     6fa:	87 e0       	ldi	r24, 0x07	; 7
     6fc:	81 87       	std	Z+9, r24	; 0x09
	LCDInit(&Lcd1);
     6fe:	cf 01       	movw	r24, r30
     700:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCDInit>
	UltraSonic_init();
     704:	0e 94 67 09 	call	0x12ce	; 0x12ce <UltraSonic_init>
	ServoInit();
     708:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <ServoInit>
	IRInit();
     70c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <IRInit>
	Motor_init();
     710:	0e 94 28 05 	call	0xa50	; 0xa50 <Motor_init>
	sei();
     714:	78 94       	sei
     716:	08 95       	ret

00000718 <main>:
}

int main(void)
{
    /* Replace with your application code */
	SystemInit();
     718:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <SystemInit>
	int speed = 70 , count = 0;
     71c:	e1 2c       	mov	r14, r1
     71e:	f1 2c       	mov	r15, r1
     720:	06 e4       	ldi	r16, 0x46	; 70
     722:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		if(UltraSonic_Distance()>20)
     724:	0e 94 b5 09 	call	0x136a	; 0x136a <UltraSonic_Distance>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 ea       	ldi	r20, 0xA0	; 160
     72e:	51 e4       	ldi	r21, 0x41	; 65
     730:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
     734:	18 16       	cp	r1, r24
     736:	fc f4       	brge	.+62     	; 0x776 <main+0x5e>
		{
 			LcdSetCursor(&Lcd1,0,0);
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	87 ed       	ldi	r24, 0xD7	; 215
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 43 03 	call	0x686	; 0x686 <LcdSetCursor>
			writeString(&Lcd1,"Distance > 20 cm");
     744:	60 e6       	ldi	r22, 0x60	; 96
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	87 ed       	ldi	r24, 0xD7	; 215
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <writeString>
			LcdSetCursor(&Lcd1,1,0);
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	87 ed       	ldi	r24, 0xD7	; 215
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 43 03 	call	0x686	; 0x686 <LcdSetCursor>
			writeString(&Lcd1,"move foreword");
     75c:	61 e7       	ldi	r22, 0x71	; 113
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	87 ed       	ldi	r24, 0xD7	; 215
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 50 03 	call	0x6a0	; 0x6a0 <writeString>
			Motor_Speet(100);
     768:	84 e6       	ldi	r24, 0x64	; 100
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 59 05 	call	0xab2	; 0xab2 <Motor_Speet>
			Motor_foroword();
     770:	0e 94 6f 05 	call	0xade	; 0xade <Motor_foroword>
     774:	d7 cf       	rjmp	.-82     	; 0x724 <main+0xc>
		} 
		else if(UltraSonic_Distance()>5 && UltraSonic_Distance()<=20)
     776:	0e 94 b5 09 	call	0x136a	; 0x136a <UltraSonic_Distance>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 ea       	ldi	r20, 0xA0	; 160
     780:	50 e4       	ldi	r21, 0x40	; 64
     782:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
     786:	18 16       	cp	r1, r24
     788:	0c f0       	brlt	.+2      	; 0x78c <main+0x74>
     78a:	81 c0       	rjmp	.+258    	; 0x88e <__stack+0x2f>
     78c:	0e 94 b5 09 	call	0x136a	; 0x136a <UltraSonic_Distance>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	40 ea       	ldi	r20, 0xA0	; 160
     796:	51 e4       	ldi	r21, 0x41	; 65
     798:	0e 94 01 0a 	call	0x1402	; 0x1402 <__cmpsf2>
     79c:	18 16       	cp	r1, r24
     79e:	0c f4       	brge	.+2      	; 0x7a2 <main+0x8a>
     7a0:	76 c0       	rjmp	.+236    	; 0x88e <__stack+0x2f>
		{
			LcdSetCursor(&Lcd1,0,0);
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	87 ed       	ldi	r24, 0xD7	; 215
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 43 03 	call	0x686	; 0x686 <LcdSetCursor>
			writeString(&Lcd1,"Distance < 20 cm");
     7ae:	6f e7       	ldi	r22, 0x7F	; 127
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	87 ed       	ldi	r24, 0xD7	; 215
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <writeString>
			LcdSetCursor(&Lcd1,1,0);
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	87 ed       	ldi	r24, 0xD7	; 215
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 43 03 	call	0x686	; 0x686 <LcdSetCursor>
			writeString(&Lcd1,"scanning for output");
     7c6:	60 e9       	ldi	r22, 0x90	; 144
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	87 ed       	ldi	r24, 0xD7	; 215
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 50 03 	call	0x6a0	; 0x6a0 <writeString>
			Motor_Stop();
     7d2:	0e 94 c3 05 	call	0xb86	; 0xb86 <Motor_Stop>
			ServoGoToAngle(-90);
     7d6:	86 ea       	ldi	r24, 0xA6	; 166
     7d8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ServoGoToAngle>
			if (UltraSonic_Distance()>20)
     7dc:	0e 94 b5 09 	call	0x136a	; 0x136a <UltraSonic_Distance>
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 ea       	ldi	r20, 0xA0	; 160
     7e6:	51 e4       	ldi	r21, 0x41	; 65
     7e8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
     7ec:	18 16       	cp	r1, r24
     7ee:	8c f4       	brge	.+34     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
			{
				Motor_Left();
     7f0:	0e 94 99 05 	call	0xb32	; 0xb32 <Motor_Left>
     7f4:	2f ef       	ldi	r18, 0xFF	; 255
     7f6:	89 e6       	ldi	r24, 0x69	; 105
     7f8:	98 e1       	ldi	r25, 0x18	; 24
     7fa:	21 50       	subi	r18, 0x01	; 1
     7fc:	80 40       	sbci	r24, 0x00	; 0
     7fe:	90 40       	sbci	r25, 0x00	; 0
     800:	e1 f7       	brne	.-8      	; 0x7fa <main+0xe2>
     802:	00 c0       	rjmp	.+0      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     804:	00 00       	nop
				_delay_ms(500);
				speed = 100;
				ServoGoToAngle(0);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ServoGoToAngle>
			ServoGoToAngle(-90);
			if (UltraSonic_Distance()>20)
			{
				Motor_Left();
				_delay_ms(500);
				speed = 100;
     80c:	04 e6       	ldi	r16, 0x64	; 100
     80e:	10 e0       	ldi	r17, 0x00	; 0
     810:	21 c0       	rjmp	.+66     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
				ServoGoToAngle(0);
			} 
			else
			{
				ServoGoToAngle(90);
     812:	8a e5       	ldi	r24, 0x5A	; 90
     814:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ServoGoToAngle>
				if (UltraSonic_Distance()>20)
     818:	0e 94 b5 09 	call	0x136a	; 0x136a <UltraSonic_Distance>
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 ea       	ldi	r20, 0xA0	; 160
     822:	51 e4       	ldi	r21, 0x41	; 65
     824:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
     828:	18 16       	cp	r1, r24
     82a:	8c f4       	brge	.+34     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
				{
					Motor_Right();
     82c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <Motor_Right>
     830:	2f ef       	ldi	r18, 0xFF	; 255
     832:	89 e6       	ldi	r24, 0x69	; 105
     834:	98 e1       	ldi	r25, 0x18	; 24
     836:	21 50       	subi	r18, 0x01	; 1
     838:	80 40       	sbci	r24, 0x00	; 0
     83a:	90 40       	sbci	r25, 0x00	; 0
     83c:	e1 f7       	brne	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     840:	00 00       	nop
					_delay_ms(500);
					speed = 100;
					ServoGoToAngle(0);
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ServoGoToAngle>
				ServoGoToAngle(90);
				if (UltraSonic_Distance()>20)
				{
					Motor_Right();
					_delay_ms(500);
					speed = 100;
     848:	04 e6       	ldi	r16, 0x64	; 100
     84a:	10 e0       	ldi	r17, 0x00	; 0
     84c:	03 c0       	rjmp	.+6      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
					ServoGoToAngle(0);
				}
				else
				{
					ServoGoToAngle(0);
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ServoGoToAngle>
				}
			}
			if (speed > 30 && count == 50)
     854:	0f 31       	cpi	r16, 0x1F	; 31
     856:	11 05       	cpc	r17, r1
     858:	44 f0       	brlt	.+16     	; 0x86a <__stack+0xb>
     85a:	22 e3       	ldi	r18, 0x32	; 50
     85c:	e2 16       	cp	r14, r18
     85e:	f1 04       	cpc	r15, r1
     860:	21 f4       	brne	.+8      	; 0x86a <__stack+0xb>
			{
				speed --;
     862:	01 50       	subi	r16, 0x01	; 1
     864:	11 09       	sbc	r17, r1
				count = 0;
     866:	e1 2c       	mov	r14, r1
     868:	f1 2c       	mov	r15, r1
			}
			count ++;
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	e8 1a       	sub	r14, r24
     86e:	f8 0a       	sbc	r15, r24
			Motor_Speet(speed);
     870:	c8 01       	movw	r24, r16
     872:	0e 94 59 05 	call	0xab2	; 0xab2 <Motor_Speet>
			Motor_foroword();
     876:	0e 94 6f 05 	call	0xade	; 0xade <Motor_foroword>
     87a:	9f ef       	ldi	r25, 0xFF	; 255
     87c:	21 ee       	ldi	r18, 0xE1	; 225
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	91 50       	subi	r25, 0x01	; 1
     882:	20 40       	sbci	r18, 0x00	; 0
     884:	80 40       	sbci	r24, 0x00	; 0
     886:	e1 f7       	brne	.-8      	; 0x880 <__stack+0x21>
     888:	00 c0       	rjmp	.+0      	; 0x88a <__stack+0x2b>
     88a:	00 00       	nop
     88c:	4b cf       	rjmp	.-362    	; 0x724 <main+0xc>
			_delay_ms(100);
		}else{
			LcdSetCursor(&Lcd1,0,0);
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	87 ed       	ldi	r24, 0xD7	; 215
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 43 03 	call	0x686	; 0x686 <LcdSetCursor>
			writeString(&Lcd1,"Distance < 5 cm");
     89a:	64 ea       	ldi	r22, 0xA4	; 164
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	87 ed       	ldi	r24, 0xD7	; 215
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <writeString>
			LcdSetCursor(&Lcd1,1,0);
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	87 ed       	ldi	r24, 0xD7	; 215
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 43 03 	call	0x686	; 0x686 <LcdSetCursor>
			writeString(&Lcd1,"there is no output");
     8b2:	64 eb       	ldi	r22, 0xB4	; 180
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	87 ed       	ldi	r24, 0xD7	; 215
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 50 03 	call	0x6a0	; 0x6a0 <writeString>
     8be:	9f ef       	ldi	r25, 0xFF	; 255
     8c0:	21 ee       	ldi	r18, 0xE1	; 225
     8c2:	84 e0       	ldi	r24, 0x04	; 4
     8c4:	91 50       	subi	r25, 0x01	; 1
     8c6:	20 40       	sbci	r18, 0x00	; 0
     8c8:	80 40       	sbci	r24, 0x00	; 0
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <__stack+0x65>
     8cc:	00 c0       	rjmp	.+0      	; 0x8ce <__stack+0x6f>
     8ce:	00 00       	nop
			_delay_ms(100);
			Clear(&Lcd1);
     8d0:	87 ed       	ldi	r24, 0xD7	; 215
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 4c 03 	call	0x698	; 0x698 <Clear>
			writeString(&Lcd1,"move backward");
     8d8:	67 ec       	ldi	r22, 0xC7	; 199
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	87 ed       	ldi	r24, 0xD7	; 215
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 50 03 	call	0x6a0	; 0x6a0 <writeString>
			Uint8 ThereIsOut = 0;
     8e4:	c0 e0       	ldi	r28, 0x00	; 0
			speed = 50;
     8e6:	02 e3       	ldi	r16, 0x32	; 50
     8e8:	10 e0       	ldi	r17, 0x00	; 0
			while(!ThereIsOut)
     8ea:	58 c0       	rjmp	.+176    	; 0x99c <__stack+0x13d>
			{
				Motor_Speet(speed);
     8ec:	c8 01       	movw	r24, r16
     8ee:	0e 94 59 05 	call	0xab2	; 0xab2 <Motor_Speet>
				Motor_backword();
     8f2:	0e 94 84 05 	call	0xb08	; 0xb08 <Motor_backword>
				ServoGoToAngle(-90);
     8f6:	86 ea       	ldi	r24, 0xA6	; 166
     8f8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ServoGoToAngle>
				if (UltraSonic_Distance()>20)
     8fc:	0e 94 b5 09 	call	0x136a	; 0x136a <UltraSonic_Distance>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 ea       	ldi	r20, 0xA0	; 160
     906:	51 e4       	ldi	r21, 0x41	; 65
     908:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
     90c:	18 16       	cp	r1, r24
     90e:	dc f4       	brge	.+54     	; 0x946 <__stack+0xe7>
				{
					Motor_Left();
     910:	0e 94 99 05 	call	0xb32	; 0xb32 <Motor_Left>
     914:	9f ef       	ldi	r25, 0xFF	; 255
     916:	29 e6       	ldi	r18, 0x69	; 105
     918:	88 e1       	ldi	r24, 0x18	; 24
     91a:	91 50       	subi	r25, 0x01	; 1
     91c:	20 40       	sbci	r18, 0x00	; 0
     91e:	80 40       	sbci	r24, 0x00	; 0
     920:	e1 f7       	brne	.-8      	; 0x91a <__stack+0xbb>
     922:	00 c0       	rjmp	.+0      	; 0x924 <__stack+0xc5>
     924:	00 00       	nop
					_delay_ms(500);
					speed = 100;
					ThereIsOut = 1;
					ServoGoToAngle(0);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ServoGoToAngle>
     92c:	9f ef       	ldi	r25, 0xFF	; 255
     92e:	21 ee       	ldi	r18, 0xE1	; 225
     930:	84 e0       	ldi	r24, 0x04	; 4
     932:	91 50       	subi	r25, 0x01	; 1
     934:	20 40       	sbci	r18, 0x00	; 0
     936:	80 40       	sbci	r24, 0x00	; 0
     938:	e1 f7       	brne	.-8      	; 0x932 <__stack+0xd3>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <__stack+0xdd>
     93c:	00 00       	nop
				if (UltraSonic_Distance()>20)
				{
					Motor_Left();
					_delay_ms(500);
					speed = 100;
					ThereIsOut = 1;
     93e:	c1 e0       	ldi	r28, 0x01	; 1
				ServoGoToAngle(-90);
				if (UltraSonic_Distance()>20)
				{
					Motor_Left();
					_delay_ms(500);
					speed = 100;
     940:	04 e6       	ldi	r16, 0x64	; 100
     942:	10 e0       	ldi	r17, 0x00	; 0
     944:	2b c0       	rjmp	.+86     	; 0x99c <__stack+0x13d>
					ServoGoToAngle(0);
					_delay_ms(100);
				}
				else
				{
					ServoGoToAngle(90);
     946:	8a e5       	ldi	r24, 0x5A	; 90
     948:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ServoGoToAngle>
					if (UltraSonic_Distance()>20)
     94c:	0e 94 b5 09 	call	0x136a	; 0x136a <UltraSonic_Distance>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 ea       	ldi	r20, 0xA0	; 160
     956:	51 e4       	ldi	r21, 0x41	; 65
     958:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
     95c:	18 16       	cp	r1, r24
     95e:	94 f4       	brge	.+36     	; 0x984 <__stack+0x125>
					{
						Motor_Right();
     960:	0e 94 ae 05 	call	0xb5c	; 0xb5c <Motor_Right>
     964:	9f ef       	ldi	r25, 0xFF	; 255
     966:	29 e6       	ldi	r18, 0x69	; 105
     968:	88 e1       	ldi	r24, 0x18	; 24
     96a:	91 50       	subi	r25, 0x01	; 1
     96c:	20 40       	sbci	r18, 0x00	; 0
     96e:	80 40       	sbci	r24, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <__stack+0x10b>
     972:	00 c0       	rjmp	.+0      	; 0x974 <__stack+0x115>
     974:	00 00       	nop
						_delay_ms(500);
						speed = 100;
						ThereIsOut = 1;
						ServoGoToAngle(0);
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ServoGoToAngle>
					if (UltraSonic_Distance()>20)
					{
						Motor_Right();
						_delay_ms(500);
						speed = 100;
						ThereIsOut = 1;
     97c:	c1 e0       	ldi	r28, 0x01	; 1
					ServoGoToAngle(90);
					if (UltraSonic_Distance()>20)
					{
						Motor_Right();
						_delay_ms(500);
						speed = 100;
     97e:	04 e6       	ldi	r16, 0x64	; 100
     980:	10 e0       	ldi	r17, 0x00	; 0
     982:	0c c0       	rjmp	.+24     	; 0x99c <__stack+0x13d>
						ThereIsOut = 1;
						ServoGoToAngle(0);
					}
					else
					{
						ServoGoToAngle(0);
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <ServoGoToAngle>
     98a:	9f ef       	ldi	r25, 0xFF	; 255
     98c:	21 ee       	ldi	r18, 0xE1	; 225
     98e:	84 e0       	ldi	r24, 0x04	; 4
     990:	91 50       	subi	r25, 0x01	; 1
     992:	20 40       	sbci	r18, 0x00	; 0
     994:	80 40       	sbci	r24, 0x00	; 0
     996:	e1 f7       	brne	.-8      	; 0x990 <__stack+0x131>
     998:	00 c0       	rjmp	.+0      	; 0x99a <__stack+0x13b>
     99a:	00 00       	nop
			_delay_ms(100);
			Clear(&Lcd1);
			writeString(&Lcd1,"move backward");
			Uint8 ThereIsOut = 0;
			speed = 50;
			while(!ThereIsOut)
     99c:	cc 23       	and	r28, r28
     99e:	09 f4       	brne	.+2      	; 0x9a2 <__stack+0x143>
     9a0:	a5 cf       	rjmp	.-182    	; 0x8ec <__stack+0x8d>
						ServoGoToAngle(0);
						_delay_ms(100);
					}
				}
			}
			Motor_foroword();
     9a2:	0e 94 6f 05 	call	0xade	; 0xade <Motor_foroword>
     9a6:	be ce       	rjmp	.-644    	; 0x724 <main+0xc>

000009a8 <__vector_1>:
		}
    }
}

ISR(INT0_vect)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
	
	Motor_Stop();
     9ca:	0e 94 c3 05 	call	0xb86	; 0xb86 <Motor_Stop>
	while(DIO_ReadPinVal(IR_PORT,FRONT_IR_PIN));
     9ce:	62 e0       	ldi	r22, 0x02	; 2
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_ReadPinVal>
     9d6:	81 11       	cpse	r24, r1
     9d8:	fa cf       	rjmp	.-12     	; 0x9ce <__vector_1+0x26>
}
     9da:	ff 91       	pop	r31
     9dc:	ef 91       	pop	r30
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	7f 91       	pop	r23
     9e8:	6f 91       	pop	r22
     9ea:	5f 91       	pop	r21
     9ec:	4f 91       	pop	r20
     9ee:	3f 91       	pop	r19
     9f0:	2f 91       	pop	r18
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <__vector_2>:
ISR(INT1_vect)
{
     9fc:	1f 92       	push	r1
     9fe:	0f 92       	push	r0
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	0f 92       	push	r0
     a04:	11 24       	eor	r1, r1
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
	Motor_Stop();
     a1e:	0e 94 c3 05 	call	0xb86	; 0xb86 <Motor_Stop>
	while(DIO_ReadPinVal(IR_PORT,BACK_IR_PIN));
     a22:	63 e0       	ldi	r22, 0x03	; 3
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_ReadPinVal>
     a2a:	81 11       	cpse	r24, r1
     a2c:	fa cf       	rjmp	.-12     	; 0xa22 <__vector_2+0x26>
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0
     a4c:	1f 90       	pop	r1
     a4e:	18 95       	reti

00000a50 <Motor_init>:
TimerControl MotorPWMTimer;


void Motor_init(void)
{
	MotorPWMTimer.TimerSelect		= TIMER2;
     a50:	e1 ee       	ldi	r30, 0xE1	; 225
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	80 83       	st	Z, r24
	MotorPWMTimer.TimerMode			= TIMER_FAST_PWM_MODE;
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	91 83       	std	Z+1, r25	; 0x01
	MotorPWMTimer.TimerPrescaler	= TimerPrescaler_128;
     a5c:	20 e8       	ldi	r18, 0x80	; 128
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	33 83       	std	Z+3, r19	; 0x03
     a62:	22 83       	std	Z+2, r18	; 0x02
	MotorPWMTimer.TimerCompMode		= TIMER_COMPARETOR_CLR;
     a64:	81 87       	std	Z+9, r24	; 0x09
	DIO_SetPinDir(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_DIR_OUTPUT);
     a66:	41 e0       	ldi	r20, 0x01	; 1
     a68:	63 e0       	ldi	r22, 0x03	; 3
     a6a:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_DIR_OUTPUT);
     a6e:	41 e0       	ldi	r20, 0x01	; 1
     a70:	64 e0       	ldi	r22, 0x04	; 4
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_DIR_OUTPUT);
     a78:	41 e0       	ldi	r20, 0x01	; 1
     a7a:	65 e0       	ldi	r22, 0x05	; 5
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_DIR_OUTPUT);
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	66 e0       	ldi	r22, 0x06	; 6
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(MOTOREN_PORT,MOTOR1_ENPIN,DIO_PIN_DIR_OUTPUT);
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	67 e0       	ldi	r22, 0x07	; 7
     a90:	83 e0       	ldi	r24, 0x03	; 3
     a92:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(MOTOREN_PORT,MOTOR2_ENPIN,DIO_PIN_DIR_OUTPUT);
     a96:	41 e0       	ldi	r20, 0x01	; 1
     a98:	67 e0       	ldi	r22, 0x07	; 7
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	Timer_Init(&MotorPWMTimer);
     aa0:	81 ee       	ldi	r24, 0xE1	; 225
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 37 06 	call	0xc6e	; 0xc6e <Timer_Init>
	Timer_Start(&MotorPWMTimer);
     aa8:	81 ee       	ldi	r24, 0xE1	; 225
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 2f 08 	call	0x105e	; 0x105e <Timer_Start>
     ab0:	08 95       	ret

00000ab2 <Motor_Speet>:
	
}
void Motor_Speet(int speed)
{
	if (speed > 10 && speed < 100)
     ab2:	9c 01       	movw	r18, r24
     ab4:	2b 50       	subi	r18, 0x0B	; 11
     ab6:	31 09       	sbc	r19, r1
     ab8:	29 35       	cpi	r18, 0x59	; 89
     aba:	31 05       	cpc	r19, r1
     abc:	68 f4       	brcc	.+26     	; 0xad8 <Motor_Speet+0x26>
	{
		OCR2 = ((255 * speed)/100);
     abe:	4f ef       	ldi	r20, 0xFF	; 255
     ac0:	48 9f       	mul	r20, r24
     ac2:	90 01       	movw	r18, r0
     ac4:	49 9f       	mul	r20, r25
     ac6:	30 0d       	add	r19, r0
     ac8:	11 24       	eor	r1, r1
     aca:	c9 01       	movw	r24, r18
     acc:	64 e6       	ldi	r22, 0x64	; 100
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	0e 94 43 0b 	call	0x1686	; 0x1686 <__divmodhi4>
     ad4:	63 bd       	out	0x23, r22	; 35
     ad6:	08 95       	ret
	} 
	else
	{
		OCR2 = 255;
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	83 bd       	out	0x23, r24	; 35
     adc:	08 95       	ret

00000ade <Motor_foroword>:
	}
}
void Motor_foroword(void)
{
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_HIGH);
     ade:	41 e0       	ldi	r20, 0x01	; 1
     ae0:	63 e0       	ldi	r22, 0x03	; 3
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_LOW);
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	64 e0       	ldi	r22, 0x04	; 4
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_HIGH);
     af2:	41 e0       	ldi	r20, 0x01	; 1
     af4:	65 e0       	ldi	r22, 0x05	; 5
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_LOW);
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	66 e0       	ldi	r22, 0x06	; 6
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     b06:	08 95       	ret

00000b08 <Motor_backword>:
}
void Motor_backword(void)
{
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_HIGH);
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	64 e0       	ldi	r22, 0x04	; 4
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_LOW);
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	63 e0       	ldi	r22, 0x03	; 3
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_HIGH);
     b1c:	41 e0       	ldi	r20, 0x01	; 1
     b1e:	66 e0       	ldi	r22, 0x06	; 6
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_LOW);
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	65 e0       	ldi	r22, 0x05	; 5
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     b30:	08 95       	ret

00000b32 <Motor_Left>:
}
void Motor_Left(void)
{
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_HIGH);
     b32:	41 e0       	ldi	r20, 0x01	; 1
     b34:	63 e0       	ldi	r22, 0x03	; 3
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_LOW);
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	64 e0       	ldi	r22, 0x04	; 4
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_HIGH);
     b46:	41 e0       	ldi	r20, 0x01	; 1
     b48:	66 e0       	ldi	r22, 0x06	; 6
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_LOW);
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	65 e0       	ldi	r22, 0x05	; 5
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     b5a:	08 95       	ret

00000b5c <Motor_Right>:
}
void Motor_Right(void)
{
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_HIGH);
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	64 e0       	ldi	r22, 0x04	; 4
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_LOW);
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	63 e0       	ldi	r22, 0x03	; 3
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_HIGH);
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	65 e0       	ldi	r22, 0x05	; 5
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_LOW);
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	66 e0       	ldi	r22, 0x06	; 6
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     b84:	08 95       	ret

00000b86 <Motor_Stop>:
}
void Motor_Stop(void)
{
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_LOW);
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	64 e0       	ldi	r22, 0x04	; 4
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_LOW);
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	63 e0       	ldi	r22, 0x03	; 3
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_LOW);
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	65 e0       	ldi	r22, 0x05	; 5
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_LOW);
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	66 e0       	ldi	r22, 0x06	; 6
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     bae:	08 95       	ret

00000bb0 <ServoInit>:
 */ 
#include "Servo.h"

void ServoInit(void)
{
  DIO_SetPinDir(SERVO_PORT,SERVO_PIN,DIO_PIN_DIR_OUTPUT);         
     bb0:	41 e0       	ldi	r20, 0x01	; 1
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
  DIO_SetPinVal(SERVO_PORT,SERVO_PIN,DIO_PIN_LOW);         
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     bc4:	08 95       	ret

00000bc6 <ServoGoToAngle>:
}
void ServoGoToAngle(Sint8 Angle)
{
	if (Angle == 90)
     bc6:	8a 35       	cpi	r24, 0x5A	; 90
     bc8:	d1 f4       	brne	.+52     	; 0xbfe <ServoGoToAngle+0x38>
	{
		DIO_SetPinVal(SERVO_PORT,SERVO_PIN,DIO_PIN_HIGH);         //Rotation to 0 degree
     bca:	41 e0       	ldi	r20, 0x01	; 1
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bd4:	8f e9       	ldi	r24, 0x9F	; 159
     bd6:	9f e0       	ldi	r25, 0x0F	; 15
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <ServoGoToAngle+0x12>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <ServoGoToAngle+0x18>
     bde:	00 00       	nop
		_delay_us(1000);      //Rotation to 0 degree
		DIO_SetPinVal(SERVO_PORT,SERVO_PIN,DIO_PIN_LOW);         //Rotation to 0 degree
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bea:	9f ef       	ldi	r25, 0xFF	; 255
     bec:	29 e6       	ldi	r18, 0x69	; 105
     bee:	88 e1       	ldi	r24, 0x18	; 24
     bf0:	91 50       	subi	r25, 0x01	; 1
     bf2:	20 40       	sbci	r18, 0x00	; 0
     bf4:	80 40       	sbci	r24, 0x00	; 0
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <ServoGoToAngle+0x2a>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <ServoGoToAngle+0x34>
     bfa:	00 00       	nop
     bfc:	08 95       	ret
		_delay_ms(500);
	} 
	else if (Angle == 0)
     bfe:	81 11       	cpse	r24, r1
     c00:	1a c0       	rjmp	.+52     	; 0xc36 <ServoGoToAngle+0x70>
	{
		DIO_SetPinVal(SERVO_PORT,SERVO_PIN,DIO_PIN_HIGH);         //Rotation to 0 degree
     c02:	41 e0       	ldi	r20, 0x01	; 1
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c0c:	8f e6       	ldi	r24, 0x6F	; 111
     c0e:	97 e1       	ldi	r25, 0x17	; 23
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <ServoGoToAngle+0x4a>
     c14:	00 c0       	rjmp	.+0      	; 0xc16 <ServoGoToAngle+0x50>
     c16:	00 00       	nop
		_delay_us(1500);      //Rotation to 0 degree
		DIO_SetPinVal(SERVO_PORT,SERVO_PIN,DIO_PIN_LOW);         //Rotation to 0 degree
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c22:	9f ef       	ldi	r25, 0xFF	; 255
     c24:	29 e6       	ldi	r18, 0x69	; 105
     c26:	88 e1       	ldi	r24, 0x18	; 24
     c28:	91 50       	subi	r25, 0x01	; 1
     c2a:	20 40       	sbci	r18, 0x00	; 0
     c2c:	80 40       	sbci	r24, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <ServoGoToAngle+0x62>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <ServoGoToAngle+0x6c>
     c32:	00 00       	nop
     c34:	08 95       	ret
		_delay_ms(500);
	}
	else if (Angle == -90)
     c36:	86 3a       	cpi	r24, 0xA6	; 166
     c38:	c9 f4       	brne	.+50     	; 0xc6c <ServoGoToAngle+0xa6>
	{
		DIO_SetPinVal(SERVO_PORT,SERVO_PIN,DIO_PIN_HIGH);         //Rotation to 0 degree
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c44:	8f e3       	ldi	r24, 0x3F	; 63
     c46:	9f e1       	ldi	r25, 0x1F	; 31
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <ServoGoToAngle+0x82>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <ServoGoToAngle+0x88>
     c4e:	00 00       	nop
		_delay_us(2000);      //Rotation to 0 degree
		DIO_SetPinVal(SERVO_PORT,SERVO_PIN,DIO_PIN_LOW);         //Rotation to 0 degree
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	29 e6       	ldi	r18, 0x69	; 105
     c5e:	88 e1       	ldi	r24, 0x18	; 24
     c60:	91 50       	subi	r25, 0x01	; 1
     c62:	20 40       	sbci	r18, 0x00	; 0
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	e1 f7       	brne	.-8      	; 0xc60 <ServoGoToAngle+0x9a>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <ServoGoToAngle+0xa4>
     c6a:	00 00       	nop
     c6c:	08 95       	ret

00000c6e <Timer_Init>:
	 Init_Value = 256 - (Total_Ticks % 256);
	
	TCCR0 = Init_Value;
	
	N_OVFlows++;
}
     c6e:	fc 01       	movw	r30, r24
     c70:	9f b7       	in	r25, 0x3f	; 63
     c72:	90 68       	ori	r25, 0x80	; 128
     c74:	9f bf       	out	0x3f, r25	; 63
     c76:	80 81       	ld	r24, Z
     c78:	81 11       	cpse	r24, r1
     c7a:	98 c0       	rjmp	.+304    	; 0xdac <Timer_Init+0x13e>
     c7c:	81 81       	ldd	r24, Z+1	; 0x01
     c7e:	81 11       	cpse	r24, r1
     c80:	0a c0       	rjmp	.+20     	; 0xc96 <Timer_Init+0x28>
     c82:	89 b7       	in	r24, 0x39	; 57
     c84:	81 60       	ori	r24, 0x01	; 1
     c86:	89 bf       	out	0x39, r24	; 57
     c88:	83 b7       	in	r24, 0x33	; 51
     c8a:	87 7f       	andi	r24, 0xF7	; 247
     c8c:	83 bf       	out	0x33, r24	; 51
     c8e:	83 b7       	in	r24, 0x33	; 51
     c90:	8f 7b       	andi	r24, 0xBF	; 191
     c92:	83 bf       	out	0x33, r24	; 51
     c94:	08 95       	ret
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	61 f5       	brne	.+88     	; 0xcf2 <Timer_Init+0x84>
     c9a:	83 b7       	in	r24, 0x33	; 51
     c9c:	88 60       	ori	r24, 0x08	; 8
     c9e:	83 bf       	out	0x33, r24	; 51
     ca0:	83 b7       	in	r24, 0x33	; 51
     ca2:	8f 7b       	andi	r24, 0xBF	; 191
     ca4:	83 bf       	out	0x33, r24	; 51
     ca6:	80 85       	ldd	r24, Z+8	; 0x08
     ca8:	81 11       	cpse	r24, r1
     caa:	07 c0       	rjmp	.+14     	; 0xcba <Timer_Init+0x4c>
     cac:	83 b7       	in	r24, 0x33	; 51
     cae:	8f 7e       	andi	r24, 0xEF	; 239
     cb0:	83 bf       	out	0x33, r24	; 51
     cb2:	83 b7       	in	r24, 0x33	; 51
     cb4:	8f 7d       	andi	r24, 0xDF	; 223
     cb6:	83 bf       	out	0x33, r24	; 51
     cb8:	08 95       	ret
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	39 f4       	brne	.+14     	; 0xccc <Timer_Init+0x5e>
     cbe:	83 b7       	in	r24, 0x33	; 51
     cc0:	80 61       	ori	r24, 0x10	; 16
     cc2:	83 bf       	out	0x33, r24	; 51
     cc4:	83 b7       	in	r24, 0x33	; 51
     cc6:	8f 7d       	andi	r24, 0xDF	; 223
     cc8:	83 bf       	out	0x33, r24	; 51
     cca:	08 95       	ret
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	39 f4       	brne	.+14     	; 0xcde <Timer_Init+0x70>
     cd0:	83 b7       	in	r24, 0x33	; 51
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	83 bf       	out	0x33, r24	; 51
     cd6:	83 b7       	in	r24, 0x33	; 51
     cd8:	8f 7e       	andi	r24, 0xEF	; 239
     cda:	83 bf       	out	0x33, r24	; 51
     cdc:	08 95       	ret
     cde:	83 30       	cpi	r24, 0x03	; 3
     ce0:	09 f0       	breq	.+2      	; 0xce4 <Timer_Init+0x76>
     ce2:	bc c1       	rjmp	.+888    	; 0x105c <Timer_Init+0x3ee>
     ce4:	83 b7       	in	r24, 0x33	; 51
     ce6:	80 61       	ori	r24, 0x10	; 16
     ce8:	83 bf       	out	0x33, r24	; 51
     cea:	83 b7       	in	r24, 0x33	; 51
     cec:	80 62       	ori	r24, 0x20	; 32
     cee:	83 bf       	out	0x33, r24	; 51
     cf0:	08 95       	ret
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	61 f5       	brne	.+88     	; 0xd4e <Timer_Init+0xe0>
     cf6:	83 b7       	in	r24, 0x33	; 51
     cf8:	80 64       	ori	r24, 0x40	; 64
     cfa:	83 bf       	out	0x33, r24	; 51
     cfc:	83 b7       	in	r24, 0x33	; 51
     cfe:	87 7f       	andi	r24, 0xF7	; 247
     d00:	83 bf       	out	0x33, r24	; 51
     d02:	81 85       	ldd	r24, Z+9	; 0x09
     d04:	81 11       	cpse	r24, r1
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <Timer_Init+0xa8>
     d08:	83 b7       	in	r24, 0x33	; 51
     d0a:	8f 7e       	andi	r24, 0xEF	; 239
     d0c:	83 bf       	out	0x33, r24	; 51
     d0e:	83 b7       	in	r24, 0x33	; 51
     d10:	8f 7d       	andi	r24, 0xDF	; 223
     d12:	83 bf       	out	0x33, r24	; 51
     d14:	08 95       	ret
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	39 f4       	brne	.+14     	; 0xd28 <Timer_Init+0xba>
     d1a:	83 b7       	in	r24, 0x33	; 51
     d1c:	80 61       	ori	r24, 0x10	; 16
     d1e:	83 bf       	out	0x33, r24	; 51
     d20:	83 b7       	in	r24, 0x33	; 51
     d22:	8f 7d       	andi	r24, 0xDF	; 223
     d24:	83 bf       	out	0x33, r24	; 51
     d26:	08 95       	ret
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	39 f4       	brne	.+14     	; 0xd3a <Timer_Init+0xcc>
     d2c:	83 b7       	in	r24, 0x33	; 51
     d2e:	80 62       	ori	r24, 0x20	; 32
     d30:	83 bf       	out	0x33, r24	; 51
     d32:	83 b7       	in	r24, 0x33	; 51
     d34:	8f 7e       	andi	r24, 0xEF	; 239
     d36:	83 bf       	out	0x33, r24	; 51
     d38:	08 95       	ret
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	09 f0       	breq	.+2      	; 0xd40 <Timer_Init+0xd2>
     d3e:	8e c1       	rjmp	.+796    	; 0x105c <Timer_Init+0x3ee>
     d40:	83 b7       	in	r24, 0x33	; 51
     d42:	80 61       	ori	r24, 0x10	; 16
     d44:	83 bf       	out	0x33, r24	; 51
     d46:	83 b7       	in	r24, 0x33	; 51
     d48:	80 62       	ori	r24, 0x20	; 32
     d4a:	83 bf       	out	0x33, r24	; 51
     d4c:	08 95       	ret
     d4e:	83 30       	cpi	r24, 0x03	; 3
     d50:	09 f0       	breq	.+2      	; 0xd54 <Timer_Init+0xe6>
     d52:	84 c1       	rjmp	.+776    	; 0x105c <Timer_Init+0x3ee>
     d54:	83 b7       	in	r24, 0x33	; 51
     d56:	88 60       	ori	r24, 0x08	; 8
     d58:	83 bf       	out	0x33, r24	; 51
     d5a:	83 b7       	in	r24, 0x33	; 51
     d5c:	80 64       	ori	r24, 0x40	; 64
     d5e:	83 bf       	out	0x33, r24	; 51
     d60:	81 85       	ldd	r24, Z+9	; 0x09
     d62:	81 11       	cpse	r24, r1
     d64:	07 c0       	rjmp	.+14     	; 0xd74 <Timer_Init+0x106>
     d66:	83 b7       	in	r24, 0x33	; 51
     d68:	8f 7e       	andi	r24, 0xEF	; 239
     d6a:	83 bf       	out	0x33, r24	; 51
     d6c:	83 b7       	in	r24, 0x33	; 51
     d6e:	8f 7d       	andi	r24, 0xDF	; 223
     d70:	83 bf       	out	0x33, r24	; 51
     d72:	08 95       	ret
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	39 f4       	brne	.+14     	; 0xd86 <Timer_Init+0x118>
     d78:	83 b7       	in	r24, 0x33	; 51
     d7a:	80 61       	ori	r24, 0x10	; 16
     d7c:	83 bf       	out	0x33, r24	; 51
     d7e:	83 b7       	in	r24, 0x33	; 51
     d80:	8f 7d       	andi	r24, 0xDF	; 223
     d82:	83 bf       	out	0x33, r24	; 51
     d84:	08 95       	ret
     d86:	82 30       	cpi	r24, 0x02	; 2
     d88:	39 f4       	brne	.+14     	; 0xd98 <Timer_Init+0x12a>
     d8a:	83 b7       	in	r24, 0x33	; 51
     d8c:	80 62       	ori	r24, 0x20	; 32
     d8e:	83 bf       	out	0x33, r24	; 51
     d90:	83 b7       	in	r24, 0x33	; 51
     d92:	8f 7e       	andi	r24, 0xEF	; 239
     d94:	83 bf       	out	0x33, r24	; 51
     d96:	08 95       	ret
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	09 f0       	breq	.+2      	; 0xd9e <Timer_Init+0x130>
     d9c:	5f c1       	rjmp	.+702    	; 0x105c <Timer_Init+0x3ee>
     d9e:	83 b7       	in	r24, 0x33	; 51
     da0:	80 61       	ori	r24, 0x10	; 16
     da2:	83 bf       	out	0x33, r24	; 51
     da4:	83 b7       	in	r24, 0x33	; 51
     da6:	80 62       	ori	r24, 0x20	; 32
     da8:	83 bf       	out	0x33, r24	; 51
     daa:	08 95       	ret
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <Timer_Init+0x144>
     db0:	c1 c0       	rjmp	.+386    	; 0xf34 <Timer_Init+0x2c6>
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	81 11       	cpse	r24, r1
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <Timer_Init+0x14e>
     db8:	1f bc       	out	0x2f, r1	; 47
     dba:	08 95       	ret
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	21 f4       	brne	.+8      	; 0xdc8 <Timer_Init+0x15a>
     dc0:	89 b7       	in	r24, 0x39	; 57
     dc2:	80 62       	ori	r24, 0x20	; 32
     dc4:	89 bf       	out	0x39, r24	; 57
     dc6:	08 95       	ret
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	09 f0       	breq	.+2      	; 0xdce <Timer_Init+0x160>
     dcc:	55 c0       	rjmp	.+170    	; 0xe78 <Timer_Init+0x20a>
     dce:	8f b5       	in	r24, 0x2f	; 47
     dd0:	81 60       	ori	r24, 0x01	; 1
     dd2:	8f bd       	out	0x2f, r24	; 47
     dd4:	80 85       	ldd	r24, Z+8	; 0x08
     dd6:	81 11       	cpse	r24, r1
     dd8:	26 c0       	rjmp	.+76     	; 0xe26 <Timer_Init+0x1b8>
     dda:	81 85       	ldd	r24, Z+9	; 0x09
     ddc:	81 11       	cpse	r24, r1
     dde:	07 c0       	rjmp	.+14     	; 0xdee <Timer_Init+0x180>
     de0:	8f b5       	in	r24, 0x2f	; 47
     de2:	8f 7e       	andi	r24, 0xEF	; 239
     de4:	8f bd       	out	0x2f, r24	; 47
     de6:	8f b5       	in	r24, 0x2f	; 47
     de8:	8f 7d       	andi	r24, 0xDF	; 223
     dea:	8f bd       	out	0x2f, r24	; 47
     dec:	08 95       	ret
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	39 f4       	brne	.+14     	; 0xe00 <Timer_Init+0x192>
     df2:	8f b5       	in	r24, 0x2f	; 47
     df4:	80 61       	ori	r24, 0x10	; 16
     df6:	8f bd       	out	0x2f, r24	; 47
     df8:	8f b5       	in	r24, 0x2f	; 47
     dfa:	8f 7d       	andi	r24, 0xDF	; 223
     dfc:	8f bd       	out	0x2f, r24	; 47
     dfe:	08 95       	ret
     e00:	82 30       	cpi	r24, 0x02	; 2
     e02:	39 f4       	brne	.+14     	; 0xe12 <Timer_Init+0x1a4>
     e04:	8f b5       	in	r24, 0x2f	; 47
     e06:	80 62       	ori	r24, 0x20	; 32
     e08:	8f bd       	out	0x2f, r24	; 47
     e0a:	8f b5       	in	r24, 0x2f	; 47
     e0c:	8f 7e       	andi	r24, 0xEF	; 239
     e0e:	8f bd       	out	0x2f, r24	; 47
     e10:	08 95       	ret
     e12:	83 30       	cpi	r24, 0x03	; 3
     e14:	09 f0       	breq	.+2      	; 0xe18 <Timer_Init+0x1aa>
     e16:	22 c1       	rjmp	.+580    	; 0x105c <Timer_Init+0x3ee>
     e18:	8f b5       	in	r24, 0x2f	; 47
     e1a:	80 61       	ori	r24, 0x10	; 16
     e1c:	8f bd       	out	0x2f, r24	; 47
     e1e:	8f b5       	in	r24, 0x2f	; 47
     e20:	80 62       	ori	r24, 0x20	; 32
     e22:	8f bd       	out	0x2f, r24	; 47
     e24:	08 95       	ret
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	09 f0       	breq	.+2      	; 0xe2c <Timer_Init+0x1be>
     e2a:	18 c1       	rjmp	.+560    	; 0x105c <Timer_Init+0x3ee>
     e2c:	81 85       	ldd	r24, Z+9	; 0x09
     e2e:	81 11       	cpse	r24, r1
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <Timer_Init+0x1d2>
     e32:	8f b5       	in	r24, 0x2f	; 47
     e34:	8f 7b       	andi	r24, 0xBF	; 191
     e36:	8f bd       	out	0x2f, r24	; 47
     e38:	8f b5       	in	r24, 0x2f	; 47
     e3a:	8f 77       	andi	r24, 0x7F	; 127
     e3c:	8f bd       	out	0x2f, r24	; 47
     e3e:	08 95       	ret
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	39 f4       	brne	.+14     	; 0xe52 <Timer_Init+0x1e4>
     e44:	8f b5       	in	r24, 0x2f	; 47
     e46:	80 64       	ori	r24, 0x40	; 64
     e48:	8f bd       	out	0x2f, r24	; 47
     e4a:	8f b5       	in	r24, 0x2f	; 47
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	8f bd       	out	0x2f, r24	; 47
     e50:	08 95       	ret
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	39 f4       	brne	.+14     	; 0xe64 <Timer_Init+0x1f6>
     e56:	8f b5       	in	r24, 0x2f	; 47
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	8f bd       	out	0x2f, r24	; 47
     e5c:	8f b5       	in	r24, 0x2f	; 47
     e5e:	8f 7b       	andi	r24, 0xBF	; 191
     e60:	8f bd       	out	0x2f, r24	; 47
     e62:	08 95       	ret
     e64:	83 30       	cpi	r24, 0x03	; 3
     e66:	09 f0       	breq	.+2      	; 0xe6a <Timer_Init+0x1fc>
     e68:	f9 c0       	rjmp	.+498    	; 0x105c <Timer_Init+0x3ee>
     e6a:	8f b5       	in	r24, 0x2f	; 47
     e6c:	80 64       	ori	r24, 0x40	; 64
     e6e:	8f bd       	out	0x2f, r24	; 47
     e70:	8f b5       	in	r24, 0x2f	; 47
     e72:	80 68       	ori	r24, 0x80	; 128
     e74:	8f bd       	out	0x2f, r24	; 47
     e76:	08 95       	ret
     e78:	83 30       	cpi	r24, 0x03	; 3
     e7a:	09 f0       	breq	.+2      	; 0xe7e <Timer_Init+0x210>
     e7c:	ef c0       	rjmp	.+478    	; 0x105c <Timer_Init+0x3ee>
     e7e:	8f b5       	in	r24, 0x2f	; 47
     e80:	81 60       	ori	r24, 0x01	; 1
     e82:	8f bd       	out	0x2f, r24	; 47
     e84:	8f b5       	in	r24, 0x2f	; 47
     e86:	8d 7f       	andi	r24, 0xFD	; 253
     e88:	8f bd       	out	0x2f, r24	; 47
     e8a:	8e b5       	in	r24, 0x2e	; 46
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	8e bd       	out	0x2e, r24	; 46
     e90:	80 85       	ldd	r24, Z+8	; 0x08
     e92:	81 11       	cpse	r24, r1
     e94:	26 c0       	rjmp	.+76     	; 0xee2 <Timer_Init+0x274>
     e96:	81 85       	ldd	r24, Z+9	; 0x09
     e98:	81 11       	cpse	r24, r1
     e9a:	07 c0       	rjmp	.+14     	; 0xeaa <Timer_Init+0x23c>
     e9c:	8f b5       	in	r24, 0x2f	; 47
     e9e:	8f 7e       	andi	r24, 0xEF	; 239
     ea0:	8f bd       	out	0x2f, r24	; 47
     ea2:	8f b5       	in	r24, 0x2f	; 47
     ea4:	8f 7d       	andi	r24, 0xDF	; 223
     ea6:	8f bd       	out	0x2f, r24	; 47
     ea8:	08 95       	ret
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	39 f4       	brne	.+14     	; 0xebc <Timer_Init+0x24e>
     eae:	8f b5       	in	r24, 0x2f	; 47
     eb0:	80 61       	ori	r24, 0x10	; 16
     eb2:	8f bd       	out	0x2f, r24	; 47
     eb4:	8f b5       	in	r24, 0x2f	; 47
     eb6:	8f 7d       	andi	r24, 0xDF	; 223
     eb8:	8f bd       	out	0x2f, r24	; 47
     eba:	08 95       	ret
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	39 f4       	brne	.+14     	; 0xece <Timer_Init+0x260>
     ec0:	8f b5       	in	r24, 0x2f	; 47
     ec2:	80 62       	ori	r24, 0x20	; 32
     ec4:	8f bd       	out	0x2f, r24	; 47
     ec6:	8f b5       	in	r24, 0x2f	; 47
     ec8:	8f 7e       	andi	r24, 0xEF	; 239
     eca:	8f bd       	out	0x2f, r24	; 47
     ecc:	08 95       	ret
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	09 f0       	breq	.+2      	; 0xed4 <Timer_Init+0x266>
     ed2:	c4 c0       	rjmp	.+392    	; 0x105c <Timer_Init+0x3ee>
     ed4:	8f b5       	in	r24, 0x2f	; 47
     ed6:	80 61       	ori	r24, 0x10	; 16
     ed8:	8f bd       	out	0x2f, r24	; 47
     eda:	8f b5       	in	r24, 0x2f	; 47
     edc:	80 62       	ori	r24, 0x20	; 32
     ede:	8f bd       	out	0x2f, r24	; 47
     ee0:	08 95       	ret
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	09 f0       	breq	.+2      	; 0xee8 <Timer_Init+0x27a>
     ee6:	ba c0       	rjmp	.+372    	; 0x105c <Timer_Init+0x3ee>
     ee8:	81 85       	ldd	r24, Z+9	; 0x09
     eea:	81 11       	cpse	r24, r1
     eec:	07 c0       	rjmp	.+14     	; 0xefc <Timer_Init+0x28e>
     eee:	8f b5       	in	r24, 0x2f	; 47
     ef0:	8f 7b       	andi	r24, 0xBF	; 191
     ef2:	8f bd       	out	0x2f, r24	; 47
     ef4:	8f b5       	in	r24, 0x2f	; 47
     ef6:	8f 77       	andi	r24, 0x7F	; 127
     ef8:	8f bd       	out	0x2f, r24	; 47
     efa:	08 95       	ret
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	39 f4       	brne	.+14     	; 0xf0e <Timer_Init+0x2a0>
     f00:	8f b5       	in	r24, 0x2f	; 47
     f02:	80 64       	ori	r24, 0x40	; 64
     f04:	8f bd       	out	0x2f, r24	; 47
     f06:	8f b5       	in	r24, 0x2f	; 47
     f08:	8f 77       	andi	r24, 0x7F	; 127
     f0a:	8f bd       	out	0x2f, r24	; 47
     f0c:	08 95       	ret
     f0e:	82 30       	cpi	r24, 0x02	; 2
     f10:	39 f4       	brne	.+14     	; 0xf20 <Timer_Init+0x2b2>
     f12:	8f b5       	in	r24, 0x2f	; 47
     f14:	80 68       	ori	r24, 0x80	; 128
     f16:	8f bd       	out	0x2f, r24	; 47
     f18:	8f b5       	in	r24, 0x2f	; 47
     f1a:	8f 7b       	andi	r24, 0xBF	; 191
     f1c:	8f bd       	out	0x2f, r24	; 47
     f1e:	08 95       	ret
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	09 f0       	breq	.+2      	; 0xf26 <Timer_Init+0x2b8>
     f24:	9b c0       	rjmp	.+310    	; 0x105c <Timer_Init+0x3ee>
     f26:	8f b5       	in	r24, 0x2f	; 47
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	8f bd       	out	0x2f, r24	; 47
     f2c:	8f b5       	in	r24, 0x2f	; 47
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	8f bd       	out	0x2f, r24	; 47
     f32:	08 95       	ret
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	09 f0       	breq	.+2      	; 0xf3a <Timer_Init+0x2cc>
     f38:	91 c0       	rjmp	.+290    	; 0x105c <Timer_Init+0x3ee>
     f3a:	81 81       	ldd	r24, Z+1	; 0x01
     f3c:	81 11       	cpse	r24, r1
     f3e:	07 c0       	rjmp	.+14     	; 0xf4e <Timer_Init+0x2e0>
     f40:	85 b5       	in	r24, 0x25	; 37
     f42:	87 7f       	andi	r24, 0xF7	; 247
     f44:	85 bd       	out	0x25, r24	; 37
     f46:	85 b5       	in	r24, 0x25	; 37
     f48:	8f 7b       	andi	r24, 0xBF	; 191
     f4a:	85 bd       	out	0x25, r24	; 37
     f4c:	08 95       	ret
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	61 f5       	brne	.+88     	; 0xfaa <Timer_Init+0x33c>
     f52:	85 b5       	in	r24, 0x25	; 37
     f54:	88 60       	ori	r24, 0x08	; 8
     f56:	85 bd       	out	0x25, r24	; 37
     f58:	85 b5       	in	r24, 0x25	; 37
     f5a:	8f 7b       	andi	r24, 0xBF	; 191
     f5c:	85 bd       	out	0x25, r24	; 37
     f5e:	80 85       	ldd	r24, Z+8	; 0x08
     f60:	81 11       	cpse	r24, r1
     f62:	07 c0       	rjmp	.+14     	; 0xf72 <Timer_Init+0x304>
     f64:	85 b5       	in	r24, 0x25	; 37
     f66:	8f 7e       	andi	r24, 0xEF	; 239
     f68:	85 bd       	out	0x25, r24	; 37
     f6a:	85 b5       	in	r24, 0x25	; 37
     f6c:	8f 7d       	andi	r24, 0xDF	; 223
     f6e:	85 bd       	out	0x25, r24	; 37
     f70:	08 95       	ret
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	39 f4       	brne	.+14     	; 0xf84 <Timer_Init+0x316>
     f76:	85 b5       	in	r24, 0x25	; 37
     f78:	80 61       	ori	r24, 0x10	; 16
     f7a:	85 bd       	out	0x25, r24	; 37
     f7c:	85 b5       	in	r24, 0x25	; 37
     f7e:	8f 7d       	andi	r24, 0xDF	; 223
     f80:	85 bd       	out	0x25, r24	; 37
     f82:	08 95       	ret
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	39 f4       	brne	.+14     	; 0xf96 <Timer_Init+0x328>
     f88:	85 b5       	in	r24, 0x25	; 37
     f8a:	80 62       	ori	r24, 0x20	; 32
     f8c:	85 bd       	out	0x25, r24	; 37
     f8e:	85 b5       	in	r24, 0x25	; 37
     f90:	8f 7e       	andi	r24, 0xEF	; 239
     f92:	85 bd       	out	0x25, r24	; 37
     f94:	08 95       	ret
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	09 f0       	breq	.+2      	; 0xf9c <Timer_Init+0x32e>
     f9a:	60 c0       	rjmp	.+192    	; 0x105c <Timer_Init+0x3ee>
     f9c:	85 b5       	in	r24, 0x25	; 37
     f9e:	80 61       	ori	r24, 0x10	; 16
     fa0:	85 bd       	out	0x25, r24	; 37
     fa2:	85 b5       	in	r24, 0x25	; 37
     fa4:	80 62       	ori	r24, 0x20	; 32
     fa6:	85 bd       	out	0x25, r24	; 37
     fa8:	08 95       	ret
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	59 f5       	brne	.+86     	; 0x1004 <Timer_Init+0x396>
     fae:	85 b5       	in	r24, 0x25	; 37
     fb0:	80 64       	ori	r24, 0x40	; 64
     fb2:	85 bd       	out	0x25, r24	; 37
     fb4:	85 b5       	in	r24, 0x25	; 37
     fb6:	87 7f       	andi	r24, 0xF7	; 247
     fb8:	85 bd       	out	0x25, r24	; 37
     fba:	81 85       	ldd	r24, Z+9	; 0x09
     fbc:	81 11       	cpse	r24, r1
     fbe:	07 c0       	rjmp	.+14     	; 0xfce <Timer_Init+0x360>
     fc0:	85 b5       	in	r24, 0x25	; 37
     fc2:	8f 7e       	andi	r24, 0xEF	; 239
     fc4:	85 bd       	out	0x25, r24	; 37
     fc6:	85 b5       	in	r24, 0x25	; 37
     fc8:	8f 7d       	andi	r24, 0xDF	; 223
     fca:	85 bd       	out	0x25, r24	; 37
     fcc:	08 95       	ret
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	39 f4       	brne	.+14     	; 0xfe0 <Timer_Init+0x372>
     fd2:	85 b5       	in	r24, 0x25	; 37
     fd4:	80 61       	ori	r24, 0x10	; 16
     fd6:	85 bd       	out	0x25, r24	; 37
     fd8:	85 b5       	in	r24, 0x25	; 37
     fda:	8f 7d       	andi	r24, 0xDF	; 223
     fdc:	85 bd       	out	0x25, r24	; 37
     fde:	08 95       	ret
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	39 f4       	brne	.+14     	; 0xff2 <Timer_Init+0x384>
     fe4:	85 b5       	in	r24, 0x25	; 37
     fe6:	80 62       	ori	r24, 0x20	; 32
     fe8:	85 bd       	out	0x25, r24	; 37
     fea:	85 b5       	in	r24, 0x25	; 37
     fec:	8f 7e       	andi	r24, 0xEF	; 239
     fee:	85 bd       	out	0x25, r24	; 37
     ff0:	08 95       	ret
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	99 f5       	brne	.+102    	; 0x105c <Timer_Init+0x3ee>
     ff6:	85 b5       	in	r24, 0x25	; 37
     ff8:	80 61       	ori	r24, 0x10	; 16
     ffa:	85 bd       	out	0x25, r24	; 37
     ffc:	85 b5       	in	r24, 0x25	; 37
     ffe:	80 62       	ori	r24, 0x20	; 32
    1000:	85 bd       	out	0x25, r24	; 37
    1002:	08 95       	ret
    1004:	83 30       	cpi	r24, 0x03	; 3
    1006:	51 f5       	brne	.+84     	; 0x105c <Timer_Init+0x3ee>
    1008:	85 b5       	in	r24, 0x25	; 37
    100a:	88 60       	ori	r24, 0x08	; 8
    100c:	85 bd       	out	0x25, r24	; 37
    100e:	85 b5       	in	r24, 0x25	; 37
    1010:	80 64       	ori	r24, 0x40	; 64
    1012:	85 bd       	out	0x25, r24	; 37
    1014:	81 85       	ldd	r24, Z+9	; 0x09
    1016:	81 11       	cpse	r24, r1
    1018:	07 c0       	rjmp	.+14     	; 0x1028 <Timer_Init+0x3ba>
    101a:	85 b5       	in	r24, 0x25	; 37
    101c:	8f 7e       	andi	r24, 0xEF	; 239
    101e:	85 bd       	out	0x25, r24	; 37
    1020:	85 b5       	in	r24, 0x25	; 37
    1022:	8f 7d       	andi	r24, 0xDF	; 223
    1024:	85 bd       	out	0x25, r24	; 37
    1026:	08 95       	ret
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	39 f4       	brne	.+14     	; 0x103a <Timer_Init+0x3cc>
    102c:	85 b5       	in	r24, 0x25	; 37
    102e:	80 61       	ori	r24, 0x10	; 16
    1030:	85 bd       	out	0x25, r24	; 37
    1032:	85 b5       	in	r24, 0x25	; 37
    1034:	8f 7d       	andi	r24, 0xDF	; 223
    1036:	85 bd       	out	0x25, r24	; 37
    1038:	08 95       	ret
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	39 f4       	brne	.+14     	; 0x104c <Timer_Init+0x3de>
    103e:	85 b5       	in	r24, 0x25	; 37
    1040:	80 62       	ori	r24, 0x20	; 32
    1042:	85 bd       	out	0x25, r24	; 37
    1044:	85 b5       	in	r24, 0x25	; 37
    1046:	8f 7e       	andi	r24, 0xEF	; 239
    1048:	85 bd       	out	0x25, r24	; 37
    104a:	08 95       	ret
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	31 f4       	brne	.+12     	; 0x105c <Timer_Init+0x3ee>
    1050:	85 b5       	in	r24, 0x25	; 37
    1052:	80 61       	ori	r24, 0x10	; 16
    1054:	85 bd       	out	0x25, r24	; 37
    1056:	85 b5       	in	r24, 0x25	; 37
    1058:	80 62       	ori	r24, 0x20	; 32
    105a:	85 bd       	out	0x25, r24	; 37
    105c:	08 95       	ret

0000105e <Timer_Start>:
    105e:	fc 01       	movw	r30, r24
    1060:	90 81       	ld	r25, Z
    1062:	91 11       	cpse	r25, r1
    1064:	45 c0       	rjmp	.+138    	; 0x10f0 <Timer_Start+0x92>
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	91 05       	cpc	r25, r1
    106e:	51 f4       	brne	.+20     	; 0x1084 <Timer_Start+0x26>
    1070:	83 b7       	in	r24, 0x33	; 51
    1072:	81 60       	ori	r24, 0x01	; 1
    1074:	83 bf       	out	0x33, r24	; 51
    1076:	83 b7       	in	r24, 0x33	; 51
    1078:	8d 7f       	andi	r24, 0xFD	; 253
    107a:	83 bf       	out	0x33, r24	; 51
    107c:	83 b7       	in	r24, 0x33	; 51
    107e:	8b 7f       	andi	r24, 0xFB	; 251
    1080:	83 bf       	out	0x33, r24	; 51
    1082:	08 95       	ret
    1084:	88 30       	cpi	r24, 0x08	; 8
    1086:	91 05       	cpc	r25, r1
    1088:	51 f4       	brne	.+20     	; 0x109e <Timer_Start+0x40>
    108a:	83 b7       	in	r24, 0x33	; 51
    108c:	8e 7f       	andi	r24, 0xFE	; 254
    108e:	83 bf       	out	0x33, r24	; 51
    1090:	83 b7       	in	r24, 0x33	; 51
    1092:	82 60       	ori	r24, 0x02	; 2
    1094:	83 bf       	out	0x33, r24	; 51
    1096:	83 b7       	in	r24, 0x33	; 51
    1098:	8b 7f       	andi	r24, 0xFB	; 251
    109a:	83 bf       	out	0x33, r24	; 51
    109c:	08 95       	ret
    109e:	80 34       	cpi	r24, 0x40	; 64
    10a0:	91 05       	cpc	r25, r1
    10a2:	51 f4       	brne	.+20     	; 0x10b8 <Timer_Start+0x5a>
    10a4:	83 b7       	in	r24, 0x33	; 51
    10a6:	81 60       	ori	r24, 0x01	; 1
    10a8:	83 bf       	out	0x33, r24	; 51
    10aa:	83 b7       	in	r24, 0x33	; 51
    10ac:	82 60       	ori	r24, 0x02	; 2
    10ae:	83 bf       	out	0x33, r24	; 51
    10b0:	83 b7       	in	r24, 0x33	; 51
    10b2:	8b 7f       	andi	r24, 0xFB	; 251
    10b4:	83 bf       	out	0x33, r24	; 51
    10b6:	08 95       	ret
    10b8:	81 15       	cp	r24, r1
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	92 07       	cpc	r25, r18
    10be:	51 f4       	brne	.+20     	; 0x10d4 <Timer_Start+0x76>
    10c0:	83 b7       	in	r24, 0x33	; 51
    10c2:	8e 7f       	andi	r24, 0xFE	; 254
    10c4:	83 bf       	out	0x33, r24	; 51
    10c6:	83 b7       	in	r24, 0x33	; 51
    10c8:	8d 7f       	andi	r24, 0xFD	; 253
    10ca:	83 bf       	out	0x33, r24	; 51
    10cc:	83 b7       	in	r24, 0x33	; 51
    10ce:	84 60       	ori	r24, 0x04	; 4
    10d0:	83 bf       	out	0x33, r24	; 51
    10d2:	08 95       	ret
    10d4:	81 15       	cp	r24, r1
    10d6:	94 40       	sbci	r25, 0x04	; 4
    10d8:	09 f0       	breq	.+2      	; 0x10dc <Timer_Start+0x7e>
    10da:	b2 c0       	rjmp	.+356    	; 0x1240 <Timer_Start+0x1e2>
    10dc:	83 b7       	in	r24, 0x33	; 51
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	83 bf       	out	0x33, r24	; 51
    10e2:	83 b7       	in	r24, 0x33	; 51
    10e4:	8d 7f       	andi	r24, 0xFD	; 253
    10e6:	83 bf       	out	0x33, r24	; 51
    10e8:	83 b7       	in	r24, 0x33	; 51
    10ea:	84 60       	ori	r24, 0x04	; 4
    10ec:	83 bf       	out	0x33, r24	; 51
    10ee:	08 95       	ret
    10f0:	91 30       	cpi	r25, 0x01	; 1
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <Timer_Start+0x98>
    10f4:	45 c0       	rjmp	.+138    	; 0x1180 <Timer_Start+0x122>
    10f6:	82 81       	ldd	r24, Z+2	; 0x02
    10f8:	93 81       	ldd	r25, Z+3	; 0x03
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	91 05       	cpc	r25, r1
    10fe:	51 f4       	brne	.+20     	; 0x1114 <Timer_Start+0xb6>
    1100:	8e b5       	in	r24, 0x2e	; 46
    1102:	81 60       	ori	r24, 0x01	; 1
    1104:	8e bd       	out	0x2e, r24	; 46
    1106:	8e b5       	in	r24, 0x2e	; 46
    1108:	8d 7f       	andi	r24, 0xFD	; 253
    110a:	8e bd       	out	0x2e, r24	; 46
    110c:	8e b5       	in	r24, 0x2e	; 46
    110e:	8b 7f       	andi	r24, 0xFB	; 251
    1110:	8e bd       	out	0x2e, r24	; 46
    1112:	08 95       	ret
    1114:	88 30       	cpi	r24, 0x08	; 8
    1116:	91 05       	cpc	r25, r1
    1118:	51 f4       	brne	.+20     	; 0x112e <Timer_Start+0xd0>
    111a:	8e b5       	in	r24, 0x2e	; 46
    111c:	8e 7f       	andi	r24, 0xFE	; 254
    111e:	8e bd       	out	0x2e, r24	; 46
    1120:	8e b5       	in	r24, 0x2e	; 46
    1122:	82 60       	ori	r24, 0x02	; 2
    1124:	8e bd       	out	0x2e, r24	; 46
    1126:	8e b5       	in	r24, 0x2e	; 46
    1128:	8b 7f       	andi	r24, 0xFB	; 251
    112a:	8e bd       	out	0x2e, r24	; 46
    112c:	08 95       	ret
    112e:	80 34       	cpi	r24, 0x40	; 64
    1130:	91 05       	cpc	r25, r1
    1132:	51 f4       	brne	.+20     	; 0x1148 <Timer_Start+0xea>
    1134:	8e b5       	in	r24, 0x2e	; 46
    1136:	81 60       	ori	r24, 0x01	; 1
    1138:	8e bd       	out	0x2e, r24	; 46
    113a:	8e b5       	in	r24, 0x2e	; 46
    113c:	82 60       	ori	r24, 0x02	; 2
    113e:	8e bd       	out	0x2e, r24	; 46
    1140:	8e b5       	in	r24, 0x2e	; 46
    1142:	8b 7f       	andi	r24, 0xFB	; 251
    1144:	8e bd       	out	0x2e, r24	; 46
    1146:	08 95       	ret
    1148:	81 15       	cp	r24, r1
    114a:	21 e0       	ldi	r18, 0x01	; 1
    114c:	92 07       	cpc	r25, r18
    114e:	51 f4       	brne	.+20     	; 0x1164 <Timer_Start+0x106>
    1150:	8e b5       	in	r24, 0x2e	; 46
    1152:	8e 7f       	andi	r24, 0xFE	; 254
    1154:	8e bd       	out	0x2e, r24	; 46
    1156:	8e b5       	in	r24, 0x2e	; 46
    1158:	8d 7f       	andi	r24, 0xFD	; 253
    115a:	8e bd       	out	0x2e, r24	; 46
    115c:	8e b5       	in	r24, 0x2e	; 46
    115e:	84 60       	ori	r24, 0x04	; 4
    1160:	8e bd       	out	0x2e, r24	; 46
    1162:	08 95       	ret
    1164:	81 15       	cp	r24, r1
    1166:	94 40       	sbci	r25, 0x04	; 4
    1168:	09 f0       	breq	.+2      	; 0x116c <Timer_Start+0x10e>
    116a:	6a c0       	rjmp	.+212    	; 0x1240 <Timer_Start+0x1e2>
    116c:	8e b5       	in	r24, 0x2e	; 46
    116e:	81 60       	ori	r24, 0x01	; 1
    1170:	8e bd       	out	0x2e, r24	; 46
    1172:	8e b5       	in	r24, 0x2e	; 46
    1174:	8d 7f       	andi	r24, 0xFD	; 253
    1176:	8e bd       	out	0x2e, r24	; 46
    1178:	8e b5       	in	r24, 0x2e	; 46
    117a:	84 60       	ori	r24, 0x04	; 4
    117c:	8e bd       	out	0x2e, r24	; 46
    117e:	08 95       	ret
    1180:	92 30       	cpi	r25, 0x02	; 2
    1182:	09 f0       	breq	.+2      	; 0x1186 <Timer_Start+0x128>
    1184:	5d c0       	rjmp	.+186    	; 0x1240 <Timer_Start+0x1e2>
    1186:	82 81       	ldd	r24, Z+2	; 0x02
    1188:	93 81       	ldd	r25, Z+3	; 0x03
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	91 05       	cpc	r25, r1
    118e:	51 f4       	brne	.+20     	; 0x11a4 <Timer_Start+0x146>
    1190:	85 b5       	in	r24, 0x25	; 37
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	85 bd       	out	0x25, r24	; 37
    1196:	85 b5       	in	r24, 0x25	; 37
    1198:	8d 7f       	andi	r24, 0xFD	; 253
    119a:	85 bd       	out	0x25, r24	; 37
    119c:	85 b5       	in	r24, 0x25	; 37
    119e:	8b 7f       	andi	r24, 0xFB	; 251
    11a0:	85 bd       	out	0x25, r24	; 37
    11a2:	08 95       	ret
    11a4:	88 30       	cpi	r24, 0x08	; 8
    11a6:	91 05       	cpc	r25, r1
    11a8:	51 f4       	brne	.+20     	; 0x11be <Timer_Start+0x160>
    11aa:	85 b5       	in	r24, 0x25	; 37
    11ac:	8e 7f       	andi	r24, 0xFE	; 254
    11ae:	85 bd       	out	0x25, r24	; 37
    11b0:	85 b5       	in	r24, 0x25	; 37
    11b2:	82 60       	ori	r24, 0x02	; 2
    11b4:	85 bd       	out	0x25, r24	; 37
    11b6:	85 b5       	in	r24, 0x25	; 37
    11b8:	8b 7f       	andi	r24, 0xFB	; 251
    11ba:	85 bd       	out	0x25, r24	; 37
    11bc:	08 95       	ret
    11be:	80 32       	cpi	r24, 0x20	; 32
    11c0:	91 05       	cpc	r25, r1
    11c2:	51 f4       	brne	.+20     	; 0x11d8 <Timer_Start+0x17a>
    11c4:	85 b5       	in	r24, 0x25	; 37
    11c6:	81 60       	ori	r24, 0x01	; 1
    11c8:	85 bd       	out	0x25, r24	; 37
    11ca:	85 b5       	in	r24, 0x25	; 37
    11cc:	82 60       	ori	r24, 0x02	; 2
    11ce:	85 bd       	out	0x25, r24	; 37
    11d0:	85 b5       	in	r24, 0x25	; 37
    11d2:	8b 7f       	andi	r24, 0xFB	; 251
    11d4:	85 bd       	out	0x25, r24	; 37
    11d6:	08 95       	ret
    11d8:	80 34       	cpi	r24, 0x40	; 64
    11da:	91 05       	cpc	r25, r1
    11dc:	51 f4       	brne	.+20     	; 0x11f2 <Timer_Start+0x194>
    11de:	85 b5       	in	r24, 0x25	; 37
    11e0:	8e 7f       	andi	r24, 0xFE	; 254
    11e2:	85 bd       	out	0x25, r24	; 37
    11e4:	85 b5       	in	r24, 0x25	; 37
    11e6:	8d 7f       	andi	r24, 0xFD	; 253
    11e8:	85 bd       	out	0x25, r24	; 37
    11ea:	85 b5       	in	r24, 0x25	; 37
    11ec:	84 60       	ori	r24, 0x04	; 4
    11ee:	85 bd       	out	0x25, r24	; 37
    11f0:	08 95       	ret
    11f2:	80 38       	cpi	r24, 0x80	; 128
    11f4:	91 05       	cpc	r25, r1
    11f6:	51 f4       	brne	.+20     	; 0x120c <Timer_Start+0x1ae>
    11f8:	85 b5       	in	r24, 0x25	; 37
    11fa:	81 60       	ori	r24, 0x01	; 1
    11fc:	85 bd       	out	0x25, r24	; 37
    11fe:	85 b5       	in	r24, 0x25	; 37
    1200:	8d 7f       	andi	r24, 0xFD	; 253
    1202:	85 bd       	out	0x25, r24	; 37
    1204:	85 b5       	in	r24, 0x25	; 37
    1206:	84 60       	ori	r24, 0x04	; 4
    1208:	85 bd       	out	0x25, r24	; 37
    120a:	08 95       	ret
    120c:	81 15       	cp	r24, r1
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	92 07       	cpc	r25, r18
    1212:	51 f4       	brne	.+20     	; 0x1228 <Timer_Start+0x1ca>
    1214:	85 b5       	in	r24, 0x25	; 37
    1216:	8e 7f       	andi	r24, 0xFE	; 254
    1218:	85 bd       	out	0x25, r24	; 37
    121a:	85 b5       	in	r24, 0x25	; 37
    121c:	82 60       	ori	r24, 0x02	; 2
    121e:	85 bd       	out	0x25, r24	; 37
    1220:	85 b5       	in	r24, 0x25	; 37
    1222:	84 60       	ori	r24, 0x04	; 4
    1224:	85 bd       	out	0x25, r24	; 37
    1226:	08 95       	ret
    1228:	81 15       	cp	r24, r1
    122a:	94 40       	sbci	r25, 0x04	; 4
    122c:	49 f4       	brne	.+18     	; 0x1240 <Timer_Start+0x1e2>
    122e:	85 b5       	in	r24, 0x25	; 37
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	85 bd       	out	0x25, r24	; 37
    1234:	85 b5       	in	r24, 0x25	; 37
    1236:	82 60       	ori	r24, 0x02	; 2
    1238:	85 bd       	out	0x25, r24	; 37
    123a:	85 b5       	in	r24, 0x25	; 37
    123c:	84 60       	ori	r24, 0x04	; 4
    123e:	85 bd       	out	0x25, r24	; 37
    1240:	08 95       	ret

00001242 <Timer_SetINTERUPPT>:
void Timer_SetINTERUPPT(TimerControl* TimerC,Uint32 InterruptSelect)
{
	if (TimerC -> TimerSelect == TIMER1)
    1242:	fc 01       	movw	r30, r24
    1244:	80 81       	ld	r24, Z
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	19 f5       	brne	.+70     	; 0x1290 <Timer_SetINTERUPPT+0x4e>
	{
		if (InterruptSelect == TIMER1_Input_Capture_Interrupt_En)
    124a:	41 30       	cpi	r20, 0x01	; 1
    124c:	51 05       	cpc	r21, r1
    124e:	61 05       	cpc	r22, r1
    1250:	71 05       	cpc	r23, r1
    1252:	21 f4       	brne	.+8      	; 0x125c <Timer_SetINTERUPPT+0x1a>
		{
			set_bit(TIMSK,5);
    1254:	89 b7       	in	r24, 0x39	; 57
    1256:	80 62       	ori	r24, 0x20	; 32
    1258:	89 bf       	out	0x39, r24	; 57
    125a:	08 95       	ret
		} 
		else if (InterruptSelect == TIMER1_Output_CompareA_Match_Interrupt_En)
    125c:	42 30       	cpi	r20, 0x02	; 2
    125e:	51 05       	cpc	r21, r1
    1260:	61 05       	cpc	r22, r1
    1262:	71 05       	cpc	r23, r1
    1264:	21 f4       	brne	.+8      	; 0x126e <Timer_SetINTERUPPT+0x2c>
		{
			set_bit(TIMSK,4);
    1266:	89 b7       	in	r24, 0x39	; 57
    1268:	80 61       	ori	r24, 0x10	; 16
    126a:	89 bf       	out	0x39, r24	; 57
    126c:	08 95       	ret
		}
		else if (InterruptSelect == TIMER1_Output_CompareB_Match_Interrupt_En)
    126e:	43 30       	cpi	r20, 0x03	; 3
    1270:	51 05       	cpc	r21, r1
    1272:	61 05       	cpc	r22, r1
    1274:	71 05       	cpc	r23, r1
    1276:	21 f4       	brne	.+8      	; 0x1280 <Timer_SetINTERUPPT+0x3e>
		{
			set_bit(TIMSK,3);
    1278:	89 b7       	in	r24, 0x39	; 57
    127a:	88 60       	ori	r24, 0x08	; 8
    127c:	89 bf       	out	0x39, r24	; 57
    127e:	08 95       	ret
		}
		else if (InterruptSelect == TIMER1_Overflow_Interrupt_Enable)
    1280:	44 30       	cpi	r20, 0x04	; 4
    1282:	51 05       	cpc	r21, r1
    1284:	61 05       	cpc	r22, r1
    1286:	71 05       	cpc	r23, r1
    1288:	19 f4       	brne	.+6      	; 0x1290 <Timer_SetINTERUPPT+0x4e>
		{
			set_bit(TIMSK,2);
    128a:	89 b7       	in	r24, 0x39	; 57
    128c:	84 60       	ori	r24, 0x04	; 4
    128e:	89 bf       	out	0x39, r24	; 57
    1290:	08 95       	ret

00001292 <Timer_SetRisingFallingEdge>:
	} 

}
void Timer_SetRisingFallingEdge(TimerControl* TimerC,Uint8 Rising_Falling)
{
	if (TimerC -> TimerSelect == TIMER1)
    1292:	fc 01       	movw	r30, r24
    1294:	80 81       	ld	r24, Z
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	49 f4       	brne	.+18     	; 0x12ac <Timer_SetRisingFallingEdge+0x1a>
	{
		if (Rising_Falling)
    129a:	66 23       	and	r22, r22
    129c:	21 f0       	breq	.+8      	; 0x12a6 <Timer_SetRisingFallingEdge+0x14>
		{
			set_bit(TCCR1B,6);
    129e:	8e b5       	in	r24, 0x2e	; 46
    12a0:	80 64       	ori	r24, 0x40	; 64
    12a2:	8e bd       	out	0x2e, r24	; 46
    12a4:	08 95       	ret
		}else
			clr_bit(TCCR1B,6);
    12a6:	8e b5       	in	r24, 0x2e	; 46
    12a8:	8f 7b       	andi	r24, 0xBF	; 191
    12aa:	8e bd       	out	0x2e, r24	; 46
    12ac:	08 95       	ret

000012ae <Timer_ClearFlage>:

}

void Timer_ClearFlage(TimerControl* TimerC,Uint8 Flag)
{
	if (TimerC -> TimerSelect == TIMER1)
    12ae:	fc 01       	movw	r30, r24
    12b0:	80 81       	ld	r24, Z
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	59 f4       	brne	.+22     	; 0x12cc <Timer_ClearFlage+0x1e>
	{
		if (Flag == TIMER_ICP_FALG)
    12b6:	61 30       	cpi	r22, 0x01	; 1
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <Timer_ClearFlage+0x14>
		{
			set_bit(TIFR ,5);
    12ba:	88 b7       	in	r24, 0x38	; 56
    12bc:	80 62       	ori	r24, 0x20	; 32
    12be:	88 bf       	out	0x38, r24	; 56
    12c0:	08 95       	ret
		}
		else if (Flag == TIMER_OVERFLOW_FALG)
    12c2:	62 30       	cpi	r22, 0x02	; 2
    12c4:	19 f4       	brne	.+6      	; 0x12cc <Timer_ClearFlage+0x1e>
		{
			set_bit(TIFR ,2);
    12c6:	88 b7       	in	r24, 0x38	; 56
    12c8:	84 60       	ori	r24, 0x04	; 4
    12ca:	88 bf       	out	0x38, r24	; 56
    12cc:	08 95       	ret

000012ce <UltraSonic_init>:

Uint8 TimerOverflow = 0;
TimerControl UltraSonicTimer;

void UltraSonic_init(void){
	UltraSonicTimer.TimerSelect = TIMER1;
    12ce:	ec ee       	ldi	r30, 0xEC	; 236
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 83       	st	Z, r24
	UltraSonicTimer.TimerMode = TIMER_NORMAL_MODE;
    12d6:	11 82       	std	Z+1, r1	; 0x01
	UltraSonicTimer.TimerPrescaler = TimerPrescaler_0;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	93 83       	std	Z+3, r25	; 0x03
    12de:	82 83       	std	Z+2, r24	; 0x02
	Timer_Init(&UltraSonicTimer);
    12e0:	cf 01       	movw	r24, r30
    12e2:	0e 94 37 06 	call	0xc6e	; 0xc6e <Timer_Init>
	Timer_Start(&UltraSonicTimer);
    12e6:	8c ee       	ldi	r24, 0xEC	; 236
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 2f 08 	call	0x105e	; 0x105e <Timer_Start>
	Timer_SetINTERUPPT(&UltraSonicTimer,TIMER1_Overflow_Interrupt_Enable);
    12ee:	44 e0       	ldi	r20, 0x04	; 4
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	8c ee       	ldi	r24, 0xEC	; 236
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 21 09 	call	0x1242	; 0x1242 <Timer_SetINTERUPPT>
	Timer_SetINTERUPPT(&UltraSonicTimer,TIMER1_Input_Capture_Interrupt_En);
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	8c ee       	ldi	r24, 0xEC	; 236
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 21 09 	call	0x1242	; 0x1242 <Timer_SetINTERUPPT>
	DIO_SetPinDir(TRIGER_PORT,TRIGER,DIO_PIN_DIR_OUTPUT);
    130e:	41 e0       	ldi	r20, 0x01	; 1
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
// 	//DIO_SetPinDir(ECHO_PULLUP,ECHO,DIO_PIN_DIR_OUTPUT);
	DIO_SetPullUp(ECHO_PULLUP,ECHO);
    1318:	66 e0       	ldi	r22, 0x06	; 6
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPullUp>
    1320:	08 95       	ret

00001322 <UltraSonic_SetCaptureEdge>:
	Timer_ClearFlage(&UltraSonicTimer,TIMER_OVERFLOW_FALG);
}

void UltraSonic_SetCaptureEdge(Uint8 Rising_Falling){
	
	Timer_SetRisingFallingEdge(&UltraSonicTimer,Rising_Falling);
    1322:	68 2f       	mov	r22, r24
    1324:	8c ee       	ldi	r24, 0xEC	; 236
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 49 09 	call	0x1292	; 0x1292 <Timer_SetRisingFallingEdge>
    132c:	08 95       	ret

0000132e <UltraSonic_triger>:
	DIO_SetPullUp(ECHO_PULLUP,ECHO);
}


void UltraSonic_triger(void){
	DIO_SetPinVal(TRIGER_PORT,TRIGER,DIO_PIN_HIGH);
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1338:	85 e3       	ldi	r24, 0x35	; 53
    133a:	8a 95       	dec	r24
    133c:	f1 f7       	brne	.-4      	; 0x133a <UltraSonic_triger+0xc>
    133e:	00 00       	nop
	_delay_us(10);
	DIO_SetPinVal(TRIGER_PORT,TRIGER,DIO_PIN_LOW);
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	TCNT1 = 0;	/* Clear Timer counter */
    134a:	1d bc       	out	0x2d, r1	; 45
    134c:	1c bc       	out	0x2c, r1	; 44
	UltraSonic_SetCaptureEdge(TIMER_RISING_CAPTURE);
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	0e 94 91 09 	call	0x1322	; 0x1322 <UltraSonic_SetCaptureEdge>
	Timer_ClearFlage(&UltraSonicTimer,TIMER_ICP_FALG);
    1354:	61 e0       	ldi	r22, 0x01	; 1
    1356:	8c ee       	ldi	r24, 0xEC	; 236
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 57 09 	call	0x12ae	; 0x12ae <Timer_ClearFlage>
	Timer_ClearFlage(&UltraSonicTimer,TIMER_OVERFLOW_FALG);
    135e:	62 e0       	ldi	r22, 0x02	; 2
    1360:	8c ee       	ldi	r24, 0xEC	; 236
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 57 09 	call	0x12ae	; 0x12ae <Timer_ClearFlage>
    1368:	08 95       	ret

0000136a <UltraSonic_Distance>:

Float64 UltraSonic_Distance(void)
{
	long count;
	double distance;
	UltraSonic_triger();
    136a:	0e 94 97 09 	call	0x132e	; 0x132e <UltraSonic_triger>
	for (int x = 0;x<= 10000;x++)
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	29 c0       	rjmp	.+82     	; 0x13c6 <UltraSonic_Distance+0x5c>
	{
		if (!((TIFR & (1 << 5)) == 0))
    1374:	08 b6       	in	r0, 0x38	; 56
    1376:	05 fe       	sbrs	r0, 5
    1378:	25 c0       	rjmp	.+74     	; 0x13c4 <UltraSonic_Distance+0x5a>
		{
			TCNT1 = 0;	/* Clear Timer counter */
    137a:	1d bc       	out	0x2d, r1	; 45
    137c:	1c bc       	out	0x2c, r1	; 44
			UltraSonic_SetCaptureEdge(TIMER_FALLING_CAPTURE);
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	0e 94 91 09 	call	0x1322	; 0x1322 <UltraSonic_SetCaptureEdge>
			Timer_ClearFlage(&UltraSonicTimer,TIMER_ICP_FALG);
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	8c ee       	ldi	r24, 0xEC	; 236
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 57 09 	call	0x12ae	; 0x12ae <Timer_ClearFlage>
			Timer_ClearFlage(&UltraSonicTimer,TIMER_OVERFLOW_FALG);
    138e:	62 e0       	ldi	r22, 0x02	; 2
    1390:	8c ee       	ldi	r24, 0xEC	; 236
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 57 09 	call	0x12ae	; 0x12ae <Timer_ClearFlage>
			TimerOverflow = 0;/* Clear Timer overflow count */
    1398:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
			while(((TIFR & (1 << 5)) == 0));
    139c:	08 b6       	in	r0, 0x38	; 56
    139e:	05 fe       	sbrs	r0, 5
    13a0:	fd cf       	rjmp	.-6      	; 0x139c <UltraSonic_Distance+0x32>
			count = ICR1 + (65535 * TimerOverflow);	/* Take count */
    13a2:	66 b5       	in	r22, 0x26	; 38
    13a4:	77 b5       	in	r23, 0x27	; 39
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
			/* 16MHz Timer freq, sound speed =343 m/s */
			distance = (double)count / 933;
    13aa:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__floatsisf>
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e4       	ldi	r19, 0x40	; 64
    13b2:	49 e6       	ldi	r20, 0x69	; 105
    13b4:	54 e4       	ldi	r21, 0x44	; 68
    13b6:	0e 94 06 0a 	call	0x140c	; 0x140c <__divsf3>
			return distance;
    13ba:	56 2f       	mov	r21, r22
    13bc:	47 2f       	mov	r20, r23
    13be:	38 2f       	mov	r19, r24
    13c0:	29 2f       	mov	r18, r25
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <UltraSonic_Distance+0x6c>
Float64 UltraSonic_Distance(void)
{
	long count;
	double distance;
	UltraSonic_triger();
	for (int x = 0;x<= 10000;x++)
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	81 31       	cpi	r24, 0x11	; 17
    13c8:	27 e2       	ldi	r18, 0x27	; 39
    13ca:	92 07       	cpc	r25, r18
    13cc:	9c f2       	brlt	.-90     	; 0x1374 <UltraSonic_Distance+0xa>
			return distance;
		}
	}
	
	
	return 30;
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	30 ef       	ldi	r19, 0xF0	; 240
    13d4:	21 e4       	ldi	r18, 0x41	; 65
}
    13d6:	65 2f       	mov	r22, r21
    13d8:	74 2f       	mov	r23, r20
    13da:	83 2f       	mov	r24, r19
    13dc:	92 2f       	mov	r25, r18
    13de:	08 95       	ret

000013e0 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    13e0:	1f 92       	push	r1
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	0f 92       	push	r0
    13e8:	11 24       	eor	r1, r1
    13ea:	8f 93       	push	r24
	TimerOverflow++;	/* Increment Timer Overflow count */
    13ec:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
    13f0:	8f 5f       	subi	r24, 0xFF	; 255
    13f2:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
	
}
    13f6:	8f 91       	pop	r24
    13f8:	0f 90       	pop	r0
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	0f 90       	pop	r0
    13fe:	1f 90       	pop	r1
    1400:	18 95       	reti

00001402 <__cmpsf2>:
    1402:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_cmp>
    1406:	08 f4       	brcc	.+2      	; 0x140a <__cmpsf2+0x8>
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	08 95       	ret

0000140c <__divsf3>:
    140c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__divsf3x>
    1410:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__fp_round>
    1414:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscB>
    1418:	58 f0       	brcs	.+22     	; 0x1430 <__divsf3+0x24>
    141a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__fp_pscA>
    141e:	40 f0       	brcs	.+16     	; 0x1430 <__divsf3+0x24>
    1420:	29 f4       	brne	.+10     	; 0x142c <__divsf3+0x20>
    1422:	5f 3f       	cpi	r21, 0xFF	; 255
    1424:	29 f0       	breq	.+10     	; 0x1430 <__divsf3+0x24>
    1426:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_inf>
    142a:	51 11       	cpse	r21, r1
    142c:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_szero>
    1430:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_nan>

00001434 <__divsf3x>:
    1434:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_split3>
    1438:	68 f3       	brcs	.-38     	; 0x1414 <__divsf3+0x8>

0000143a <__divsf3_pse>:
    143a:	99 23       	and	r25, r25
    143c:	b1 f3       	breq	.-20     	; 0x142a <__divsf3+0x1e>
    143e:	55 23       	and	r21, r21
    1440:	91 f3       	breq	.-28     	; 0x1426 <__divsf3+0x1a>
    1442:	95 1b       	sub	r25, r21
    1444:	55 0b       	sbc	r21, r21
    1446:	bb 27       	eor	r27, r27
    1448:	aa 27       	eor	r26, r26
    144a:	62 17       	cp	r22, r18
    144c:	73 07       	cpc	r23, r19
    144e:	84 07       	cpc	r24, r20
    1450:	38 f0       	brcs	.+14     	; 0x1460 <__divsf3_pse+0x26>
    1452:	9f 5f       	subi	r25, 0xFF	; 255
    1454:	5f 4f       	sbci	r21, 0xFF	; 255
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	44 1f       	adc	r20, r20
    145c:	aa 1f       	adc	r26, r26
    145e:	a9 f3       	breq	.-22     	; 0x144a <__divsf3_pse+0x10>
    1460:	35 d0       	rcall	.+106    	; 0x14cc <__divsf3_pse+0x92>
    1462:	0e 2e       	mov	r0, r30
    1464:	3a f0       	brmi	.+14     	; 0x1474 <__divsf3_pse+0x3a>
    1466:	e0 e8       	ldi	r30, 0x80	; 128
    1468:	32 d0       	rcall	.+100    	; 0x14ce <__divsf3_pse+0x94>
    146a:	91 50       	subi	r25, 0x01	; 1
    146c:	50 40       	sbci	r21, 0x00	; 0
    146e:	e6 95       	lsr	r30
    1470:	00 1c       	adc	r0, r0
    1472:	ca f7       	brpl	.-14     	; 0x1466 <__divsf3_pse+0x2c>
    1474:	2b d0       	rcall	.+86     	; 0x14cc <__divsf3_pse+0x92>
    1476:	fe 2f       	mov	r31, r30
    1478:	29 d0       	rcall	.+82     	; 0x14cc <__divsf3_pse+0x92>
    147a:	66 0f       	add	r22, r22
    147c:	77 1f       	adc	r23, r23
    147e:	88 1f       	adc	r24, r24
    1480:	bb 1f       	adc	r27, r27
    1482:	26 17       	cp	r18, r22
    1484:	37 07       	cpc	r19, r23
    1486:	48 07       	cpc	r20, r24
    1488:	ab 07       	cpc	r26, r27
    148a:	b0 e8       	ldi	r27, 0x80	; 128
    148c:	09 f0       	breq	.+2      	; 0x1490 <__divsf3_pse+0x56>
    148e:	bb 0b       	sbc	r27, r27
    1490:	80 2d       	mov	r24, r0
    1492:	bf 01       	movw	r22, r30
    1494:	ff 27       	eor	r31, r31
    1496:	93 58       	subi	r25, 0x83	; 131
    1498:	5f 4f       	sbci	r21, 0xFF	; 255
    149a:	3a f0       	brmi	.+14     	; 0x14aa <__divsf3_pse+0x70>
    149c:	9e 3f       	cpi	r25, 0xFE	; 254
    149e:	51 05       	cpc	r21, r1
    14a0:	78 f0       	brcs	.+30     	; 0x14c0 <__divsf3_pse+0x86>
    14a2:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_inf>
    14a6:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_szero>
    14aa:	5f 3f       	cpi	r21, 0xFF	; 255
    14ac:	e4 f3       	brlt	.-8      	; 0x14a6 <__divsf3_pse+0x6c>
    14ae:	98 3e       	cpi	r25, 0xE8	; 232
    14b0:	d4 f3       	brlt	.-12     	; 0x14a6 <__divsf3_pse+0x6c>
    14b2:	86 95       	lsr	r24
    14b4:	77 95       	ror	r23
    14b6:	67 95       	ror	r22
    14b8:	b7 95       	ror	r27
    14ba:	f7 95       	ror	r31
    14bc:	9f 5f       	subi	r25, 0xFF	; 255
    14be:	c9 f7       	brne	.-14     	; 0x14b2 <__divsf3_pse+0x78>
    14c0:	88 0f       	add	r24, r24
    14c2:	91 1d       	adc	r25, r1
    14c4:	96 95       	lsr	r25
    14c6:	87 95       	ror	r24
    14c8:	97 f9       	bld	r25, 7
    14ca:	08 95       	ret
    14cc:	e1 e0       	ldi	r30, 0x01	; 1
    14ce:	66 0f       	add	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	88 1f       	adc	r24, r24
    14d4:	bb 1f       	adc	r27, r27
    14d6:	62 17       	cp	r22, r18
    14d8:	73 07       	cpc	r23, r19
    14da:	84 07       	cpc	r24, r20
    14dc:	ba 07       	cpc	r27, r26
    14de:	20 f0       	brcs	.+8      	; 0x14e8 <__divsf3_pse+0xae>
    14e0:	62 1b       	sub	r22, r18
    14e2:	73 0b       	sbc	r23, r19
    14e4:	84 0b       	sbc	r24, r20
    14e6:	ba 0b       	sbc	r27, r26
    14e8:	ee 1f       	adc	r30, r30
    14ea:	88 f7       	brcc	.-30     	; 0x14ce <__divsf3_pse+0x94>
    14ec:	e0 95       	com	r30
    14ee:	08 95       	ret

000014f0 <__floatunsisf>:
    14f0:	e8 94       	clt
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <__floatsisf+0x12>

000014f4 <__floatsisf>:
    14f4:	97 fb       	bst	r25, 7
    14f6:	3e f4       	brtc	.+14     	; 0x1506 <__floatsisf+0x12>
    14f8:	90 95       	com	r25
    14fa:	80 95       	com	r24
    14fc:	70 95       	com	r23
    14fe:	61 95       	neg	r22
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	8f 4f       	sbci	r24, 0xFF	; 255
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	99 23       	and	r25, r25
    1508:	a9 f0       	breq	.+42     	; 0x1534 <__floatsisf+0x40>
    150a:	f9 2f       	mov	r31, r25
    150c:	96 e9       	ldi	r25, 0x96	; 150
    150e:	bb 27       	eor	r27, r27
    1510:	93 95       	inc	r25
    1512:	f6 95       	lsr	r31
    1514:	87 95       	ror	r24
    1516:	77 95       	ror	r23
    1518:	67 95       	ror	r22
    151a:	b7 95       	ror	r27
    151c:	f1 11       	cpse	r31, r1
    151e:	f8 cf       	rjmp	.-16     	; 0x1510 <__floatsisf+0x1c>
    1520:	fa f4       	brpl	.+62     	; 0x1560 <__floatsisf+0x6c>
    1522:	bb 0f       	add	r27, r27
    1524:	11 f4       	brne	.+4      	; 0x152a <__floatsisf+0x36>
    1526:	60 ff       	sbrs	r22, 0
    1528:	1b c0       	rjmp	.+54     	; 0x1560 <__floatsisf+0x6c>
    152a:	6f 5f       	subi	r22, 0xFF	; 255
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	8f 4f       	sbci	r24, 0xFF	; 255
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	16 c0       	rjmp	.+44     	; 0x1560 <__floatsisf+0x6c>
    1534:	88 23       	and	r24, r24
    1536:	11 f0       	breq	.+4      	; 0x153c <__floatsisf+0x48>
    1538:	96 e9       	ldi	r25, 0x96	; 150
    153a:	11 c0       	rjmp	.+34     	; 0x155e <__floatsisf+0x6a>
    153c:	77 23       	and	r23, r23
    153e:	21 f0       	breq	.+8      	; 0x1548 <__floatsisf+0x54>
    1540:	9e e8       	ldi	r25, 0x8E	; 142
    1542:	87 2f       	mov	r24, r23
    1544:	76 2f       	mov	r23, r22
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <__floatsisf+0x5e>
    1548:	66 23       	and	r22, r22
    154a:	71 f0       	breq	.+28     	; 0x1568 <__floatsisf+0x74>
    154c:	96 e8       	ldi	r25, 0x86	; 134
    154e:	86 2f       	mov	r24, r22
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	2a f0       	brmi	.+10     	; 0x1560 <__floatsisf+0x6c>
    1556:	9a 95       	dec	r25
    1558:	66 0f       	add	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	88 1f       	adc	r24, r24
    155e:	da f7       	brpl	.-10     	; 0x1556 <__floatsisf+0x62>
    1560:	88 0f       	add	r24, r24
    1562:	96 95       	lsr	r25
    1564:	87 95       	ror	r24
    1566:	97 f9       	bld	r25, 7
    1568:	08 95       	ret

0000156a <__fp_cmp>:
    156a:	99 0f       	add	r25, r25
    156c:	00 08       	sbc	r0, r0
    156e:	55 0f       	add	r21, r21
    1570:	aa 0b       	sbc	r26, r26
    1572:	e0 e8       	ldi	r30, 0x80	; 128
    1574:	fe ef       	ldi	r31, 0xFE	; 254
    1576:	16 16       	cp	r1, r22
    1578:	17 06       	cpc	r1, r23
    157a:	e8 07       	cpc	r30, r24
    157c:	f9 07       	cpc	r31, r25
    157e:	c0 f0       	brcs	.+48     	; 0x15b0 <__fp_cmp+0x46>
    1580:	12 16       	cp	r1, r18
    1582:	13 06       	cpc	r1, r19
    1584:	e4 07       	cpc	r30, r20
    1586:	f5 07       	cpc	r31, r21
    1588:	98 f0       	brcs	.+38     	; 0x15b0 <__fp_cmp+0x46>
    158a:	62 1b       	sub	r22, r18
    158c:	73 0b       	sbc	r23, r19
    158e:	84 0b       	sbc	r24, r20
    1590:	95 0b       	sbc	r25, r21
    1592:	39 f4       	brne	.+14     	; 0x15a2 <__fp_cmp+0x38>
    1594:	0a 26       	eor	r0, r26
    1596:	61 f0       	breq	.+24     	; 0x15b0 <__fp_cmp+0x46>
    1598:	23 2b       	or	r18, r19
    159a:	24 2b       	or	r18, r20
    159c:	25 2b       	or	r18, r21
    159e:	21 f4       	brne	.+8      	; 0x15a8 <__fp_cmp+0x3e>
    15a0:	08 95       	ret
    15a2:	0a 26       	eor	r0, r26
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <__fp_cmp+0x3e>
    15a6:	a1 40       	sbci	r26, 0x01	; 1
    15a8:	a6 95       	lsr	r26
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	81 1d       	adc	r24, r1
    15ae:	81 1d       	adc	r24, r1
    15b0:	08 95       	ret

000015b2 <__fp_inf>:
    15b2:	97 f9       	bld	r25, 7
    15b4:	9f 67       	ori	r25, 0x7F	; 127
    15b6:	80 e8       	ldi	r24, 0x80	; 128
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	08 95       	ret

000015be <__fp_nan>:
    15be:	9f ef       	ldi	r25, 0xFF	; 255
    15c0:	80 ec       	ldi	r24, 0xC0	; 192
    15c2:	08 95       	ret

000015c4 <__fp_pscA>:
    15c4:	00 24       	eor	r0, r0
    15c6:	0a 94       	dec	r0
    15c8:	16 16       	cp	r1, r22
    15ca:	17 06       	cpc	r1, r23
    15cc:	18 06       	cpc	r1, r24
    15ce:	09 06       	cpc	r0, r25
    15d0:	08 95       	ret

000015d2 <__fp_pscB>:
    15d2:	00 24       	eor	r0, r0
    15d4:	0a 94       	dec	r0
    15d6:	12 16       	cp	r1, r18
    15d8:	13 06       	cpc	r1, r19
    15da:	14 06       	cpc	r1, r20
    15dc:	05 06       	cpc	r0, r21
    15de:	08 95       	ret

000015e0 <__fp_round>:
    15e0:	09 2e       	mov	r0, r25
    15e2:	03 94       	inc	r0
    15e4:	00 0c       	add	r0, r0
    15e6:	11 f4       	brne	.+4      	; 0x15ec <__fp_round+0xc>
    15e8:	88 23       	and	r24, r24
    15ea:	52 f0       	brmi	.+20     	; 0x1600 <__fp_round+0x20>
    15ec:	bb 0f       	add	r27, r27
    15ee:	40 f4       	brcc	.+16     	; 0x1600 <__fp_round+0x20>
    15f0:	bf 2b       	or	r27, r31
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <__fp_round+0x18>
    15f4:	60 ff       	sbrs	r22, 0
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <__fp_round+0x20>
    15f8:	6f 5f       	subi	r22, 0xFF	; 255
    15fa:	7f 4f       	sbci	r23, 0xFF	; 255
    15fc:	8f 4f       	sbci	r24, 0xFF	; 255
    15fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1600:	08 95       	ret

00001602 <__fp_split3>:
    1602:	57 fd       	sbrc	r21, 7
    1604:	90 58       	subi	r25, 0x80	; 128
    1606:	44 0f       	add	r20, r20
    1608:	55 1f       	adc	r21, r21
    160a:	59 f0       	breq	.+22     	; 0x1622 <__fp_splitA+0x10>
    160c:	5f 3f       	cpi	r21, 0xFF	; 255
    160e:	71 f0       	breq	.+28     	; 0x162c <__fp_splitA+0x1a>
    1610:	47 95       	ror	r20

00001612 <__fp_splitA>:
    1612:	88 0f       	add	r24, r24
    1614:	97 fb       	bst	r25, 7
    1616:	99 1f       	adc	r25, r25
    1618:	61 f0       	breq	.+24     	; 0x1632 <__fp_splitA+0x20>
    161a:	9f 3f       	cpi	r25, 0xFF	; 255
    161c:	79 f0       	breq	.+30     	; 0x163c <__fp_splitA+0x2a>
    161e:	87 95       	ror	r24
    1620:	08 95       	ret
    1622:	12 16       	cp	r1, r18
    1624:	13 06       	cpc	r1, r19
    1626:	14 06       	cpc	r1, r20
    1628:	55 1f       	adc	r21, r21
    162a:	f2 cf       	rjmp	.-28     	; 0x1610 <__fp_split3+0xe>
    162c:	46 95       	lsr	r20
    162e:	f1 df       	rcall	.-30     	; 0x1612 <__fp_splitA>
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <__fp_splitA+0x30>
    1632:	16 16       	cp	r1, r22
    1634:	17 06       	cpc	r1, r23
    1636:	18 06       	cpc	r1, r24
    1638:	99 1f       	adc	r25, r25
    163a:	f1 cf       	rjmp	.-30     	; 0x161e <__fp_splitA+0xc>
    163c:	86 95       	lsr	r24
    163e:	71 05       	cpc	r23, r1
    1640:	61 05       	cpc	r22, r1
    1642:	08 94       	sec
    1644:	08 95       	ret

00001646 <__fp_zero>:
    1646:	e8 94       	clt

00001648 <__fp_szero>:
    1648:	bb 27       	eor	r27, r27
    164a:	66 27       	eor	r22, r22
    164c:	77 27       	eor	r23, r23
    164e:	cb 01       	movw	r24, r22
    1650:	97 f9       	bld	r25, 7
    1652:	08 95       	ret

00001654 <__gesf2>:
    1654:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_cmp>
    1658:	08 f4       	brcc	.+2      	; 0x165c <__gesf2+0x8>
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	08 95       	ret

0000165e <__udivmodhi4>:
    165e:	aa 1b       	sub	r26, r26
    1660:	bb 1b       	sub	r27, r27
    1662:	51 e1       	ldi	r21, 0x11	; 17
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <__udivmodhi4_ep>

00001666 <__udivmodhi4_loop>:
    1666:	aa 1f       	adc	r26, r26
    1668:	bb 1f       	adc	r27, r27
    166a:	a6 17       	cp	r26, r22
    166c:	b7 07       	cpc	r27, r23
    166e:	10 f0       	brcs	.+4      	; 0x1674 <__udivmodhi4_ep>
    1670:	a6 1b       	sub	r26, r22
    1672:	b7 0b       	sbc	r27, r23

00001674 <__udivmodhi4_ep>:
    1674:	88 1f       	adc	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	5a 95       	dec	r21
    167a:	a9 f7       	brne	.-22     	; 0x1666 <__udivmodhi4_loop>
    167c:	80 95       	com	r24
    167e:	90 95       	com	r25
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	08 95       	ret

00001686 <__divmodhi4>:
    1686:	97 fb       	bst	r25, 7
    1688:	07 2e       	mov	r0, r23
    168a:	16 f4       	brtc	.+4      	; 0x1690 <__divmodhi4+0xa>
    168c:	00 94       	com	r0
    168e:	07 d0       	rcall	.+14     	; 0x169e <__divmodhi4_neg1>
    1690:	77 fd       	sbrc	r23, 7
    1692:	09 d0       	rcall	.+18     	; 0x16a6 <__divmodhi4_neg2>
    1694:	0e 94 2f 0b 	call	0x165e	; 0x165e <__udivmodhi4>
    1698:	07 fc       	sbrc	r0, 7
    169a:	05 d0       	rcall	.+10     	; 0x16a6 <__divmodhi4_neg2>
    169c:	3e f4       	brtc	.+14     	; 0x16ac <__divmodhi4_exit>

0000169e <__divmodhi4_neg1>:
    169e:	90 95       	com	r25
    16a0:	81 95       	neg	r24
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	08 95       	ret

000016a6 <__divmodhi4_neg2>:
    16a6:	70 95       	com	r23
    16a8:	61 95       	neg	r22
    16aa:	7f 4f       	sbci	r23, 0xFF	; 255

000016ac <__divmodhi4_exit>:
    16ac:	08 95       	ret

000016ae <_exit>:
    16ae:	f8 94       	cli

000016b0 <__stop_program>:
    16b0:	ff cf       	rjmp	.-2      	; 0x16b0 <__stop_program>
