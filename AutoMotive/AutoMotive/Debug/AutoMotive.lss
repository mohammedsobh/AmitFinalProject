
AutoMotive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  000012fa  0000138e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  008000d6  008000d6  00001404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f20  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d66  00000000  00000000  000045e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c8  00000000  00000000  00005346  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00006c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081b  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b9e  00000000  00000000  00007967  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00009505  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 45 04 	jmp	0x88a	; 0x88a <__vector_1>
       8:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 ed       	ldi	r26, 0xD6	; 214
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 03 	call	0x67a	; 0x67a <main>
      8a:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPortDir>:
 */ 
#include "DIO.h"

void DIO_SetPortDir(Uint8 Port,Uint8 Dir)
{
	switch(Dir)
      92:	66 23       	and	r22, r22
      94:	19 f0       	breq	.+6      	; 0x9c <DIO_SetPortDir+0xa>
      96:	6f 3f       	cpi	r22, 0xFF	; 255
      98:	89 f0       	breq	.+34     	; 0xbc <DIO_SetPortDir+0x2a>
      9a:	08 95       	ret
	{
		case DIO_PORT_DIR_INPUT:
			switch(Port)
      9c:	81 30       	cpi	r24, 0x01	; 1
      9e:	41 f0       	breq	.+16     	; 0xb0 <DIO_SetPortDir+0x1e>
      a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPortDir+0x1a>
      a2:	82 30       	cpi	r24, 0x02	; 2
      a4:	39 f0       	breq	.+14     	; 0xb4 <DIO_SetPortDir+0x22>
      a6:	83 30       	cpi	r24, 0x03	; 3
      a8:	39 f0       	breq	.+14     	; 0xb8 <DIO_SetPortDir+0x26>
      aa:	08 95       	ret
			{
				case DIO_PORTA:
					DDRA = 0X00;
      ac:	1a ba       	out	0x1a, r1	; 26
				break;
      ae:	08 95       	ret
				case DIO_PORTB:
					DDRB = 0X00;
      b0:	17 ba       	out	0x17, r1	; 23
				break;
      b2:	08 95       	ret
				case DIO_PORTC:
					DDRC = 0X00;
      b4:	14 ba       	out	0x14, r1	; 20
				break;
      b6:	08 95       	ret
				case DIO_PORTD:
					DDRD = 0X00;
      b8:	11 ba       	out	0x11, r1	; 17
				break;
      ba:	08 95       	ret
			}
		break;
		case DIO_PORT_DIR_OUTPUT:
			switch(Port)
      bc:	81 30       	cpi	r24, 0x01	; 1
      be:	49 f0       	breq	.+18     	; 0xd2 <DIO_SetPortDir+0x40>
      c0:	28 f0       	brcs	.+10     	; 0xcc <DIO_SetPortDir+0x3a>
      c2:	82 30       	cpi	r24, 0x02	; 2
      c4:	49 f0       	breq	.+18     	; 0xd8 <DIO_SetPortDir+0x46>
      c6:	83 30       	cpi	r24, 0x03	; 3
      c8:	51 f0       	breq	.+20     	; 0xde <DIO_SetPortDir+0x4c>
      ca:	08 95       	ret
			{
				case DIO_PORTA:
					DDRA = 0XFF;
      cc:	8f ef       	ldi	r24, 0xFF	; 255
      ce:	8a bb       	out	0x1a, r24	; 26
				break;
      d0:	08 95       	ret
				case DIO_PORTB:
					DDRB = 0XFF;
      d2:	8f ef       	ldi	r24, 0xFF	; 255
      d4:	87 bb       	out	0x17, r24	; 23
				break;
      d6:	08 95       	ret
				case DIO_PORTC:
					DDRC = 0XFF;
      d8:	8f ef       	ldi	r24, 0xFF	; 255
      da:	84 bb       	out	0x14, r24	; 20
				break;
      dc:	08 95       	ret
				case DIO_PORTD:
					DDRD = 0XFF;
      de:	8f ef       	ldi	r24, 0xFF	; 255
      e0:	81 bb       	out	0x11, r24	; 17
      e2:	08 95       	ret

000000e4 <DIO_SetPinDir>:
	}
	
}
void DIO_SetPinDir(Uint8 Port,Uint8 Pin,Uint8 Dir)
{
	switch(Dir)
      e4:	44 23       	and	r20, r20
      e6:	b9 f1       	breq	.+110    	; 0x156 <DIO_SetPinDir+0x72>
      e8:	41 30       	cpi	r20, 0x01	; 1
      ea:	09 f0       	breq	.+2      	; 0xee <DIO_SetPinDir+0xa>
      ec:	6b c0       	rjmp	.+214    	; 0x1c4 <DIO_SetPinDir+0xe0>
	{
		case DIO_PIN_DIR_OUTPUT:
			switch(Port)
      ee:	81 30       	cpi	r24, 0x01	; 1
      f0:	89 f0       	breq	.+34     	; 0x114 <DIO_SetPinDir+0x30>
      f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_SetPinDir+0x1a>
      f4:	82 30       	cpi	r24, 0x02	; 2
      f6:	c9 f0       	breq	.+50     	; 0x12a <DIO_SetPinDir+0x46>
      f8:	83 30       	cpi	r24, 0x03	; 3
      fa:	11 f1       	breq	.+68     	; 0x140 <DIO_SetPinDir+0x5c>
      fc:	08 95       	ret
			{
				case DIO_PORTA:
					set_bit(DDRA,Pin);
      fe:	2a b3       	in	r18, 0x1a	; 26
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_SetPinDir+0x26>
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	6a 95       	dec	r22
     10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_SetPinDir+0x22>
     10e:	82 2b       	or	r24, r18
     110:	8a bb       	out	0x1a, r24	; 26
				break;
     112:	08 95       	ret
				case DIO_PORTB:
					set_bit(DDRB,Pin);
     114:	27 b3       	in	r18, 0x17	; 23
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_SetPinDir+0x3c>
     11c:	88 0f       	add	r24, r24
     11e:	99 1f       	adc	r25, r25
     120:	6a 95       	dec	r22
     122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_SetPinDir+0x38>
     124:	82 2b       	or	r24, r18
     126:	87 bb       	out	0x17, r24	; 23
				break;
     128:	08 95       	ret
				case DIO_PORTC:
					set_bit(DDRC,Pin);
     12a:	24 b3       	in	r18, 0x14	; 20
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_SetPinDir+0x52>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_SetPinDir+0x4e>
     13a:	82 2b       	or	r24, r18
     13c:	84 bb       	out	0x14, r24	; 20
				break;
     13e:	08 95       	ret
				case DIO_PORTD:
					set_bit(DDRD,Pin);
     140:	21 b3       	in	r18, 0x11	; 17
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_SetPinDir+0x68>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	6a 95       	dec	r22
     14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_SetPinDir+0x64>
     150:	82 2b       	or	r24, r18
     152:	81 bb       	out	0x11, r24	; 17
				break;
     154:	08 95       	ret
			}
		break;
		case DIO_PIN_DIR_INPUT:
			switch(Port)
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	91 f0       	breq	.+36     	; 0x17e <DIO_SetPinDir+0x9a>
     15a:	28 f0       	brcs	.+10     	; 0x166 <DIO_SetPinDir+0x82>
     15c:	82 30       	cpi	r24, 0x02	; 2
     15e:	d9 f0       	breq	.+54     	; 0x196 <DIO_SetPinDir+0xb2>
     160:	83 30       	cpi	r24, 0x03	; 3
     162:	29 f1       	breq	.+74     	; 0x1ae <DIO_SetPinDir+0xca>
     164:	08 95       	ret
			{
				case DIO_PORTA:
					clr_bit(DDRA,Pin);
     166:	2a b3       	in	r18, 0x1a	; 26
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPinDir+0x8e>
     16e:	88 0f       	add	r24, r24
     170:	99 1f       	adc	r25, r25
     172:	6a 95       	dec	r22
     174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPinDir+0x8a>
     176:	80 95       	com	r24
     178:	82 23       	and	r24, r18
     17a:	8a bb       	out	0x1a, r24	; 26
				break;
     17c:	08 95       	ret
				case DIO_PORTB:
					clr_bit(DDRB,Pin);
     17e:	27 b3       	in	r18, 0x17	; 23
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinDir+0xa6>
     186:	88 0f       	add	r24, r24
     188:	99 1f       	adc	r25, r25
     18a:	6a 95       	dec	r22
     18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinDir+0xa2>
     18e:	80 95       	com	r24
     190:	82 23       	and	r24, r18
     192:	87 bb       	out	0x17, r24	; 23
				break;
     194:	08 95       	ret
				case DIO_PORTC:
					clr_bit(DDRC,Pin);
     196:	24 b3       	in	r18, 0x14	; 20
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPinDir+0xbe>
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	6a 95       	dec	r22
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPinDir+0xba>
     1a6:	80 95       	com	r24
     1a8:	82 23       	and	r24, r18
     1aa:	84 bb       	out	0x14, r24	; 20
				break;
     1ac:	08 95       	ret
				case DIO_PORTD:
					clr_bit(DDRD,Pin);
     1ae:	21 b3       	in	r18, 0x11	; 17
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SetPinDir+0xd6>
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	6a 95       	dec	r22
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SetPinDir+0xd2>
     1be:	80 95       	com	r24
     1c0:	82 23       	and	r24, r18
     1c2:	81 bb       	out	0x11, r24	; 17
     1c4:	08 95       	ret

000001c6 <DIO_SetPortVal>:
	
}

void DIO_SetPortVal(Uint8 Port,Uint8 Val)
{
	switch(Port)
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	41 f0       	breq	.+16     	; 0x1da <DIO_SetPortVal+0x14>
     1ca:	28 f0       	brcs	.+10     	; 0x1d6 <DIO_SetPortVal+0x10>
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	39 f0       	breq	.+14     	; 0x1de <DIO_SetPortVal+0x18>
     1d0:	83 30       	cpi	r24, 0x03	; 3
     1d2:	39 f0       	breq	.+14     	; 0x1e2 <DIO_SetPortVal+0x1c>
     1d4:	08 95       	ret
	{
		case DIO_PORTA:
			PORTA = Val;
     1d6:	6b bb       	out	0x1b, r22	; 27
		break;
     1d8:	08 95       	ret
		case DIO_PORTB:
			PORTB = Val;
     1da:	68 bb       	out	0x18, r22	; 24
		break;
     1dc:	08 95       	ret
		case DIO_PORTC:
			PORTC = Val;
     1de:	65 bb       	out	0x15, r22	; 21
		break;
     1e0:	08 95       	ret
		case DIO_PORTD:
			PORTD = Val;
     1e2:	62 bb       	out	0x12, r22	; 18
     1e4:	08 95       	ret

000001e6 <DIO_SetPinVal>:
		break;
	}
}
void DIO_SetPinVal(Uint8 Port,Uint8 Pin,Uint8 Val)
{
	switch(Val)
     1e6:	44 23       	and	r20, r20
     1e8:	b9 f1       	breq	.+110    	; 0x258 <DIO_SetPinVal+0x72>
     1ea:	41 30       	cpi	r20, 0x01	; 1
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <DIO_SetPinVal+0xa>
     1ee:	6b c0       	rjmp	.+214    	; 0x2c6 <DIO_SetPinVal+0xe0>
	{
		case DIO_PIN_HIGH:
		switch(Port)
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	89 f0       	breq	.+34     	; 0x216 <DIO_SetPinVal+0x30>
     1f4:	28 f0       	brcs	.+10     	; 0x200 <DIO_SetPinVal+0x1a>
     1f6:	82 30       	cpi	r24, 0x02	; 2
     1f8:	c9 f0       	breq	.+50     	; 0x22c <DIO_SetPinVal+0x46>
     1fa:	83 30       	cpi	r24, 0x03	; 3
     1fc:	11 f1       	breq	.+68     	; 0x242 <DIO_SetPinVal+0x5c>
     1fe:	08 95       	ret
		{
			case DIO_PORTA:
			set_bit(PORTA,Pin);
     200:	2b b3       	in	r18, 0x1b	; 27
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinVal+0x26>
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	6a 95       	dec	r22
     20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinVal+0x22>
     210:	82 2b       	or	r24, r18
     212:	8b bb       	out	0x1b, r24	; 27
			break;
     214:	08 95       	ret
			case DIO_PORTB:
			set_bit(PORTB,Pin);
     216:	28 b3       	in	r18, 0x18	; 24
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinVal+0x3c>
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	6a 95       	dec	r22
     224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinVal+0x38>
     226:	82 2b       	or	r24, r18
     228:	88 bb       	out	0x18, r24	; 24
			break;
     22a:	08 95       	ret
			case DIO_PORTC:
			set_bit(PORTC,Pin);
     22c:	25 b3       	in	r18, 0x15	; 21
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinVal+0x52>
     234:	88 0f       	add	r24, r24
     236:	99 1f       	adc	r25, r25
     238:	6a 95       	dec	r22
     23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinVal+0x4e>
     23c:	82 2b       	or	r24, r18
     23e:	85 bb       	out	0x15, r24	; 21
			break;
     240:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD,Pin);
     242:	22 b3       	in	r18, 0x12	; 18
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPinVal+0x68>
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	6a 95       	dec	r22
     250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPinVal+0x64>
     252:	82 2b       	or	r24, r18
     254:	82 bb       	out	0x12, r24	; 18
			break;
     256:	08 95       	ret
		}
		break;
		case DIO_PIN_LOW:
		switch(Port)
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	91 f0       	breq	.+36     	; 0x280 <DIO_SetPinVal+0x9a>
     25c:	28 f0       	brcs	.+10     	; 0x268 <DIO_SetPinVal+0x82>
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	d9 f0       	breq	.+54     	; 0x298 <DIO_SetPinVal+0xb2>
     262:	83 30       	cpi	r24, 0x03	; 3
     264:	29 f1       	breq	.+74     	; 0x2b0 <DIO_SetPinVal+0xca>
     266:	08 95       	ret
		{
			case DIO_PORTA:
			clr_bit(PORTA,Pin);
     268:	2b b3       	in	r18, 0x1b	; 27
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinVal+0x8e>
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinVal+0x8a>
     278:	80 95       	com	r24
     27a:	82 23       	and	r24, r18
     27c:	8b bb       	out	0x1b, r24	; 27
			break;
     27e:	08 95       	ret
			case DIO_PORTB:
			clr_bit(PORTB,Pin);
     280:	28 b3       	in	r18, 0x18	; 24
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPinVal+0xa6>
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	6a 95       	dec	r22
     28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPinVal+0xa2>
     290:	80 95       	com	r24
     292:	82 23       	and	r24, r18
     294:	88 bb       	out	0x18, r24	; 24
			break;
     296:	08 95       	ret
			case DIO_PORTC:
			clr_bit(PORTC,Pin);
     298:	25 b3       	in	r18, 0x15	; 21
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_SetPinVal+0xbe>
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	6a 95       	dec	r22
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_SetPinVal+0xba>
     2a8:	80 95       	com	r24
     2aa:	82 23       	and	r24, r18
     2ac:	85 bb       	out	0x15, r24	; 21
			break;
     2ae:	08 95       	ret
			case DIO_PORTD:
			clr_bit(PORTD,Pin);
     2b0:	22 b3       	in	r18, 0x12	; 18
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPinVal+0xd6>
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	6a 95       	dec	r22
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPinVal+0xd2>
     2c0:	80 95       	com	r24
     2c2:	82 23       	and	r24, r18
     2c4:	82 bb       	out	0x12, r24	; 18
     2c6:	08 95       	ret

000002c8 <IRInit>:
 *  Author: eng_s
 */
#include "IR.h"
void IRInit(void)
{
	DIO_SetPinDir(IR_PORT,FRONT_IR_PIN,DIO_PIN_DIR_INPUT);
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	62 e0       	ldi	r22, 0x02	; 2
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(IR_PORT,BACK_IR_PIN,DIO_PIN_DIR_INPUT);
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	63 e0       	ldi	r22, 0x03	; 3
     2d6:	83 e0       	ldi	r24, 0x03	; 3
     2d8:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	GICR  = 1<<INT0_EN  | 1<<INT1_EN;		/* Enable INT0 & INT1*/
     2dc:	80 ec       	ldi	r24, 0xC0	; 192
     2de:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<INT0_RISINGEDGE_EN0 | 1<<INT0_RISINGEDGE_EN1 | 1<<INT1_RISINGEDGE_EN0 | 1<<INT1_RISINGEDGE_EN1;  // Trigger INT0 & INT1 on rising edge */
     2e0:	8f e0       	ldi	r24, 0x0F	; 15
     2e2:	85 bf       	out	0x35, r24	; 53
     2e4:	08 95       	ret

000002e6 <LCDEN>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	ec 01       	movw	r28, r24
     2ec:	41 e0       	ldi	r20, 0x01	; 1
     2ee:	6c 81       	ldd	r22, Y+4	; 0x04
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     2f6:	8f e8       	ldi	r24, 0x8F	; 143
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCDEN+0x14>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCDEN+0x1a>
     300:	00 00       	nop
     302:	40 e0       	ldi	r20, 0x00	; 0
     304:	6c 81       	ldd	r22, Y+4	; 0x04
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     30c:	8f e8       	ldi	r24, 0x8F	; 143
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <LCDEN+0x2a>
     314:	00 c0       	rjmp	.+0      	; 0x316 <LCDEN+0x30>
     316:	00 00       	nop
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <PortWrite>:
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	ec 01       	movw	r28, r24
     326:	16 2f       	mov	r17, r22
     328:	88 81       	ld	r24, Y
     32a:	81 11       	cpse	r24, r1
     32c:	35 c0       	rjmp	.+106    	; 0x398 <PortWrite+0x7a>
     32e:	60 ff       	sbrs	r22, 0
     330:	06 c0       	rjmp	.+12     	; 0x33e <PortWrite+0x20>
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	6e 81       	ldd	r22, Y+6	; 0x06
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     33c:	05 c0       	rjmp	.+10     	; 0x348 <PortWrite+0x2a>
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	6e 81       	ldd	r22, Y+6	; 0x06
     342:	8d 81       	ldd	r24, Y+5	; 0x05
     344:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     348:	11 ff       	sbrs	r17, 1
     34a:	06 c0       	rjmp	.+12     	; 0x358 <PortWrite+0x3a>
     34c:	41 e0       	ldi	r20, 0x01	; 1
     34e:	6f 81       	ldd	r22, Y+7	; 0x07
     350:	8d 81       	ldd	r24, Y+5	; 0x05
     352:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     356:	05 c0       	rjmp	.+10     	; 0x362 <PortWrite+0x44>
     358:	40 e0       	ldi	r20, 0x00	; 0
     35a:	6f 81       	ldd	r22, Y+7	; 0x07
     35c:	8d 81       	ldd	r24, Y+5	; 0x05
     35e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     362:	12 ff       	sbrs	r17, 2
     364:	06 c0       	rjmp	.+12     	; 0x372 <PortWrite+0x54>
     366:	41 e0       	ldi	r20, 0x01	; 1
     368:	68 85       	ldd	r22, Y+8	; 0x08
     36a:	8d 81       	ldd	r24, Y+5	; 0x05
     36c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     370:	05 c0       	rjmp	.+10     	; 0x37c <PortWrite+0x5e>
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	68 85       	ldd	r22, Y+8	; 0x08
     376:	8d 81       	ldd	r24, Y+5	; 0x05
     378:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     37c:	13 ff       	sbrs	r17, 3
     37e:	06 c0       	rjmp	.+12     	; 0x38c <PortWrite+0x6e>
     380:	41 e0       	ldi	r20, 0x01	; 1
     382:	69 85       	ldd	r22, Y+9	; 0x09
     384:	8d 81       	ldd	r24, Y+5	; 0x05
     386:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     38a:	09 c0       	rjmp	.+18     	; 0x39e <PortWrite+0x80>
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	69 85       	ldd	r22, Y+9	; 0x09
     390:	8d 81       	ldd	r24, Y+5	; 0x05
     392:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     396:	03 c0       	rjmp	.+6      	; 0x39e <PortWrite+0x80>
     398:	8d 81       	ldd	r24, Y+5	; 0x05
     39a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_SetPortVal>
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	08 95       	ret

000003a6 <cmd>:
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
     3ae:	16 2f       	mov	r17, r22
     3b0:	40 e0       	ldi	r20, 0x00	; 0
     3b2:	6a 81       	ldd	r22, Y+2	; 0x02
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     3ba:	88 81       	ld	r24, Y
     3bc:	81 11       	cpse	r24, r1
     3be:	12 c0       	rjmp	.+36     	; 0x3e4 <cmd+0x3e>
     3c0:	61 2f       	mov	r22, r17
     3c2:	62 95       	swap	r22
     3c4:	6f 70       	andi	r22, 0x0F	; 15
     3c6:	ce 01       	movw	r24, r28
     3c8:	0e 94 8f 01 	call	0x31e	; 0x31e <PortWrite>
     3cc:	ce 01       	movw	r24, r28
     3ce:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCDEN>
     3d2:	61 2f       	mov	r22, r17
     3d4:	6f 70       	andi	r22, 0x0F	; 15
     3d6:	ce 01       	movw	r24, r28
     3d8:	0e 94 8f 01 	call	0x31e	; 0x31e <PortWrite>
     3dc:	ce 01       	movw	r24, r28
     3de:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCDEN>
     3e2:	07 c0       	rjmp	.+14     	; 0x3f2 <cmd+0x4c>
     3e4:	61 2f       	mov	r22, r17
     3e6:	ce 01       	movw	r24, r28
     3e8:	0e 94 8f 01 	call	0x31e	; 0x31e <PortWrite>
     3ec:	ce 01       	movw	r24, r28
     3ee:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCDEN>
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	08 95       	ret

000003fa <LCDInit>:
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	ec 01       	movw	r28, r24
     400:	41 e0       	ldi	r20, 0x01	; 1
     402:	6a 81       	ldd	r22, Y+2	; 0x02
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	6b 81       	ldd	r22, Y+3	; 0x03
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	6c 81       	ldd	r22, Y+4	; 0x04
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	6b 81       	ldd	r22, Y+3	; 0x03
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     428:	88 81       	ld	r24, Y
     42a:	81 11       	cpse	r24, r1
     42c:	3c c0       	rjmp	.+120    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     42e:	41 e0       	ldi	r20, 0x01	; 1
     430:	6e 81       	ldd	r22, Y+6	; 0x06
     432:	8d 81       	ldd	r24, Y+5	; 0x05
     434:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	6f 81       	ldd	r22, Y+7	; 0x07
     43c:	8d 81       	ldd	r24, Y+5	; 0x05
     43e:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     442:	41 e0       	ldi	r20, 0x01	; 1
     444:	68 85       	ldd	r22, Y+8	; 0x08
     446:	8d 81       	ldd	r24, Y+5	; 0x05
     448:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	69 85       	ldd	r22, Y+9	; 0x09
     450:	8d 81       	ldd	r24, Y+5	; 0x05
     452:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     456:	2f ef       	ldi	r18, 0xFF	; 255
     458:	89 ef       	ldi	r24, 0xF9	; 249
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	21 50       	subi	r18, 0x01	; 1
     45e:	80 40       	sbci	r24, 0x00	; 0
     460:	90 40       	sbci	r25, 0x00	; 0
     462:	e1 f7       	brne	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     464:	00 c0       	rjmp	.+0      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     466:	00 00       	nop
     468:	63 e3       	ldi	r22, 0x33	; 51
     46a:	ce 01       	movw	r24, r28
     46c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     470:	8f e9       	ldi	r24, 0x9F	; 159
     472:	9f e0       	ldi	r25, 0x0F	; 15
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     478:	00 c0       	rjmp	.+0      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     47a:	00 00       	nop
     47c:	62 e3       	ldi	r22, 0x32	; 50
     47e:	ce 01       	movw	r24, r28
     480:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     484:	8f e9       	ldi	r24, 0x9F	; 159
     486:	9f e0       	ldi	r25, 0x0F	; 15
     488:	01 97       	sbiw	r24, 0x01	; 1
     48a:	f1 f7       	brne	.-4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     48e:	00 00       	nop
     490:	68 e2       	ldi	r22, 0x28	; 40
     492:	ce 01       	movw	r24, r28
     494:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     498:	8f e9       	ldi	r24, 0x9F	; 159
     49a:	9f e0       	ldi	r25, 0x0F	; 15
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     4a2:	00 00       	nop
     4a4:	17 c0       	rjmp	.+46     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4a6:	6f ef       	ldi	r22, 0xFF	; 255
     4a8:	8d 81       	ldd	r24, Y+5	; 0x05
     4aa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPortDir>
     4ae:	9f ef       	ldi	r25, 0xFF	; 255
     4b0:	29 ef       	ldi	r18, 0xF9	; 249
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	91 50       	subi	r25, 0x01	; 1
     4b6:	20 40       	sbci	r18, 0x00	; 0
     4b8:	80 40       	sbci	r24, 0x00	; 0
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     4be:	00 00       	nop
     4c0:	68 e3       	ldi	r22, 0x38	; 56
     4c2:	ce 01       	movw	r24, r28
     4c4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     4c8:	8f e9       	ldi	r24, 0x9F	; 159
     4ca:	9f e0       	ldi	r25, 0x0F	; 15
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4d2:	00 00       	nop
     4d4:	63 e0       	ldi	r22, 0x03	; 3
     4d6:	ce 01       	movw	r24, r28
     4d8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     4dc:	8f e1       	ldi	r24, 0x1F	; 31
     4de:	9e e4       	ldi	r25, 0x4E	; 78
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4e6:	00 00       	nop
     4e8:	63 e0       	ldi	r22, 0x03	; 3
     4ea:	ce 01       	movw	r24, r28
     4ec:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     4f0:	8f ed       	ldi	r24, 0xDF	; 223
     4f2:	9b ea       	ldi	r25, 0xAB	; 171
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
     4fa:	00 00       	nop
     4fc:	63 e0       	ldi	r22, 0x03	; 3
     4fe:	ce 01       	movw	r24, r28
     500:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     504:	66 e0       	ldi	r22, 0x06	; 6
     506:	ce 01       	movw	r24, r28
     508:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     50c:	8f e9       	ldi	r24, 0x9F	; 159
     50e:	9f e0       	ldi	r25, 0x0F	; 15
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     514:	00 c0       	rjmp	.+0      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
     516:	00 00       	nop
     518:	6c e0       	ldi	r22, 0x0C	; 12
     51a:	ce 01       	movw	r24, r28
     51c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     520:	8f e9       	ldi	r24, 0x9F	; 159
     522:	9f e0       	ldi	r25, 0x0F	; 15
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
     528:	00 c0       	rjmp	.+0      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
     52a:	00 00       	nop
     52c:	60 e8       	ldi	r22, 0x80	; 128
     52e:	ce 01       	movw	r24, r28
     530:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     534:	8f e9       	ldi	r24, 0x9F	; 159
     536:	9f e0       	ldi	r25, 0x0F	; 15
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
     53e:	00 00       	nop
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <writeData>:
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	ec 01       	movw	r28, r24
     54e:	16 2f       	mov	r17, r22
     550:	41 e0       	ldi	r20, 0x01	; 1
     552:	6a 81       	ldd	r22, Y+2	; 0x02
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     55a:	88 81       	ld	r24, Y
     55c:	81 11       	cpse	r24, r1
     55e:	12 c0       	rjmp	.+36     	; 0x584 <writeData+0x3e>
     560:	61 2f       	mov	r22, r17
     562:	62 95       	swap	r22
     564:	6f 70       	andi	r22, 0x0F	; 15
     566:	ce 01       	movw	r24, r28
     568:	0e 94 8f 01 	call	0x31e	; 0x31e <PortWrite>
     56c:	ce 01       	movw	r24, r28
     56e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCDEN>
     572:	61 2f       	mov	r22, r17
     574:	6f 70       	andi	r22, 0x0F	; 15
     576:	ce 01       	movw	r24, r28
     578:	0e 94 8f 01 	call	0x31e	; 0x31e <PortWrite>
     57c:	ce 01       	movw	r24, r28
     57e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCDEN>
     582:	07 c0       	rjmp	.+14     	; 0x592 <writeData+0x4c>
     584:	61 2f       	mov	r22, r17
     586:	ce 01       	movw	r24, r28
     588:	0e 94 8f 01 	call	0x31e	; 0x31e <PortWrite>
     58c:	ce 01       	movw	r24, r28
     58e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCDEN>
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	08 95       	ret

0000059a <LcdSetCursor>:
     59a:	20 e4       	ldi	r18, 0x40	; 64
     59c:	62 9f       	mul	r22, r18
     59e:	40 0d       	add	r20, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	64 2f       	mov	r22, r20
     5a4:	60 68       	ori	r22, 0x80	; 128
     5a6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     5aa:	08 95       	ret

000005ac <Clear>:
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <cmd>
     5b2:	08 95       	ret

000005b4 <writeString>:
	{
		cmd(lcd,0x10);
		_delay_ms(1);
	}
}
void writeString(LCD *lcd,char *LINE){
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	7c 01       	movw	r14, r24
     5c2:	8b 01       	movw	r16, r22
	int i;
	for (i = 0 ; LINE[i] != '\0' ; i++)
     5c4:	c0 e0       	ldi	r28, 0x00	; 0
     5c6:	d0 e0       	ldi	r29, 0x00	; 0
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <writeString+0x1e>
	{
		writeData(lcd,LINE[i]);
     5ca:	c7 01       	movw	r24, r14
     5cc:	0e 94 a3 02 	call	0x546	; 0x546 <writeData>
		_delay_ms(1);
	}
}
void writeString(LCD *lcd,char *LINE){
	int i;
	for (i = 0 ; LINE[i] != '\0' ; i++)
     5d0:	21 96       	adiw	r28, 0x01	; 1
     5d2:	f8 01       	movw	r30, r16
     5d4:	ec 0f       	add	r30, r28
     5d6:	fd 1f       	adc	r31, r29
     5d8:	60 81       	ld	r22, Z
     5da:	61 11       	cpse	r22, r1
     5dc:	f6 cf       	rjmp	.-20     	; 0x5ca <writeString+0x16>
	{
		writeData(lcd,LINE[i]);
	}
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	08 95       	ret

000005ec <SystemInit>:
TimerControl Motor1PWMTimer;
TimerControl Motor2PWMTimer;
void SystemInit(void)
{
	
	Motor1PWMTimer.TimerSelect = TIMER1;
     5ec:	e7 ed       	ldi	r30, 0xD7	; 215
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	90 83       	st	Z, r25
	Motor1PWMTimer.TimerMode = TIMER_PHASE_CORRECT_8BIT_PWM_MODE;
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	81 83       	std	Z+1, r24	; 0x01
	Motor1PWMTimer.TimerPrescaler = TimerPrescaler_8;
     5f8:	28 e0       	ldi	r18, 0x08	; 8
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	33 83       	std	Z+3, r19	; 0x03
     5fe:	22 83       	std	Z+2, r18	; 0x02
	Motor1PWMTimer.TimerCompSelect = TIMER1_COMPARETOR_A;
     600:	10 86       	std	Z+8, r1	; 0x08
	Motor1PWMTimer.TimerCompMode = TIMER_COMPARETOR_CLR;
     602:	81 87       	std	Z+9, r24	; 0x09
	
	Motor2PWMTimer.TimerSelect = TIMER1;
     604:	ec ee       	ldi	r30, 0xEC	; 236
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	90 83       	st	Z, r25
	Motor2PWMTimer.TimerMode = TIMER_PHASE_CORRECT_8BIT_PWM_MODE;
     60a:	81 83       	std	Z+1, r24	; 0x01
	Motor2PWMTimer.TimerPrescaler = TimerPrescaler_8;
     60c:	33 83       	std	Z+3, r19	; 0x03
     60e:	22 83       	std	Z+2, r18	; 0x02
	Motor2PWMTimer.TimerCompSelect = TIMER1_COMPARETOR_B;
     610:	90 87       	std	Z+8, r25	; 0x08
	Motor2PWMTimer.TimerCompMode = TIMER_COMPARETOR_CLR;
     612:	81 87       	std	Z+9, r24	; 0x09
	
	Lcd1.mode = LCD_4BIT_MODE;
     614:	e2 ee       	ldi	r30, 0xE2	; 226
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	10 82       	st	Z, r1
	Lcd1.controlPort = DIO_PORTB;
     61a:	91 83       	std	Z+1, r25	; 0x01
	Lcd1.RSPin = DIO_PIN_1;
     61c:	92 83       	std	Z+2, r25	; 0x02
	Lcd1.RWPin = DIO_PIN_2;
     61e:	83 83       	std	Z+3, r24	; 0x03
	Lcd1.ENPin = DIO_PIN_3;
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	84 83       	std	Z+4, r24	; 0x04
	Lcd1.dataPort = DIO_PORTA;
     624:	15 82       	std	Z+5, r1	; 0x05
	Lcd1.D4Pin = DIO_PIN_4;
     626:	84 e0       	ldi	r24, 0x04	; 4
     628:	86 83       	std	Z+6, r24	; 0x06
	Lcd1.D5Pin = DIO_PIN_5;
     62a:	85 e0       	ldi	r24, 0x05	; 5
     62c:	87 83       	std	Z+7, r24	; 0x07
	Lcd1.D6Pin = DIO_PIN_6;
     62e:	86 e0       	ldi	r24, 0x06	; 6
     630:	80 87       	std	Z+8, r24	; 0x08
	Lcd1.D7Pin = DIO_PIN_7;
     632:	87 e0       	ldi	r24, 0x07	; 7
     634:	81 87       	std	Z+9, r24	; 0x09
	Timer_Init(&Motor1PWMTimer);
     636:	87 ed       	ldi	r24, 0xD7	; 215
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 75 05 	call	0xaea	; 0xaea <Timer_Init>
	Timer_Init(&Motor2PWMTimer);
     63e:	8c ee       	ldi	r24, 0xEC	; 236
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 75 05 	call	0xaea	; 0xaea <Timer_Init>
	Timer_Start(&Motor1PWMTimer);
     646:	87 ed       	ldi	r24, 0xD7	; 215
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Timer_Start>
	Timer_Start(&Motor2PWMTimer);
     64e:	8c ee       	ldi	r24, 0xEC	; 236
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Timer_Start>
	LCDInit(&Lcd1);
     656:	82 ee       	ldi	r24, 0xE2	; 226
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCDInit>
	UltraSonic_init();
     65e:	0e 94 88 07 	call	0xf10	; 0xf10 <UltraSonic_init>
	ServoInit();
     662:	0e 94 32 05 	call	0xa64	; 0xa64 <ServoInit>
	IRInit();
     666:	0e 94 64 01 	call	0x2c8	; 0x2c8 <IRInit>
	Motor_init();
     66a:	0e 94 8d 04 	call	0x91a	; 0x91a <Motor_init>
	sei();
     66e:	78 94       	sei
	Motor_Speet(100);
     670:	84 e6       	ldi	r24, 0x64	; 100
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 ac 04 	call	0x958	; 0x958 <Motor_Speet>
     678:	08 95       	ret

0000067a <main>:
}

int main(void)
{
    /* Replace with your application code */
	SystemInit();
     67a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <SystemInit>
	int speed = 70 , count = 0;
     67e:	e1 2c       	mov	r14, r1
     680:	f1 2c       	mov	r15, r1
     682:	c6 e4       	ldi	r28, 0x46	; 70
     684:	d0 e0       	ldi	r29, 0x00	; 0
    while (1) 
    {
		if(UltraSonic_Distance()>20)
     686:	0e 94 bc 07 	call	0xf78	; 0xf78 <UltraSonic_Distance>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 ea       	ldi	r20, 0xA0	; 160
     690:	51 e4       	ldi	r21, 0x41	; 65
     692:	0e 94 2a 09 	call	0x1254	; 0x1254 <__gesf2>
     696:	18 16       	cp	r1, r24
     698:	dc f4       	brge	.+54     	; 0x6d0 <main+0x56>
		{
			LcdSetCursor(&Lcd1,0,0);
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	82 ee       	ldi	r24, 0xE2	; 226
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 cd 02 	call	0x59a	; 0x59a <LcdSetCursor>
			writeString(&Lcd1,"Distance > 20 cm");
     6a6:	60 e6       	ldi	r22, 0x60	; 96
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	82 ee       	ldi	r24, 0xE2	; 226
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 da 02 	call	0x5b4	; 0x5b4 <writeString>
			LcdSetCursor(&Lcd1,1,0);
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	82 ee       	ldi	r24, 0xE2	; 226
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 cd 02 	call	0x59a	; 0x59a <LcdSetCursor>
			writeString(&Lcd1,"move foreword");
     6be:	61 e7       	ldi	r22, 0x71	; 113
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	82 ee       	ldi	r24, 0xE2	; 226
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <writeString>
			Motor_foroword();
     6ca:	0e 94 c9 04 	call	0x992	; 0x992 <Motor_foroword>
     6ce:	db cf       	rjmp	.-74     	; 0x686 <main+0xc>
		} 
		else if(UltraSonic_Distance()>5)
     6d0:	0e 94 bc 07 	call	0xf78	; 0xf78 <UltraSonic_Distance>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 ea       	ldi	r20, 0xA0	; 160
     6da:	50 e4       	ldi	r21, 0x40	; 64
     6dc:	0e 94 2a 09 	call	0x1254	; 0x1254 <__gesf2>
     6e0:	18 16       	cp	r1, r24
     6e2:	0c f0       	brlt	.+2      	; 0x6e6 <main+0x6c>
     6e4:	66 c0       	rjmp	.+204    	; 0x7b2 <main+0x138>
		{
			LcdSetCursor(&Lcd1,0,0);
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	82 ee       	ldi	r24, 0xE2	; 226
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 cd 02 	call	0x59a	; 0x59a <LcdSetCursor>
			writeString(&Lcd1,"Distance < 20 cm");
     6f2:	6f e7       	ldi	r22, 0x7F	; 127
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	82 ee       	ldi	r24, 0xE2	; 226
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 da 02 	call	0x5b4	; 0x5b4 <writeString>
			LcdSetCursor(&Lcd1,1,0);
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	82 ee       	ldi	r24, 0xE2	; 226
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 cd 02 	call	0x59a	; 0x59a <LcdSetCursor>
			writeString(&Lcd1,"scanning for output");
     70a:	60 e9       	ldi	r22, 0x90	; 144
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	82 ee       	ldi	r24, 0xE2	; 226
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 da 02 	call	0x5b4	; 0x5b4 <writeString>
			Motor_Stop();
     716:	0e 94 1d 05 	call	0xa3a	; 0xa3a <Motor_Stop>
			Motor_Speet(speed);
     71a:	ce 01       	movw	r24, r28
     71c:	0e 94 ac 04 	call	0x958	; 0x958 <Motor_Speet>
			ServoGoToAngle(-90);
     720:	86 ea       	ldi	r24, 0xA6	; 166
     722:	0e 94 36 05 	call	0xa6c	; 0xa6c <ServoGoToAngle>
			if (UltraSonic_Distance()>20)
     726:	0e 94 bc 07 	call	0xf78	; 0xf78 <UltraSonic_Distance>
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 ea       	ldi	r20, 0xA0	; 160
     730:	51 e4       	ldi	r21, 0x41	; 65
     732:	0e 94 2a 09 	call	0x1254	; 0x1254 <__gesf2>
     736:	18 16       	cp	r1, r24
     738:	74 f4       	brge	.+28     	; 0x756 <main+0xdc>
			{
				Motor_Left();
     73a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Motor_Left>
     73e:	2f ef       	ldi	r18, 0xFF	; 255
     740:	89 e6       	ldi	r24, 0x69	; 105
     742:	98 e1       	ldi	r25, 0x18	; 24
     744:	21 50       	subi	r18, 0x01	; 1
     746:	80 40       	sbci	r24, 0x00	; 0
     748:	90 40       	sbci	r25, 0x00	; 0
     74a:	e1 f7       	brne	.-8      	; 0x744 <main+0xca>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <main+0xd4>
     74e:	00 00       	nop
				_delay_ms(500);
				speed = 100;
     750:	c4 e6       	ldi	r28, 0x64	; 100
     752:	d0 e0       	ldi	r29, 0x00	; 0
     754:	1e c0       	rjmp	.+60     	; 0x792 <main+0x118>
			} 
			else
			{
				ServoGoToAngle(90);
     756:	8a e5       	ldi	r24, 0x5A	; 90
     758:	0e 94 36 05 	call	0xa6c	; 0xa6c <ServoGoToAngle>
				if (UltraSonic_Distance()>20)
     75c:	0e 94 bc 07 	call	0xf78	; 0xf78 <UltraSonic_Distance>
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 ea       	ldi	r20, 0xA0	; 160
     766:	51 e4       	ldi	r21, 0x41	; 65
     768:	0e 94 2a 09 	call	0x1254	; 0x1254 <__gesf2>
     76c:	18 16       	cp	r1, r24
     76e:	74 f4       	brge	.+28     	; 0x78c <main+0x112>
				{
					Motor_Right();
     770:	0e 94 08 05 	call	0xa10	; 0xa10 <Motor_Right>
     774:	2f ef       	ldi	r18, 0xFF	; 255
     776:	89 e6       	ldi	r24, 0x69	; 105
     778:	98 e1       	ldi	r25, 0x18	; 24
     77a:	21 50       	subi	r18, 0x01	; 1
     77c:	80 40       	sbci	r24, 0x00	; 0
     77e:	90 40       	sbci	r25, 0x00	; 0
     780:	e1 f7       	brne	.-8      	; 0x77a <main+0x100>
     782:	00 c0       	rjmp	.+0      	; 0x784 <main+0x10a>
     784:	00 00       	nop
					_delay_ms(500);
					speed = 100;
     786:	c4 e6       	ldi	r28, 0x64	; 100
     788:	d0 e0       	ldi	r29, 0x00	; 0
     78a:	03 c0       	rjmp	.+6      	; 0x792 <main+0x118>
				}
				else
				{
					ServoGoToAngle(0);
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 36 05 	call	0xa6c	; 0xa6c <ServoGoToAngle>
				}
			}
			if (speed > 30 && count == 50)
     792:	cf 31       	cpi	r28, 0x1F	; 31
     794:	d1 05       	cpc	r29, r1
     796:	3c f0       	brlt	.+14     	; 0x7a6 <main+0x12c>
     798:	22 e3       	ldi	r18, 0x32	; 50
     79a:	e2 16       	cp	r14, r18
     79c:	f1 04       	cpc	r15, r1
     79e:	19 f4       	brne	.+6      	; 0x7a6 <main+0x12c>
			{
				speed --;
     7a0:	21 97       	sbiw	r28, 0x01	; 1
				count = 0;
     7a2:	e1 2c       	mov	r14, r1
     7a4:	f1 2c       	mov	r15, r1
			}
			count ++;
     7a6:	8f ef       	ldi	r24, 0xFF	; 255
     7a8:	e8 1a       	sub	r14, r24
     7aa:	f8 0a       	sbc	r15, r24
			Motor_foroword();
     7ac:	0e 94 c9 04 	call	0x992	; 0x992 <Motor_foroword>
     7b0:	6a cf       	rjmp	.-300    	; 0x686 <main+0xc>
		}else{
			LcdSetCursor(&Lcd1,0,0);
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	82 ee       	ldi	r24, 0xE2	; 226
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 cd 02 	call	0x59a	; 0x59a <LcdSetCursor>
			writeString(&Lcd1,"Distance < 5 cm");
     7be:	64 ea       	ldi	r22, 0xA4	; 164
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	82 ee       	ldi	r24, 0xE2	; 226
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <writeString>
			LcdSetCursor(&Lcd1,1,0);
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	82 ee       	ldi	r24, 0xE2	; 226
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 cd 02 	call	0x59a	; 0x59a <LcdSetCursor>
			writeString(&Lcd1,"there is no output");
     7d6:	64 eb       	ldi	r22, 0xB4	; 180
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	82 ee       	ldi	r24, 0xE2	; 226
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 da 02 	call	0x5b4	; 0x5b4 <writeString>
			Clear(&Lcd1);
     7e2:	82 ee       	ldi	r24, 0xE2	; 226
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <Clear>
			writeString(&Lcd1,"move backward");
     7ea:	67 ec       	ldi	r22, 0xC7	; 199
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	82 ee       	ldi	r24, 0xE2	; 226
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <writeString>
			Uint8 ThereIsOut = 0;
     7f6:	10 e0       	ldi	r17, 0x00	; 0
			speed = 50;
     7f8:	c2 e3       	ldi	r28, 0x32	; 50
     7fa:	d0 e0       	ldi	r29, 0x00	; 0
			while(!ThereIsOut)
     7fc:	40 c0       	rjmp	.+128    	; 0x87e <__stack+0x1f>
			{
				Motor_Speet(speed);
     7fe:	ce 01       	movw	r24, r28
     800:	0e 94 ac 04 	call	0x958	; 0x958 <Motor_Speet>
				Motor_backword();
     804:	0e 94 de 04 	call	0x9bc	; 0x9bc <Motor_backword>
				ServoGoToAngle(-90);
     808:	86 ea       	ldi	r24, 0xA6	; 166
     80a:	0e 94 36 05 	call	0xa6c	; 0xa6c <ServoGoToAngle>
				if (UltraSonic_Distance()>20)
     80e:	0e 94 bc 07 	call	0xf78	; 0xf78 <UltraSonic_Distance>
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 ea       	ldi	r20, 0xA0	; 160
     818:	51 e4       	ldi	r21, 0x41	; 65
     81a:	0e 94 2a 09 	call	0x1254	; 0x1254 <__gesf2>
     81e:	18 16       	cp	r1, r24
     820:	7c f4       	brge	.+30     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
				{
					Motor_Left();
     822:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <Motor_Left>
     826:	9f ef       	ldi	r25, 0xFF	; 255
     828:	29 e6       	ldi	r18, 0x69	; 105
     82a:	88 e1       	ldi	r24, 0x18	; 24
     82c:	91 50       	subi	r25, 0x01	; 1
     82e:	20 40       	sbci	r18, 0x00	; 0
     830:	80 40       	sbci	r24, 0x00	; 0
     832:	e1 f7       	brne	.-8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     834:	00 c0       	rjmp	.+0      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     836:	00 00       	nop
					_delay_ms(500);
					speed = 100;
					ThereIsOut = 1;
     838:	11 e0       	ldi	r17, 0x01	; 1
				ServoGoToAngle(-90);
				if (UltraSonic_Distance()>20)
				{
					Motor_Left();
					_delay_ms(500);
					speed = 100;
     83a:	c4 e6       	ldi	r28, 0x64	; 100
     83c:	d0 e0       	ldi	r29, 0x00	; 0
     83e:	1f c0       	rjmp	.+62     	; 0x87e <__stack+0x1f>
					ThereIsOut = 1;
				}
				else
				{
					ServoGoToAngle(90);
     840:	8a e5       	ldi	r24, 0x5A	; 90
     842:	0e 94 36 05 	call	0xa6c	; 0xa6c <ServoGoToAngle>
					if (UltraSonic_Distance()>20)
     846:	0e 94 bc 07 	call	0xf78	; 0xf78 <UltraSonic_Distance>
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	40 ea       	ldi	r20, 0xA0	; 160
     850:	51 e4       	ldi	r21, 0x41	; 65
     852:	0e 94 2a 09 	call	0x1254	; 0x1254 <__gesf2>
     856:	18 16       	cp	r1, r24
     858:	7c f4       	brge	.+30     	; 0x878 <__stack+0x19>
					{
						Motor_Right();
     85a:	0e 94 08 05 	call	0xa10	; 0xa10 <Motor_Right>
     85e:	9f ef       	ldi	r25, 0xFF	; 255
     860:	29 e6       	ldi	r18, 0x69	; 105
     862:	88 e1       	ldi	r24, 0x18	; 24
     864:	91 50       	subi	r25, 0x01	; 1
     866:	20 40       	sbci	r18, 0x00	; 0
     868:	80 40       	sbci	r24, 0x00	; 0
     86a:	e1 f7       	brne	.-8      	; 0x864 <__stack+0x5>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
     86e:	00 00       	nop
						_delay_ms(500);
						speed = 100;
						ThereIsOut = 1;
     870:	11 e0       	ldi	r17, 0x01	; 1
					ServoGoToAngle(90);
					if (UltraSonic_Distance()>20)
					{
						Motor_Right();
						_delay_ms(500);
						speed = 100;
     872:	c4 e6       	ldi	r28, 0x64	; 100
     874:	d0 e0       	ldi	r29, 0x00	; 0
     876:	03 c0       	rjmp	.+6      	; 0x87e <__stack+0x1f>
						ThereIsOut = 1;
					}
					else
					{
						ServoGoToAngle(0);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 36 05 	call	0xa6c	; 0xa6c <ServoGoToAngle>
			writeString(&Lcd1,"there is no output");
			Clear(&Lcd1);
			writeString(&Lcd1,"move backward");
			Uint8 ThereIsOut = 0;
			speed = 50;
			while(!ThereIsOut)
     87e:	11 23       	and	r17, r17
     880:	09 f4       	brne	.+2      	; 0x884 <__stack+0x25>
     882:	bd cf       	rjmp	.-134    	; 0x7fe <main+0x184>
					{
						ServoGoToAngle(0);
					}
				}
			}
			Motor_foroword();
     884:	0e 94 c9 04 	call	0x992	; 0x992 <Motor_foroword>
     888:	fe ce       	rjmp	.-516    	; 0x686 <main+0xc>

0000088a <__vector_1>:
		}
    }
}

ISR(INT0_vect)
{
     88a:	1f 92       	push	r1
     88c:	0f 92       	push	r0
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	0f 92       	push	r0
     892:	11 24       	eor	r1, r1
     894:	2f 93       	push	r18
     896:	3f 93       	push	r19
     898:	4f 93       	push	r20
     89a:	5f 93       	push	r21
     89c:	6f 93       	push	r22
     89e:	7f 93       	push	r23
     8a0:	8f 93       	push	r24
     8a2:	9f 93       	push	r25
     8a4:	af 93       	push	r26
     8a6:	bf 93       	push	r27
     8a8:	ef 93       	push	r30
     8aa:	ff 93       	push	r31
	Motor_Stop();
     8ac:	0e 94 1d 05 	call	0xa3a	; 0xa3a <Motor_Stop>
}
     8b0:	ff 91       	pop	r31
     8b2:	ef 91       	pop	r30
     8b4:	bf 91       	pop	r27
     8b6:	af 91       	pop	r26
     8b8:	9f 91       	pop	r25
     8ba:	8f 91       	pop	r24
     8bc:	7f 91       	pop	r23
     8be:	6f 91       	pop	r22
     8c0:	5f 91       	pop	r21
     8c2:	4f 91       	pop	r20
     8c4:	3f 91       	pop	r19
     8c6:	2f 91       	pop	r18
     8c8:	0f 90       	pop	r0
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	0f 90       	pop	r0
     8ce:	1f 90       	pop	r1
     8d0:	18 95       	reti

000008d2 <__vector_2>:
ISR(INT1_vect)
{
     8d2:	1f 92       	push	r1
     8d4:	0f 92       	push	r0
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	0f 92       	push	r0
     8da:	11 24       	eor	r1, r1
     8dc:	2f 93       	push	r18
     8de:	3f 93       	push	r19
     8e0:	4f 93       	push	r20
     8e2:	5f 93       	push	r21
     8e4:	6f 93       	push	r22
     8e6:	7f 93       	push	r23
     8e8:	8f 93       	push	r24
     8ea:	9f 93       	push	r25
     8ec:	af 93       	push	r26
     8ee:	bf 93       	push	r27
     8f0:	ef 93       	push	r30
     8f2:	ff 93       	push	r31
	Motor_Stop();
     8f4:	0e 94 1d 05 	call	0xa3a	; 0xa3a <Motor_Stop>
     8f8:	ff 91       	pop	r31
     8fa:	ef 91       	pop	r30
     8fc:	bf 91       	pop	r27
     8fe:	af 91       	pop	r26
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	7f 91       	pop	r23
     906:	6f 91       	pop	r22
     908:	5f 91       	pop	r21
     90a:	4f 91       	pop	r20
     90c:	3f 91       	pop	r19
     90e:	2f 91       	pop	r18
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	0f 90       	pop	r0
     916:	1f 90       	pop	r1
     918:	18 95       	reti

0000091a <Motor_init>:


void Motor_init(void)
{
	
	DIO_SetPinDir(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_DIR_OUTPUT);
     91a:	41 e0       	ldi	r20, 0x01	; 1
     91c:	63 e0       	ldi	r22, 0x03	; 3
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_DIR_OUTPUT);
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	64 e0       	ldi	r22, 0x04	; 4
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_DIR_OUTPUT);
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	65 e0       	ldi	r22, 0x05	; 5
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_DIR_OUTPUT);
     938:	41 e0       	ldi	r20, 0x01	; 1
     93a:	66 e0       	ldi	r22, 0x06	; 6
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(MOTOREN_PORT,MOTOR1_ENPIN,DIO_PIN_DIR_OUTPUT);
     942:	41 e0       	ldi	r20, 0x01	; 1
     944:	64 e0       	ldi	r22, 0x04	; 4
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
	DIO_SetPinDir(MOTOREN_PORT,MOTOR2_ENPIN,DIO_PIN_DIR_OUTPUT);
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	65 e0       	ldi	r22, 0x05	; 5
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     956:	08 95       	ret

00000958 <Motor_Speet>:
	
}
void Motor_Speet(int speed)
{
	if (speed > 10 && speed < 100)
     958:	9c 01       	movw	r18, r24
     95a:	2b 50       	subi	r18, 0x0B	; 11
     95c:	31 09       	sbc	r19, r1
     95e:	29 35       	cpi	r18, 0x59	; 89
     960:	31 05       	cpc	r19, r1
     962:	80 f4       	brcc	.+32     	; 0x984 <Motor_Speet+0x2c>
	{
		OCR1A = ((255 * speed)/100);
     964:	4f ef       	ldi	r20, 0xFF	; 255
     966:	48 9f       	mul	r20, r24
     968:	90 01       	movw	r18, r0
     96a:	49 9f       	mul	r20, r25
     96c:	30 0d       	add	r19, r0
     96e:	11 24       	eor	r1, r1
     970:	c9 01       	movw	r24, r18
     972:	64 e6       	ldi	r22, 0x64	; 100
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	0e 94 67 09 	call	0x12ce	; 0x12ce <__divmodhi4>
     97a:	7b bd       	out	0x2b, r23	; 43
     97c:	6a bd       	out	0x2a, r22	; 42
		OCR1B = ((255 * speed)/100);
     97e:	79 bd       	out	0x29, r23	; 41
     980:	68 bd       	out	0x28, r22	; 40
     982:	08 95       	ret
	} 
	else
	{
		OCR1A = 1024;
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	94 e0       	ldi	r25, 0x04	; 4
     988:	9b bd       	out	0x2b, r25	; 43
     98a:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 1024;
     98c:	99 bd       	out	0x29, r25	; 41
     98e:	88 bd       	out	0x28, r24	; 40
     990:	08 95       	ret

00000992 <Motor_foroword>:
	}
}
void Motor_foroword(void)
{
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_HIGH);
     992:	41 e0       	ldi	r20, 0x01	; 1
     994:	63 e0       	ldi	r22, 0x03	; 3
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_LOW);
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	64 e0       	ldi	r22, 0x04	; 4
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_HIGH);
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	65 e0       	ldi	r22, 0x05	; 5
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_LOW);
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	66 e0       	ldi	r22, 0x06	; 6
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     9ba:	08 95       	ret

000009bc <Motor_backword>:
}
void Motor_backword(void)
{
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_HIGH);
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	64 e0       	ldi	r22, 0x04	; 4
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_LOW);
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	63 e0       	ldi	r22, 0x03	; 3
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_HIGH);
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	66 e0       	ldi	r22, 0x06	; 6
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_LOW);
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	65 e0       	ldi	r22, 0x05	; 5
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     9e4:	08 95       	ret

000009e6 <Motor_Left>:
}
void Motor_Left(void)
{
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_HIGH);
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	63 e0       	ldi	r22, 0x03	; 3
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_LOW);
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	64 e0       	ldi	r22, 0x04	; 4
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_HIGH);
     9fa:	41 e0       	ldi	r20, 0x01	; 1
     9fc:	66 e0       	ldi	r22, 0x06	; 6
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_LOW);
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	65 e0       	ldi	r22, 0x05	; 5
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     a0e:	08 95       	ret

00000a10 <Motor_Right>:
}
void Motor_Right(void)
{
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_HIGH);
     a10:	41 e0       	ldi	r20, 0x01	; 1
     a12:	64 e0       	ldi	r22, 0x04	; 4
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_LOW);
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	63 e0       	ldi	r22, 0x03	; 3
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_HIGH);
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	65 e0       	ldi	r22, 0x05	; 5
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_LOW);
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	66 e0       	ldi	r22, 0x06	; 6
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     a38:	08 95       	ret

00000a3a <Motor_Stop>:
}
void Motor_Stop(void)
{
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN1,DIO_PIN_LOW);
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	64 e0       	ldi	r22, 0x04	; 4
     a3e:	82 e0       	ldi	r24, 0x02	; 2
     a40:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR1_PIN0,DIO_PIN_LOW);
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	63 e0       	ldi	r22, 0x03	; 3
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN0,DIO_PIN_LOW);
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	65 e0       	ldi	r22, 0x05	; 5
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	DIO_SetPinVal(MOTOR_PORT,MOTOR2_PIN1,DIO_PIN_LOW);
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	66 e0       	ldi	r22, 0x06	; 6
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
     a62:	08 95       	ret

00000a64 <ServoInit>:
 */ 
#include "Servo.h"

void ServoInit(void)
{
  DDRC = 0x01; //RC0 output pin
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	84 bb       	out	0x14, r24	; 20
  PORTC = 0x00;
     a68:	15 ba       	out	0x15, r1	; 21
     a6a:	08 95       	ret

00000a6c <ServoGoToAngle>:
}
void ServoGoToAngle(Sint8 Angle)
{
	if (Angle == 90)
     a6c:	8a 35       	cpi	r24, 0x5A	; 90
     a6e:	99 f4       	brne	.+38     	; 0xa96 <ServoGoToAngle+0x2a>
	{
		PORTC = 0x01;         //Rotation to 0 degree
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a74:	8f e9       	ldi	r24, 0x9F	; 159
     a76:	9f e0       	ldi	r25, 0x0F	; 15
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <ServoGoToAngle+0xc>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <ServoGoToAngle+0x12>
     a7e:	00 00       	nop
		_delay_us(1000);      //Rotation to 0 degree
		PORTC = 0x00;         //Rotation to 0 degree
     a80:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	29 e6       	ldi	r18, 0x69	; 105
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	91 50       	subi	r25, 0x01	; 1
     a8a:	20 40       	sbci	r18, 0x00	; 0
     a8c:	80 40       	sbci	r24, 0x00	; 0
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <ServoGoToAngle+0x1c>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <ServoGoToAngle+0x26>
     a92:	00 00       	nop
     a94:	08 95       	ret
		_delay_ms(500);
	} 
	else if (Angle == 0)
     a96:	81 11       	cpse	r24, r1
     a98:	13 c0       	rjmp	.+38     	; 0xac0 <ServoGoToAngle+0x54>
	{
		PORTC = 0x01;         //Rotation to 90 degree
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a9e:	8f e6       	ldi	r24, 0x6F	; 111
     aa0:	97 e1       	ldi	r25, 0x17	; 23
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <ServoGoToAngle+0x36>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <ServoGoToAngle+0x3c>
     aa8:	00 00       	nop
		_delay_us(1500);      //Rotation to 90 degree
		PORTC = 0x00;         //Rotation to 90 degree
     aaa:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aac:	9f ef       	ldi	r25, 0xFF	; 255
     aae:	29 e6       	ldi	r18, 0x69	; 105
     ab0:	88 e1       	ldi	r24, 0x18	; 24
     ab2:	91 50       	subi	r25, 0x01	; 1
     ab4:	20 40       	sbci	r18, 0x00	; 0
     ab6:	80 40       	sbci	r24, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <ServoGoToAngle+0x46>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <ServoGoToAngle+0x50>
     abc:	00 00       	nop
     abe:	08 95       	ret
		_delay_ms(500);
	}
	else if (Angle == -90)
     ac0:	86 3a       	cpi	r24, 0xA6	; 166
     ac2:	91 f4       	brne	.+36     	; 0xae8 <ServoGoToAngle+0x7c>
	{
		PORTC = 0x01;         //Rotation to 180 degree
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ac8:	8f e3       	ldi	r24, 0x3F	; 63
     aca:	9f e1       	ldi	r25, 0x1F	; 31
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	f1 f7       	brne	.-4      	; 0xacc <ServoGoToAngle+0x60>
     ad0:	00 c0       	rjmp	.+0      	; 0xad2 <ServoGoToAngle+0x66>
     ad2:	00 00       	nop
		_delay_us(2000);      //Rotation to 180 degree
		PORTC = 0x00;         //Rotation to 180 degree
     ad4:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	29 e6       	ldi	r18, 0x69	; 105
     ada:	88 e1       	ldi	r24, 0x18	; 24
     adc:	91 50       	subi	r25, 0x01	; 1
     ade:	20 40       	sbci	r18, 0x00	; 0
     ae0:	80 40       	sbci	r24, 0x00	; 0
     ae2:	e1 f7       	brne	.-8      	; 0xadc <ServoGoToAngle+0x70>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <ServoGoToAngle+0x7a>
     ae6:	00 00       	nop
     ae8:	08 95       	ret

00000aea <Timer_Init>:
		{
			set_bit(TIMSK,3);
		}
		else if (TimerC -> TimerInterruptSelect == TIMER1_Overflow_Interrupt_Enable)
		{
			set_bit(TIMSK,2);
     aea:	fc 01       	movw	r30, r24
     aec:	9f b7       	in	r25, 0x3f	; 63
     aee:	90 68       	ori	r25, 0x80	; 128
     af0:	9f bf       	out	0x3f, r25	; 63
     af2:	80 81       	ld	r24, Z
     af4:	81 11       	cpse	r24, r1
     af6:	98 c0       	rjmp	.+304    	; 0xc28 <Timer_Init+0x13e>
     af8:	81 81       	ldd	r24, Z+1	; 0x01
     afa:	81 11       	cpse	r24, r1
     afc:	0a c0       	rjmp	.+20     	; 0xb12 <Timer_Init+0x28>
     afe:	89 b7       	in	r24, 0x39	; 57
     b00:	81 60       	ori	r24, 0x01	; 1
     b02:	89 bf       	out	0x39, r24	; 57
     b04:	83 b7       	in	r24, 0x33	; 51
     b06:	87 7f       	andi	r24, 0xF7	; 247
     b08:	83 bf       	out	0x33, r24	; 51
     b0a:	83 b7       	in	r24, 0x33	; 51
     b0c:	8f 7b       	andi	r24, 0xBF	; 191
     b0e:	83 bf       	out	0x33, r24	; 51
     b10:	08 95       	ret
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	61 f5       	brne	.+88     	; 0xb6e <Timer_Init+0x84>
     b16:	83 b7       	in	r24, 0x33	; 51
     b18:	88 60       	ori	r24, 0x08	; 8
     b1a:	83 bf       	out	0x33, r24	; 51
     b1c:	83 b7       	in	r24, 0x33	; 51
     b1e:	8f 7b       	andi	r24, 0xBF	; 191
     b20:	83 bf       	out	0x33, r24	; 51
     b22:	80 85       	ldd	r24, Z+8	; 0x08
     b24:	81 11       	cpse	r24, r1
     b26:	07 c0       	rjmp	.+14     	; 0xb36 <Timer_Init+0x4c>
     b28:	83 b7       	in	r24, 0x33	; 51
     b2a:	8f 7e       	andi	r24, 0xEF	; 239
     b2c:	83 bf       	out	0x33, r24	; 51
     b2e:	83 b7       	in	r24, 0x33	; 51
     b30:	8f 7d       	andi	r24, 0xDF	; 223
     b32:	83 bf       	out	0x33, r24	; 51
     b34:	08 95       	ret
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	39 f4       	brne	.+14     	; 0xb48 <Timer_Init+0x5e>
     b3a:	83 b7       	in	r24, 0x33	; 51
     b3c:	80 61       	ori	r24, 0x10	; 16
     b3e:	83 bf       	out	0x33, r24	; 51
     b40:	83 b7       	in	r24, 0x33	; 51
     b42:	8f 7d       	andi	r24, 0xDF	; 223
     b44:	83 bf       	out	0x33, r24	; 51
     b46:	08 95       	ret
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	39 f4       	brne	.+14     	; 0xb5a <Timer_Init+0x70>
     b4c:	83 b7       	in	r24, 0x33	; 51
     b4e:	80 62       	ori	r24, 0x20	; 32
     b50:	83 bf       	out	0x33, r24	; 51
     b52:	83 b7       	in	r24, 0x33	; 51
     b54:	8f 7e       	andi	r24, 0xEF	; 239
     b56:	83 bf       	out	0x33, r24	; 51
     b58:	08 95       	ret
     b5a:	83 30       	cpi	r24, 0x03	; 3
     b5c:	09 f0       	breq	.+2      	; 0xb60 <Timer_Init+0x76>
     b5e:	27 c1       	rjmp	.+590    	; 0xdae <Timer_Init+0x2c4>
     b60:	83 b7       	in	r24, 0x33	; 51
     b62:	80 61       	ori	r24, 0x10	; 16
     b64:	83 bf       	out	0x33, r24	; 51
     b66:	83 b7       	in	r24, 0x33	; 51
     b68:	80 62       	ori	r24, 0x20	; 32
     b6a:	83 bf       	out	0x33, r24	; 51
     b6c:	08 95       	ret
     b6e:	82 30       	cpi	r24, 0x02	; 2
     b70:	61 f5       	brne	.+88     	; 0xbca <Timer_Init+0xe0>
     b72:	83 b7       	in	r24, 0x33	; 51
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	83 bf       	out	0x33, r24	; 51
     b78:	83 b7       	in	r24, 0x33	; 51
     b7a:	87 7f       	andi	r24, 0xF7	; 247
     b7c:	83 bf       	out	0x33, r24	; 51
     b7e:	80 85       	ldd	r24, Z+8	; 0x08
     b80:	81 11       	cpse	r24, r1
     b82:	07 c0       	rjmp	.+14     	; 0xb92 <Timer_Init+0xa8>
     b84:	83 b7       	in	r24, 0x33	; 51
     b86:	8f 7e       	andi	r24, 0xEF	; 239
     b88:	83 bf       	out	0x33, r24	; 51
     b8a:	83 b7       	in	r24, 0x33	; 51
     b8c:	8f 7d       	andi	r24, 0xDF	; 223
     b8e:	83 bf       	out	0x33, r24	; 51
     b90:	08 95       	ret
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	39 f4       	brne	.+14     	; 0xba4 <Timer_Init+0xba>
     b96:	83 b7       	in	r24, 0x33	; 51
     b98:	80 61       	ori	r24, 0x10	; 16
     b9a:	83 bf       	out	0x33, r24	; 51
     b9c:	83 b7       	in	r24, 0x33	; 51
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	83 bf       	out	0x33, r24	; 51
     ba2:	08 95       	ret
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	39 f4       	brne	.+14     	; 0xbb6 <Timer_Init+0xcc>
     ba8:	83 b7       	in	r24, 0x33	; 51
     baa:	80 62       	ori	r24, 0x20	; 32
     bac:	83 bf       	out	0x33, r24	; 51
     bae:	83 b7       	in	r24, 0x33	; 51
     bb0:	8f 7e       	andi	r24, 0xEF	; 239
     bb2:	83 bf       	out	0x33, r24	; 51
     bb4:	08 95       	ret
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	09 f0       	breq	.+2      	; 0xbbc <Timer_Init+0xd2>
     bba:	f9 c0       	rjmp	.+498    	; 0xdae <Timer_Init+0x2c4>
     bbc:	83 b7       	in	r24, 0x33	; 51
     bbe:	80 61       	ori	r24, 0x10	; 16
     bc0:	83 bf       	out	0x33, r24	; 51
     bc2:	83 b7       	in	r24, 0x33	; 51
     bc4:	80 62       	ori	r24, 0x20	; 32
     bc6:	83 bf       	out	0x33, r24	; 51
     bc8:	08 95       	ret
     bca:	83 30       	cpi	r24, 0x03	; 3
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <Timer_Init+0xe6>
     bce:	ef c0       	rjmp	.+478    	; 0xdae <Timer_Init+0x2c4>
     bd0:	83 b7       	in	r24, 0x33	; 51
     bd2:	88 60       	ori	r24, 0x08	; 8
     bd4:	83 bf       	out	0x33, r24	; 51
     bd6:	83 b7       	in	r24, 0x33	; 51
     bd8:	80 64       	ori	r24, 0x40	; 64
     bda:	83 bf       	out	0x33, r24	; 51
     bdc:	81 85       	ldd	r24, Z+9	; 0x09
     bde:	81 11       	cpse	r24, r1
     be0:	07 c0       	rjmp	.+14     	; 0xbf0 <Timer_Init+0x106>
     be2:	83 b7       	in	r24, 0x33	; 51
     be4:	8f 7e       	andi	r24, 0xEF	; 239
     be6:	83 bf       	out	0x33, r24	; 51
     be8:	83 b7       	in	r24, 0x33	; 51
     bea:	8f 7d       	andi	r24, 0xDF	; 223
     bec:	83 bf       	out	0x33, r24	; 51
     bee:	08 95       	ret
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	39 f4       	brne	.+14     	; 0xc02 <Timer_Init+0x118>
     bf4:	83 b7       	in	r24, 0x33	; 51
     bf6:	80 61       	ori	r24, 0x10	; 16
     bf8:	83 bf       	out	0x33, r24	; 51
     bfa:	83 b7       	in	r24, 0x33	; 51
     bfc:	8f 7d       	andi	r24, 0xDF	; 223
     bfe:	83 bf       	out	0x33, r24	; 51
     c00:	08 95       	ret
     c02:	82 30       	cpi	r24, 0x02	; 2
     c04:	39 f4       	brne	.+14     	; 0xc14 <Timer_Init+0x12a>
     c06:	83 b7       	in	r24, 0x33	; 51
     c08:	80 62       	ori	r24, 0x20	; 32
     c0a:	83 bf       	out	0x33, r24	; 51
     c0c:	83 b7       	in	r24, 0x33	; 51
     c0e:	8f 7e       	andi	r24, 0xEF	; 239
     c10:	83 bf       	out	0x33, r24	; 51
     c12:	08 95       	ret
     c14:	83 30       	cpi	r24, 0x03	; 3
     c16:	09 f0       	breq	.+2      	; 0xc1a <Timer_Init+0x130>
     c18:	ca c0       	rjmp	.+404    	; 0xdae <Timer_Init+0x2c4>
     c1a:	83 b7       	in	r24, 0x33	; 51
     c1c:	80 61       	ori	r24, 0x10	; 16
     c1e:	83 bf       	out	0x33, r24	; 51
     c20:	83 b7       	in	r24, 0x33	; 51
     c22:	80 62       	ori	r24, 0x20	; 32
     c24:	83 bf       	out	0x33, r24	; 51
     c26:	08 95       	ret
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	09 f0       	breq	.+2      	; 0xc2e <Timer_Init+0x144>
     c2c:	c0 c0       	rjmp	.+384    	; 0xdae <Timer_Init+0x2c4>
     c2e:	81 81       	ldd	r24, Z+1	; 0x01
     c30:	81 11       	cpse	r24, r1
     c32:	05 c0       	rjmp	.+10     	; 0xc3e <Timer_Init+0x154>
     c34:	89 b7       	in	r24, 0x39	; 57
     c36:	84 60       	ori	r24, 0x04	; 4
     c38:	89 bf       	out	0x39, r24	; 57
     c3a:	1f bc       	out	0x2f, r1	; 47
     c3c:	08 95       	ret
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	21 f4       	brne	.+8      	; 0xc4a <Timer_Init+0x160>
     c42:	89 b7       	in	r24, 0x39	; 57
     c44:	80 62       	ori	r24, 0x20	; 32
     c46:	89 bf       	out	0x39, r24	; 57
     c48:	08 95       	ret
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	09 f0       	breq	.+2      	; 0xc50 <Timer_Init+0x166>
     c4e:	55 c0       	rjmp	.+170    	; 0xcfa <Timer_Init+0x210>
     c50:	8f b5       	in	r24, 0x2f	; 47
     c52:	81 60       	ori	r24, 0x01	; 1
     c54:	8f bd       	out	0x2f, r24	; 47
     c56:	80 85       	ldd	r24, Z+8	; 0x08
     c58:	81 11       	cpse	r24, r1
     c5a:	26 c0       	rjmp	.+76     	; 0xca8 <Timer_Init+0x1be>
     c5c:	81 85       	ldd	r24, Z+9	; 0x09
     c5e:	81 11       	cpse	r24, r1
     c60:	07 c0       	rjmp	.+14     	; 0xc70 <Timer_Init+0x186>
     c62:	8f b5       	in	r24, 0x2f	; 47
     c64:	8f 7e       	andi	r24, 0xEF	; 239
     c66:	8f bd       	out	0x2f, r24	; 47
     c68:	8f b5       	in	r24, 0x2f	; 47
     c6a:	8f 7d       	andi	r24, 0xDF	; 223
     c6c:	8f bd       	out	0x2f, r24	; 47
     c6e:	08 95       	ret
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	39 f4       	brne	.+14     	; 0xc82 <Timer_Init+0x198>
     c74:	8f b5       	in	r24, 0x2f	; 47
     c76:	80 61       	ori	r24, 0x10	; 16
     c78:	8f bd       	out	0x2f, r24	; 47
     c7a:	8f b5       	in	r24, 0x2f	; 47
     c7c:	8f 7d       	andi	r24, 0xDF	; 223
     c7e:	8f bd       	out	0x2f, r24	; 47
     c80:	08 95       	ret
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	39 f4       	brne	.+14     	; 0xc94 <Timer_Init+0x1aa>
     c86:	8f b5       	in	r24, 0x2f	; 47
     c88:	80 62       	ori	r24, 0x20	; 32
     c8a:	8f bd       	out	0x2f, r24	; 47
     c8c:	8f b5       	in	r24, 0x2f	; 47
     c8e:	8f 7e       	andi	r24, 0xEF	; 239
     c90:	8f bd       	out	0x2f, r24	; 47
     c92:	08 95       	ret
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	09 f0       	breq	.+2      	; 0xc9a <Timer_Init+0x1b0>
     c98:	8a c0       	rjmp	.+276    	; 0xdae <Timer_Init+0x2c4>
     c9a:	8f b5       	in	r24, 0x2f	; 47
     c9c:	80 61       	ori	r24, 0x10	; 16
     c9e:	8f bd       	out	0x2f, r24	; 47
     ca0:	8f b5       	in	r24, 0x2f	; 47
     ca2:	80 62       	ori	r24, 0x20	; 32
     ca4:	8f bd       	out	0x2f, r24	; 47
     ca6:	08 95       	ret
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	09 f0       	breq	.+2      	; 0xcae <Timer_Init+0x1c4>
     cac:	80 c0       	rjmp	.+256    	; 0xdae <Timer_Init+0x2c4>
     cae:	81 85       	ldd	r24, Z+9	; 0x09
     cb0:	81 11       	cpse	r24, r1
     cb2:	07 c0       	rjmp	.+14     	; 0xcc2 <Timer_Init+0x1d8>
     cb4:	8f b5       	in	r24, 0x2f	; 47
     cb6:	8f 7b       	andi	r24, 0xBF	; 191
     cb8:	8f bd       	out	0x2f, r24	; 47
     cba:	8f b5       	in	r24, 0x2f	; 47
     cbc:	8f 77       	andi	r24, 0x7F	; 127
     cbe:	8f bd       	out	0x2f, r24	; 47
     cc0:	08 95       	ret
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	39 f4       	brne	.+14     	; 0xcd4 <Timer_Init+0x1ea>
     cc6:	8f b5       	in	r24, 0x2f	; 47
     cc8:	80 64       	ori	r24, 0x40	; 64
     cca:	8f bd       	out	0x2f, r24	; 47
     ccc:	8f b5       	in	r24, 0x2f	; 47
     cce:	8f 77       	andi	r24, 0x7F	; 127
     cd0:	8f bd       	out	0x2f, r24	; 47
     cd2:	08 95       	ret
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	39 f4       	brne	.+14     	; 0xce6 <Timer_Init+0x1fc>
     cd8:	8f b5       	in	r24, 0x2f	; 47
     cda:	80 68       	ori	r24, 0x80	; 128
     cdc:	8f bd       	out	0x2f, r24	; 47
     cde:	8f b5       	in	r24, 0x2f	; 47
     ce0:	8f 7b       	andi	r24, 0xBF	; 191
     ce2:	8f bd       	out	0x2f, r24	; 47
     ce4:	08 95       	ret
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	09 f0       	breq	.+2      	; 0xcec <Timer_Init+0x202>
     cea:	61 c0       	rjmp	.+194    	; 0xdae <Timer_Init+0x2c4>
     cec:	8f b5       	in	r24, 0x2f	; 47
     cee:	80 64       	ori	r24, 0x40	; 64
     cf0:	8f bd       	out	0x2f, r24	; 47
     cf2:	8f b5       	in	r24, 0x2f	; 47
     cf4:	80 68       	ori	r24, 0x80	; 128
     cf6:	8f bd       	out	0x2f, r24	; 47
     cf8:	08 95       	ret
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	09 f0       	breq	.+2      	; 0xd00 <Timer_Init+0x216>
     cfe:	57 c0       	rjmp	.+174    	; 0xdae <Timer_Init+0x2c4>
     d00:	8f b5       	in	r24, 0x2f	; 47
     d02:	81 60       	ori	r24, 0x01	; 1
     d04:	8f bd       	out	0x2f, r24	; 47
     d06:	8f b5       	in	r24, 0x2f	; 47
     d08:	8d 7f       	andi	r24, 0xFD	; 253
     d0a:	8f bd       	out	0x2f, r24	; 47
     d0c:	8e b5       	in	r24, 0x2e	; 46
     d0e:	88 60       	ori	r24, 0x08	; 8
     d10:	8e bd       	out	0x2e, r24	; 46
     d12:	80 85       	ldd	r24, Z+8	; 0x08
     d14:	81 11       	cpse	r24, r1
     d16:	25 c0       	rjmp	.+74     	; 0xd62 <Timer_Init+0x278>
     d18:	81 85       	ldd	r24, Z+9	; 0x09
     d1a:	81 11       	cpse	r24, r1
     d1c:	07 c0       	rjmp	.+14     	; 0xd2c <Timer_Init+0x242>
     d1e:	8f b5       	in	r24, 0x2f	; 47
     d20:	8f 7e       	andi	r24, 0xEF	; 239
     d22:	8f bd       	out	0x2f, r24	; 47
     d24:	8f b5       	in	r24, 0x2f	; 47
     d26:	8f 7d       	andi	r24, 0xDF	; 223
     d28:	8f bd       	out	0x2f, r24	; 47
     d2a:	08 95       	ret
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	39 f4       	brne	.+14     	; 0xd3e <Timer_Init+0x254>
     d30:	8f b5       	in	r24, 0x2f	; 47
     d32:	80 61       	ori	r24, 0x10	; 16
     d34:	8f bd       	out	0x2f, r24	; 47
     d36:	8f b5       	in	r24, 0x2f	; 47
     d38:	8f 7d       	andi	r24, 0xDF	; 223
     d3a:	8f bd       	out	0x2f, r24	; 47
     d3c:	08 95       	ret
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	39 f4       	brne	.+14     	; 0xd50 <Timer_Init+0x266>
     d42:	8f b5       	in	r24, 0x2f	; 47
     d44:	80 62       	ori	r24, 0x20	; 32
     d46:	8f bd       	out	0x2f, r24	; 47
     d48:	8f b5       	in	r24, 0x2f	; 47
     d4a:	8f 7e       	andi	r24, 0xEF	; 239
     d4c:	8f bd       	out	0x2f, r24	; 47
     d4e:	08 95       	ret
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	69 f5       	brne	.+90     	; 0xdae <Timer_Init+0x2c4>
     d54:	8f b5       	in	r24, 0x2f	; 47
     d56:	80 61       	ori	r24, 0x10	; 16
     d58:	8f bd       	out	0x2f, r24	; 47
     d5a:	8f b5       	in	r24, 0x2f	; 47
     d5c:	80 62       	ori	r24, 0x20	; 32
     d5e:	8f bd       	out	0x2f, r24	; 47
     d60:	08 95       	ret
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	21 f5       	brne	.+72     	; 0xdae <Timer_Init+0x2c4>
     d66:	81 85       	ldd	r24, Z+9	; 0x09
     d68:	81 11       	cpse	r24, r1
     d6a:	07 c0       	rjmp	.+14     	; 0xd7a <Timer_Init+0x290>
     d6c:	8f b5       	in	r24, 0x2f	; 47
     d6e:	8f 7b       	andi	r24, 0xBF	; 191
     d70:	8f bd       	out	0x2f, r24	; 47
     d72:	8f b5       	in	r24, 0x2f	; 47
     d74:	8f 77       	andi	r24, 0x7F	; 127
     d76:	8f bd       	out	0x2f, r24	; 47
     d78:	08 95       	ret
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	39 f4       	brne	.+14     	; 0xd8c <Timer_Init+0x2a2>
     d7e:	8f b5       	in	r24, 0x2f	; 47
     d80:	80 64       	ori	r24, 0x40	; 64
     d82:	8f bd       	out	0x2f, r24	; 47
     d84:	8f b5       	in	r24, 0x2f	; 47
     d86:	8f 77       	andi	r24, 0x7F	; 127
     d88:	8f bd       	out	0x2f, r24	; 47
     d8a:	08 95       	ret
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	39 f4       	brne	.+14     	; 0xd9e <Timer_Init+0x2b4>
     d90:	8f b5       	in	r24, 0x2f	; 47
     d92:	80 68       	ori	r24, 0x80	; 128
     d94:	8f bd       	out	0x2f, r24	; 47
     d96:	8f b5       	in	r24, 0x2f	; 47
     d98:	8f 7b       	andi	r24, 0xBF	; 191
     d9a:	8f bd       	out	0x2f, r24	; 47
     d9c:	08 95       	ret
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	31 f4       	brne	.+12     	; 0xdae <Timer_Init+0x2c4>
     da2:	8f b5       	in	r24, 0x2f	; 47
     da4:	80 64       	ori	r24, 0x40	; 64
     da6:	8f bd       	out	0x2f, r24	; 47
     da8:	8f b5       	in	r24, 0x2f	; 47
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	8f bd       	out	0x2f, r24	; 47
     dae:	08 95       	ret

00000db0 <Timer_Start>:
     db0:	fc 01       	movw	r30, r24
     db2:	20 81       	ld	r18, Z
     db4:	21 11       	cpse	r18, r1
     db6:	45 c0       	rjmp	.+138    	; 0xe42 <Timer_Start+0x92>
     db8:	82 81       	ldd	r24, Z+2	; 0x02
     dba:	93 81       	ldd	r25, Z+3	; 0x03
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	91 05       	cpc	r25, r1
     dc0:	51 f4       	brne	.+20     	; 0xdd6 <Timer_Start+0x26>
     dc2:	83 b7       	in	r24, 0x33	; 51
     dc4:	81 60       	ori	r24, 0x01	; 1
     dc6:	83 bf       	out	0x33, r24	; 51
     dc8:	83 b7       	in	r24, 0x33	; 51
     dca:	8d 7f       	andi	r24, 0xFD	; 253
     dcc:	83 bf       	out	0x33, r24	; 51
     dce:	83 b7       	in	r24, 0x33	; 51
     dd0:	8b 7f       	andi	r24, 0xFB	; 251
     dd2:	83 bf       	out	0x33, r24	; 51
     dd4:	08 95       	ret
     dd6:	88 30       	cpi	r24, 0x08	; 8
     dd8:	91 05       	cpc	r25, r1
     dda:	51 f4       	brne	.+20     	; 0xdf0 <Timer_Start+0x40>
     ddc:	83 b7       	in	r24, 0x33	; 51
     dde:	8e 7f       	andi	r24, 0xFE	; 254
     de0:	83 bf       	out	0x33, r24	; 51
     de2:	83 b7       	in	r24, 0x33	; 51
     de4:	82 60       	ori	r24, 0x02	; 2
     de6:	83 bf       	out	0x33, r24	; 51
     de8:	83 b7       	in	r24, 0x33	; 51
     dea:	8b 7f       	andi	r24, 0xFB	; 251
     dec:	83 bf       	out	0x33, r24	; 51
     dee:	08 95       	ret
     df0:	80 34       	cpi	r24, 0x40	; 64
     df2:	91 05       	cpc	r25, r1
     df4:	51 f4       	brne	.+20     	; 0xe0a <Timer_Start+0x5a>
     df6:	83 b7       	in	r24, 0x33	; 51
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	83 bf       	out	0x33, r24	; 51
     dfc:	83 b7       	in	r24, 0x33	; 51
     dfe:	82 60       	ori	r24, 0x02	; 2
     e00:	83 bf       	out	0x33, r24	; 51
     e02:	83 b7       	in	r24, 0x33	; 51
     e04:	8b 7f       	andi	r24, 0xFB	; 251
     e06:	83 bf       	out	0x33, r24	; 51
     e08:	08 95       	ret
     e0a:	81 15       	cp	r24, r1
     e0c:	f1 e0       	ldi	r31, 0x01	; 1
     e0e:	9f 07       	cpc	r25, r31
     e10:	51 f4       	brne	.+20     	; 0xe26 <Timer_Start+0x76>
     e12:	83 b7       	in	r24, 0x33	; 51
     e14:	8e 7f       	andi	r24, 0xFE	; 254
     e16:	83 bf       	out	0x33, r24	; 51
     e18:	83 b7       	in	r24, 0x33	; 51
     e1a:	8d 7f       	andi	r24, 0xFD	; 253
     e1c:	83 bf       	out	0x33, r24	; 51
     e1e:	83 b7       	in	r24, 0x33	; 51
     e20:	84 60       	ori	r24, 0x04	; 4
     e22:	83 bf       	out	0x33, r24	; 51
     e24:	08 95       	ret
     e26:	81 15       	cp	r24, r1
     e28:	94 40       	sbci	r25, 0x04	; 4
     e2a:	09 f0       	breq	.+2      	; 0xe2e <Timer_Start+0x7e>
     e2c:	51 c0       	rjmp	.+162    	; 0xed0 <Timer_Start+0x120>
     e2e:	83 b7       	in	r24, 0x33	; 51
     e30:	81 60       	ori	r24, 0x01	; 1
     e32:	83 bf       	out	0x33, r24	; 51
     e34:	83 b7       	in	r24, 0x33	; 51
     e36:	8d 7f       	andi	r24, 0xFD	; 253
     e38:	83 bf       	out	0x33, r24	; 51
     e3a:	83 b7       	in	r24, 0x33	; 51
     e3c:	84 60       	ori	r24, 0x04	; 4
     e3e:	83 bf       	out	0x33, r24	; 51
     e40:	08 95       	ret
     e42:	21 30       	cpi	r18, 0x01	; 1
     e44:	09 f0       	breq	.+2      	; 0xe48 <Timer_Start+0x98>
     e46:	44 c0       	rjmp	.+136    	; 0xed0 <Timer_Start+0x120>
     e48:	fc 01       	movw	r30, r24
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	91 05       	cpc	r25, r1
     e52:	51 f4       	brne	.+20     	; 0xe68 <Timer_Start+0xb8>
     e54:	8e b5       	in	r24, 0x2e	; 46
     e56:	81 60       	ori	r24, 0x01	; 1
     e58:	8e bd       	out	0x2e, r24	; 46
     e5a:	8e b5       	in	r24, 0x2e	; 46
     e5c:	8d 7f       	andi	r24, 0xFD	; 253
     e5e:	8e bd       	out	0x2e, r24	; 46
     e60:	8e b5       	in	r24, 0x2e	; 46
     e62:	8b 7f       	andi	r24, 0xFB	; 251
     e64:	8e bd       	out	0x2e, r24	; 46
     e66:	08 95       	ret
     e68:	88 30       	cpi	r24, 0x08	; 8
     e6a:	91 05       	cpc	r25, r1
     e6c:	51 f4       	brne	.+20     	; 0xe82 <Timer_Start+0xd2>
     e6e:	8e b5       	in	r24, 0x2e	; 46
     e70:	8e 7f       	andi	r24, 0xFE	; 254
     e72:	8e bd       	out	0x2e, r24	; 46
     e74:	8e b5       	in	r24, 0x2e	; 46
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	8e bd       	out	0x2e, r24	; 46
     e7a:	8e b5       	in	r24, 0x2e	; 46
     e7c:	8b 7f       	andi	r24, 0xFB	; 251
     e7e:	8e bd       	out	0x2e, r24	; 46
     e80:	08 95       	ret
     e82:	80 34       	cpi	r24, 0x40	; 64
     e84:	91 05       	cpc	r25, r1
     e86:	51 f4       	brne	.+20     	; 0xe9c <Timer_Start+0xec>
     e88:	8e b5       	in	r24, 0x2e	; 46
     e8a:	81 60       	ori	r24, 0x01	; 1
     e8c:	8e bd       	out	0x2e, r24	; 46
     e8e:	8e b5       	in	r24, 0x2e	; 46
     e90:	82 60       	ori	r24, 0x02	; 2
     e92:	8e bd       	out	0x2e, r24	; 46
     e94:	8e b5       	in	r24, 0x2e	; 46
     e96:	8b 7f       	andi	r24, 0xFB	; 251
     e98:	8e bd       	out	0x2e, r24	; 46
     e9a:	08 95       	ret
     e9c:	81 15       	cp	r24, r1
     e9e:	f1 e0       	ldi	r31, 0x01	; 1
     ea0:	9f 07       	cpc	r25, r31
     ea2:	51 f4       	brne	.+20     	; 0xeb8 <Timer_Start+0x108>
     ea4:	8e b5       	in	r24, 0x2e	; 46
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	8e bd       	out	0x2e, r24	; 46
     eaa:	8e b5       	in	r24, 0x2e	; 46
     eac:	8d 7f       	andi	r24, 0xFD	; 253
     eae:	8e bd       	out	0x2e, r24	; 46
     eb0:	8e b5       	in	r24, 0x2e	; 46
     eb2:	84 60       	ori	r24, 0x04	; 4
     eb4:	8e bd       	out	0x2e, r24	; 46
     eb6:	08 95       	ret
     eb8:	81 15       	cp	r24, r1
     eba:	94 40       	sbci	r25, 0x04	; 4
     ebc:	49 f4       	brne	.+18     	; 0xed0 <Timer_Start+0x120>
     ebe:	8e b5       	in	r24, 0x2e	; 46
     ec0:	81 60       	ori	r24, 0x01	; 1
     ec2:	8e bd       	out	0x2e, r24	; 46
     ec4:	8e b5       	in	r24, 0x2e	; 46
     ec6:	8d 7f       	andi	r24, 0xFD	; 253
     ec8:	8e bd       	out	0x2e, r24	; 46
     eca:	8e b5       	in	r24, 0x2e	; 46
     ecc:	84 60       	ori	r24, 0x04	; 4
     ece:	8e bd       	out	0x2e, r24	; 46
     ed0:	08 95       	ret

00000ed2 <Timer_SetRisingFallingEdge>:
	} 

}
void Timer_SetRisingFallingEdge(TimerControl* TimerC,Uint8 Rising_Falling)
{
	if (TimerC -> TimerSelect == TIMER1)
     ed2:	fc 01       	movw	r30, r24
     ed4:	80 81       	ld	r24, Z
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	51 f4       	brne	.+20     	; 0xeee <Timer_SetRisingFallingEdge+0x1c>
	{
		set_bit(TCCR1B,Rising_Falling);	
     eda:	2e b5       	in	r18, 0x2e	; 46
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <Timer_SetRisingFallingEdge+0x14>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	6a 95       	dec	r22
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <Timer_SetRisingFallingEdge+0x10>
     eea:	82 2b       	or	r24, r18
     eec:	8e bd       	out	0x2e, r24	; 46
     eee:	08 95       	ret

00000ef0 <Timer_ClearFlage>:

}

void Timer_ClearFlage(TimerControl* TimerC,Uint8 Flag)
{
	if (TimerC -> TimerSelect == TIMER1)
     ef0:	fc 01       	movw	r30, r24
     ef2:	80 81       	ld	r24, Z
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	59 f4       	brne	.+22     	; 0xf0e <Timer_ClearFlage+0x1e>
	{
		if (Flag == TIMER_ICP_FALG)
     ef8:	61 30       	cpi	r22, 0x01	; 1
     efa:	21 f4       	brne	.+8      	; 0xf04 <Timer_ClearFlage+0x14>
		{
			set_bit(TIFR ,5);
     efc:	88 b7       	in	r24, 0x38	; 56
     efe:	80 62       	ori	r24, 0x20	; 32
     f00:	88 bf       	out	0x38, r24	; 56
     f02:	08 95       	ret
		}
		else if (Flag == TIMER_OVERFLOW_FALG)
     f04:	62 30       	cpi	r22, 0x02	; 2
     f06:	19 f4       	brne	.+6      	; 0xf0e <Timer_ClearFlage+0x1e>
		{
			set_bit(TIFR ,2);
     f08:	88 b7       	in	r24, 0x38	; 56
     f0a:	84 60       	ori	r24, 0x04	; 4
     f0c:	88 bf       	out	0x38, r24	; 56
     f0e:	08 95       	ret

00000f10 <UltraSonic_init>:
Uint8 TimerOverflow = 0;

TimerControl UltraSonicTimer;

void UltraSonic_init(void){
	UltraSonicTimer.TimerSelect = TIMER1;
     f10:	e7 ef       	ldi	r30, 0xF7	; 247
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 83       	st	Z, r24
	UltraSonicTimer.TimerMode = TIMER_NORMAL_MODE;
     f18:	11 82       	std	Z+1, r1	; 0x01
	UltraSonicTimer.TimerInterruptSelect = TIMER1_Input_Capture_Interrupt_En;
     f1a:	82 87       	std	Z+10, r24	; 0x0a
	UltraSonicTimer.TimerPrescaler = TimerPrescaler_0;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	93 83       	std	Z+3, r25	; 0x03
     f22:	82 83       	std	Z+2, r24	; 0x02
	DIO_SetPinDir(TRIGER_PORT,TRIGER,DIO_PIN_DIR_OUTPUT);
     f24:	41 e0       	ldi	r20, 0x01	; 1
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 72 00 	call	0xe4	; 0xe4 <DIO_SetPinDir>
     f2e:	08 95       	ret

00000f30 <UltraSonic_SetCaptureEdge>:
	Timer_ClearFlage(&UltraSonicTimer,TIMER_OVERFLOW_FALG);
}

void UltraSonic_SetCaptureEdge(Uint8 Rising_Falling){
	
	Timer_SetRisingFallingEdge(&UltraSonicTimer,Rising_Falling);
     f30:	68 2f       	mov	r22, r24
     f32:	87 ef       	ldi	r24, 0xF7	; 247
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 69 07 	call	0xed2	; 0xed2 <Timer_SetRisingFallingEdge>
     f3a:	08 95       	ret

00000f3c <UltraSonic_triger>:
	DIO_SetPinDir(TRIGER_PORT,TRIGER,DIO_PIN_DIR_OUTPUT);
}


void UltraSonic_triger(void){
	DIO_SetPinVal(TRIGER_PORT,TRIGER,DIO_PIN_HIGH);
     f3c:	41 e0       	ldi	r20, 0x01	; 1
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f46:	85 e3       	ldi	r24, 0x35	; 53
     f48:	8a 95       	dec	r24
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <UltraSonic_triger+0xc>
     f4c:	00 00       	nop
	_delay_us(10);
	DIO_SetPinVal(TRIGER_PORT,TRIGER,DIO_PIN_LOW);
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPinVal>
	TCNT1 = 0;	/* Clear Timer counter */
     f58:	1d bc       	out	0x2d, r1	; 45
     f5a:	1c bc       	out	0x2c, r1	; 44
	UltraSonic_SetCaptureEdge(TIMER_RISING_CAPTURE);
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	0e 94 98 07 	call	0xf30	; 0xf30 <UltraSonic_SetCaptureEdge>
	Timer_ClearFlage(&UltraSonicTimer,TIMER_ICP_FALG);
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	87 ef       	ldi	r24, 0xF7	; 247
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 78 07 	call	0xef0	; 0xef0 <Timer_ClearFlage>
	Timer_ClearFlage(&UltraSonicTimer,TIMER_OVERFLOW_FALG);
     f6c:	62 e0       	ldi	r22, 0x02	; 2
     f6e:	87 ef       	ldi	r24, 0xF7	; 247
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 78 07 	call	0xef0	; 0xef0 <Timer_ClearFlage>
     f76:	08 95       	ret

00000f78 <UltraSonic_Distance>:

Float64 UltraSonic_Distance(void)
{
	Uint8 count = 0;
	Uint8 distance = 0;
	UltraSonic_triger();
     f78:	0e 94 9e 07 	call	0xf3c	; 0xf3c <UltraSonic_triger>
	while ((TIFR & (1 << 5)) == 0);/* Wait for rising edge */
     f7c:	08 b6       	in	r0, 0x38	; 56
     f7e:	05 fe       	sbrs	r0, 5
     f80:	fd cf       	rjmp	.-6      	; 0xf7c <UltraSonic_Distance+0x4>
	TCNT1 = 0;	/* Clear Timer counter */
     f82:	1d bc       	out	0x2d, r1	; 45
     f84:	1c bc       	out	0x2c, r1	; 44
	UltraSonic_SetCaptureEdge(TIMER_FALLING_CAPTURE);
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 98 07 	call	0xf30	; 0xf30 <UltraSonic_SetCaptureEdge>
	Timer_ClearFlage(&UltraSonicTimer,TIMER_ICP_FALG);
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	87 ef       	ldi	r24, 0xF7	; 247
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 78 07 	call	0xef0	; 0xef0 <Timer_ClearFlage>
	Timer_ClearFlage(&UltraSonicTimer,TIMER_OVERFLOW_FALG);
     f96:	62 e0       	ldi	r22, 0x02	; 2
     f98:	87 ef       	ldi	r24, 0xF7	; 247
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 78 07 	call	0xef0	; 0xef0 <Timer_ClearFlage>
	TimerOverflow = 0;/* Clear Timer overflow count */
     fa0:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>

	while ((TIFR & (1 << 5)) == 0);/* Wait for falling edge */
     fa4:	08 b6       	in	r0, 0x38	; 56
     fa6:	05 fe       	sbrs	r0, 5
     fa8:	fd cf       	rjmp	.-6      	; 0xfa4 <UltraSonic_Distance+0x2c>
	count = ICR1 + (65535 * TimerOverflow);	/* Take count */
     faa:	66 b5       	in	r22, 0x26	; 38
     fac:	77 b5       	in	r23, 0x27	; 39
	/* 16MHz Timer freq, sound speed =343 m/s */
	distance = (double)count / 466.47;
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatunsisf>
     fb8:	29 e2       	ldi	r18, 0x29	; 41
     fba:	3c e3       	ldi	r19, 0x3C	; 60
     fbc:	49 ee       	ldi	r20, 0xE9	; 233
     fbe:	53 e4       	ldi	r21, 0x43	; 67
     fc0:	0e 94 fb 07 	call	0xff6	; 0xff6 <__divsf3>
     fc4:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixunssfsi>
	return distance;
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatunsisf>
}
     fd2:	08 95       	ret

00000fd4 <__vector_9>:
 

ISR(TIMER1_OVF_vect)
{
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	8f 93       	push	r24
	TimerOverflow++;	/* Increment Timer Overflow count */
     fe0:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
     fe4:	8f 5f       	subi	r24, 0xFF	; 255
     fe6:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
}
     fea:	8f 91       	pop	r24
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <__divsf3>:
     ff6:	0e 94 0f 08 	call	0x101e	; 0x101e <__divsf3x>
     ffa:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__fp_round>
     ffe:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fp_pscB>
    1002:	58 f0       	brcs	.+22     	; 0x101a <__divsf3+0x24>
    1004:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__fp_pscA>
    1008:	40 f0       	brcs	.+16     	; 0x101a <__divsf3+0x24>
    100a:	29 f4       	brne	.+10     	; 0x1016 <__divsf3+0x20>
    100c:	5f 3f       	cpi	r21, 0xFF	; 255
    100e:	29 f0       	breq	.+10     	; 0x101a <__divsf3+0x24>
    1010:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    1014:	51 11       	cpse	r21, r1
    1016:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__fp_szero>
    101a:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_nan>

0000101e <__divsf3x>:
    101e:	0e 94 01 09 	call	0x1202	; 0x1202 <__fp_split3>
    1022:	68 f3       	brcs	.-38     	; 0xffe <__divsf3+0x8>

00001024 <__divsf3_pse>:
    1024:	99 23       	and	r25, r25
    1026:	b1 f3       	breq	.-20     	; 0x1014 <__divsf3+0x1e>
    1028:	55 23       	and	r21, r21
    102a:	91 f3       	breq	.-28     	; 0x1010 <__divsf3+0x1a>
    102c:	95 1b       	sub	r25, r21
    102e:	55 0b       	sbc	r21, r21
    1030:	bb 27       	eor	r27, r27
    1032:	aa 27       	eor	r26, r26
    1034:	62 17       	cp	r22, r18
    1036:	73 07       	cpc	r23, r19
    1038:	84 07       	cpc	r24, r20
    103a:	38 f0       	brcs	.+14     	; 0x104a <__divsf3_pse+0x26>
    103c:	9f 5f       	subi	r25, 0xFF	; 255
    103e:	5f 4f       	sbci	r21, 0xFF	; 255
    1040:	22 0f       	add	r18, r18
    1042:	33 1f       	adc	r19, r19
    1044:	44 1f       	adc	r20, r20
    1046:	aa 1f       	adc	r26, r26
    1048:	a9 f3       	breq	.-22     	; 0x1034 <__divsf3_pse+0x10>
    104a:	35 d0       	rcall	.+106    	; 0x10b6 <__divsf3_pse+0x92>
    104c:	0e 2e       	mov	r0, r30
    104e:	3a f0       	brmi	.+14     	; 0x105e <__divsf3_pse+0x3a>
    1050:	e0 e8       	ldi	r30, 0x80	; 128
    1052:	32 d0       	rcall	.+100    	; 0x10b8 <__divsf3_pse+0x94>
    1054:	91 50       	subi	r25, 0x01	; 1
    1056:	50 40       	sbci	r21, 0x00	; 0
    1058:	e6 95       	lsr	r30
    105a:	00 1c       	adc	r0, r0
    105c:	ca f7       	brpl	.-14     	; 0x1050 <__divsf3_pse+0x2c>
    105e:	2b d0       	rcall	.+86     	; 0x10b6 <__divsf3_pse+0x92>
    1060:	fe 2f       	mov	r31, r30
    1062:	29 d0       	rcall	.+82     	; 0x10b6 <__divsf3_pse+0x92>
    1064:	66 0f       	add	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	bb 1f       	adc	r27, r27
    106c:	26 17       	cp	r18, r22
    106e:	37 07       	cpc	r19, r23
    1070:	48 07       	cpc	r20, r24
    1072:	ab 07       	cpc	r26, r27
    1074:	b0 e8       	ldi	r27, 0x80	; 128
    1076:	09 f0       	breq	.+2      	; 0x107a <__divsf3_pse+0x56>
    1078:	bb 0b       	sbc	r27, r27
    107a:	80 2d       	mov	r24, r0
    107c:	bf 01       	movw	r22, r30
    107e:	ff 27       	eor	r31, r31
    1080:	93 58       	subi	r25, 0x83	; 131
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	3a f0       	brmi	.+14     	; 0x1094 <__divsf3_pse+0x70>
    1086:	9e 3f       	cpi	r25, 0xFE	; 254
    1088:	51 05       	cpc	r21, r1
    108a:	78 f0       	brcs	.+30     	; 0x10aa <__divsf3_pse+0x86>
    108c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    1090:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__fp_szero>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	e4 f3       	brlt	.-8      	; 0x1090 <__divsf3_pse+0x6c>
    1098:	98 3e       	cpi	r25, 0xE8	; 232
    109a:	d4 f3       	brlt	.-12     	; 0x1090 <__divsf3_pse+0x6c>
    109c:	86 95       	lsr	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f7 95       	ror	r31
    10a6:	9f 5f       	subi	r25, 0xFF	; 255
    10a8:	c9 f7       	brne	.-14     	; 0x109c <__divsf3_pse+0x78>
    10aa:	88 0f       	add	r24, r24
    10ac:	91 1d       	adc	r25, r1
    10ae:	96 95       	lsr	r25
    10b0:	87 95       	ror	r24
    10b2:	97 f9       	bld	r25, 7
    10b4:	08 95       	ret
    10b6:	e1 e0       	ldi	r30, 0x01	; 1
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	bb 1f       	adc	r27, r27
    10c0:	62 17       	cp	r22, r18
    10c2:	73 07       	cpc	r23, r19
    10c4:	84 07       	cpc	r24, r20
    10c6:	ba 07       	cpc	r27, r26
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <__divsf3_pse+0xae>
    10ca:	62 1b       	sub	r22, r18
    10cc:	73 0b       	sbc	r23, r19
    10ce:	84 0b       	sbc	r24, r20
    10d0:	ba 0b       	sbc	r27, r26
    10d2:	ee 1f       	adc	r30, r30
    10d4:	88 f7       	brcc	.-30     	; 0x10b8 <__divsf3_pse+0x94>
    10d6:	e0 95       	com	r30
    10d8:	08 95       	ret

000010da <__fixunssfsi>:
    10da:	0e 94 09 09 	call	0x1212	; 0x1212 <__fp_splitA>
    10de:	88 f0       	brcs	.+34     	; 0x1102 <__fixunssfsi+0x28>
    10e0:	9f 57       	subi	r25, 0x7F	; 127
    10e2:	98 f0       	brcs	.+38     	; 0x110a <__fixunssfsi+0x30>
    10e4:	b9 2f       	mov	r27, r25
    10e6:	99 27       	eor	r25, r25
    10e8:	b7 51       	subi	r27, 0x17	; 23
    10ea:	b0 f0       	brcs	.+44     	; 0x1118 <__fixunssfsi+0x3e>
    10ec:	e1 f0       	breq	.+56     	; 0x1126 <__fixunssfsi+0x4c>
    10ee:	66 0f       	add	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	88 1f       	adc	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	1a f0       	brmi	.+6      	; 0x10fe <__fixunssfsi+0x24>
    10f8:	ba 95       	dec	r27
    10fa:	c9 f7       	brne	.-14     	; 0x10ee <__fixunssfsi+0x14>
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <__fixunssfsi+0x4c>
    10fe:	b1 30       	cpi	r27, 0x01	; 1
    1100:	91 f0       	breq	.+36     	; 0x1126 <__fixunssfsi+0x4c>
    1102:	0e 94 23 09 	call	0x1246	; 0x1246 <__fp_zero>
    1106:	b1 e0       	ldi	r27, 0x01	; 1
    1108:	08 95       	ret
    110a:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_zero>
    110e:	67 2f       	mov	r22, r23
    1110:	78 2f       	mov	r23, r24
    1112:	88 27       	eor	r24, r24
    1114:	b8 5f       	subi	r27, 0xF8	; 248
    1116:	39 f0       	breq	.+14     	; 0x1126 <__fixunssfsi+0x4c>
    1118:	b9 3f       	cpi	r27, 0xF9	; 249
    111a:	cc f3       	brlt	.-14     	; 0x110e <__fixunssfsi+0x34>
    111c:	86 95       	lsr	r24
    111e:	77 95       	ror	r23
    1120:	67 95       	ror	r22
    1122:	b3 95       	inc	r27
    1124:	d9 f7       	brne	.-10     	; 0x111c <__fixunssfsi+0x42>
    1126:	3e f4       	brtc	.+14     	; 0x1136 <__fixunssfsi+0x5c>
    1128:	90 95       	com	r25
    112a:	80 95       	com	r24
    112c:	70 95       	com	r23
    112e:	61 95       	neg	r22
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	8f 4f       	sbci	r24, 0xFF	; 255
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	08 95       	ret

00001138 <__floatunsisf>:
    1138:	e8 94       	clt
    113a:	09 c0       	rjmp	.+18     	; 0x114e <__floatsisf+0x12>

0000113c <__floatsisf>:
    113c:	97 fb       	bst	r25, 7
    113e:	3e f4       	brtc	.+14     	; 0x114e <__floatsisf+0x12>
    1140:	90 95       	com	r25
    1142:	80 95       	com	r24
    1144:	70 95       	com	r23
    1146:	61 95       	neg	r22
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	99 23       	and	r25, r25
    1150:	a9 f0       	breq	.+42     	; 0x117c <__floatsisf+0x40>
    1152:	f9 2f       	mov	r31, r25
    1154:	96 e9       	ldi	r25, 0x96	; 150
    1156:	bb 27       	eor	r27, r27
    1158:	93 95       	inc	r25
    115a:	f6 95       	lsr	r31
    115c:	87 95       	ror	r24
    115e:	77 95       	ror	r23
    1160:	67 95       	ror	r22
    1162:	b7 95       	ror	r27
    1164:	f1 11       	cpse	r31, r1
    1166:	f8 cf       	rjmp	.-16     	; 0x1158 <__floatsisf+0x1c>
    1168:	fa f4       	brpl	.+62     	; 0x11a8 <__floatsisf+0x6c>
    116a:	bb 0f       	add	r27, r27
    116c:	11 f4       	brne	.+4      	; 0x1172 <__floatsisf+0x36>
    116e:	60 ff       	sbrs	r22, 0
    1170:	1b c0       	rjmp	.+54     	; 0x11a8 <__floatsisf+0x6c>
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <__floatsisf+0x6c>
    117c:	88 23       	and	r24, r24
    117e:	11 f0       	breq	.+4      	; 0x1184 <__floatsisf+0x48>
    1180:	96 e9       	ldi	r25, 0x96	; 150
    1182:	11 c0       	rjmp	.+34     	; 0x11a6 <__floatsisf+0x6a>
    1184:	77 23       	and	r23, r23
    1186:	21 f0       	breq	.+8      	; 0x1190 <__floatsisf+0x54>
    1188:	9e e8       	ldi	r25, 0x8E	; 142
    118a:	87 2f       	mov	r24, r23
    118c:	76 2f       	mov	r23, r22
    118e:	05 c0       	rjmp	.+10     	; 0x119a <__floatsisf+0x5e>
    1190:	66 23       	and	r22, r22
    1192:	71 f0       	breq	.+28     	; 0x11b0 <__floatsisf+0x74>
    1194:	96 e8       	ldi	r25, 0x86	; 134
    1196:	86 2f       	mov	r24, r22
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	2a f0       	brmi	.+10     	; 0x11a8 <__floatsisf+0x6c>
    119e:	9a 95       	dec	r25
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	da f7       	brpl	.-10     	; 0x119e <__floatsisf+0x62>
    11a8:	88 0f       	add	r24, r24
    11aa:	96 95       	lsr	r25
    11ac:	87 95       	ror	r24
    11ae:	97 f9       	bld	r25, 7
    11b0:	08 95       	ret

000011b2 <__fp_inf>:
    11b2:	97 f9       	bld	r25, 7
    11b4:	9f 67       	ori	r25, 0x7F	; 127
    11b6:	80 e8       	ldi	r24, 0x80	; 128
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	08 95       	ret

000011be <__fp_nan>:
    11be:	9f ef       	ldi	r25, 0xFF	; 255
    11c0:	80 ec       	ldi	r24, 0xC0	; 192
    11c2:	08 95       	ret

000011c4 <__fp_pscA>:
    11c4:	00 24       	eor	r0, r0
    11c6:	0a 94       	dec	r0
    11c8:	16 16       	cp	r1, r22
    11ca:	17 06       	cpc	r1, r23
    11cc:	18 06       	cpc	r1, r24
    11ce:	09 06       	cpc	r0, r25
    11d0:	08 95       	ret

000011d2 <__fp_pscB>:
    11d2:	00 24       	eor	r0, r0
    11d4:	0a 94       	dec	r0
    11d6:	12 16       	cp	r1, r18
    11d8:	13 06       	cpc	r1, r19
    11da:	14 06       	cpc	r1, r20
    11dc:	05 06       	cpc	r0, r21
    11de:	08 95       	ret

000011e0 <__fp_round>:
    11e0:	09 2e       	mov	r0, r25
    11e2:	03 94       	inc	r0
    11e4:	00 0c       	add	r0, r0
    11e6:	11 f4       	brne	.+4      	; 0x11ec <__fp_round+0xc>
    11e8:	88 23       	and	r24, r24
    11ea:	52 f0       	brmi	.+20     	; 0x1200 <__fp_round+0x20>
    11ec:	bb 0f       	add	r27, r27
    11ee:	40 f4       	brcc	.+16     	; 0x1200 <__fp_round+0x20>
    11f0:	bf 2b       	or	r27, r31
    11f2:	11 f4       	brne	.+4      	; 0x11f8 <__fp_round+0x18>
    11f4:	60 ff       	sbrs	r22, 0
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <__fp_round+0x20>
    11f8:	6f 5f       	subi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	8f 4f       	sbci	r24, 0xFF	; 255
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	08 95       	ret

00001202 <__fp_split3>:
    1202:	57 fd       	sbrc	r21, 7
    1204:	90 58       	subi	r25, 0x80	; 128
    1206:	44 0f       	add	r20, r20
    1208:	55 1f       	adc	r21, r21
    120a:	59 f0       	breq	.+22     	; 0x1222 <__fp_splitA+0x10>
    120c:	5f 3f       	cpi	r21, 0xFF	; 255
    120e:	71 f0       	breq	.+28     	; 0x122c <__fp_splitA+0x1a>
    1210:	47 95       	ror	r20

00001212 <__fp_splitA>:
    1212:	88 0f       	add	r24, r24
    1214:	97 fb       	bst	r25, 7
    1216:	99 1f       	adc	r25, r25
    1218:	61 f0       	breq	.+24     	; 0x1232 <__fp_splitA+0x20>
    121a:	9f 3f       	cpi	r25, 0xFF	; 255
    121c:	79 f0       	breq	.+30     	; 0x123c <__fp_splitA+0x2a>
    121e:	87 95       	ror	r24
    1220:	08 95       	ret
    1222:	12 16       	cp	r1, r18
    1224:	13 06       	cpc	r1, r19
    1226:	14 06       	cpc	r1, r20
    1228:	55 1f       	adc	r21, r21
    122a:	f2 cf       	rjmp	.-28     	; 0x1210 <__fp_split3+0xe>
    122c:	46 95       	lsr	r20
    122e:	f1 df       	rcall	.-30     	; 0x1212 <__fp_splitA>
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <__fp_splitA+0x30>
    1232:	16 16       	cp	r1, r22
    1234:	17 06       	cpc	r1, r23
    1236:	18 06       	cpc	r1, r24
    1238:	99 1f       	adc	r25, r25
    123a:	f1 cf       	rjmp	.-30     	; 0x121e <__fp_splitA+0xc>
    123c:	86 95       	lsr	r24
    123e:	71 05       	cpc	r23, r1
    1240:	61 05       	cpc	r22, r1
    1242:	08 94       	sec
    1244:	08 95       	ret

00001246 <__fp_zero>:
    1246:	e8 94       	clt

00001248 <__fp_szero>:
    1248:	bb 27       	eor	r27, r27
    124a:	66 27       	eor	r22, r22
    124c:	77 27       	eor	r23, r23
    124e:	cb 01       	movw	r24, r22
    1250:	97 f9       	bld	r25, 7
    1252:	08 95       	ret

00001254 <__gesf2>:
    1254:	0e 94 2f 09 	call	0x125e	; 0x125e <__fp_cmp>
    1258:	08 f4       	brcc	.+2      	; 0x125c <__gesf2+0x8>
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	08 95       	ret

0000125e <__fp_cmp>:
    125e:	99 0f       	add	r25, r25
    1260:	00 08       	sbc	r0, r0
    1262:	55 0f       	add	r21, r21
    1264:	aa 0b       	sbc	r26, r26
    1266:	e0 e8       	ldi	r30, 0x80	; 128
    1268:	fe ef       	ldi	r31, 0xFE	; 254
    126a:	16 16       	cp	r1, r22
    126c:	17 06       	cpc	r1, r23
    126e:	e8 07       	cpc	r30, r24
    1270:	f9 07       	cpc	r31, r25
    1272:	c0 f0       	brcs	.+48     	; 0x12a4 <__fp_cmp+0x46>
    1274:	12 16       	cp	r1, r18
    1276:	13 06       	cpc	r1, r19
    1278:	e4 07       	cpc	r30, r20
    127a:	f5 07       	cpc	r31, r21
    127c:	98 f0       	brcs	.+38     	; 0x12a4 <__fp_cmp+0x46>
    127e:	62 1b       	sub	r22, r18
    1280:	73 0b       	sbc	r23, r19
    1282:	84 0b       	sbc	r24, r20
    1284:	95 0b       	sbc	r25, r21
    1286:	39 f4       	brne	.+14     	; 0x1296 <__fp_cmp+0x38>
    1288:	0a 26       	eor	r0, r26
    128a:	61 f0       	breq	.+24     	; 0x12a4 <__fp_cmp+0x46>
    128c:	23 2b       	or	r18, r19
    128e:	24 2b       	or	r18, r20
    1290:	25 2b       	or	r18, r21
    1292:	21 f4       	brne	.+8      	; 0x129c <__fp_cmp+0x3e>
    1294:	08 95       	ret
    1296:	0a 26       	eor	r0, r26
    1298:	09 f4       	brne	.+2      	; 0x129c <__fp_cmp+0x3e>
    129a:	a1 40       	sbci	r26, 0x01	; 1
    129c:	a6 95       	lsr	r26
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	81 1d       	adc	r24, r1
    12a2:	81 1d       	adc	r24, r1
    12a4:	08 95       	ret

000012a6 <__udivmodhi4>:
    12a6:	aa 1b       	sub	r26, r26
    12a8:	bb 1b       	sub	r27, r27
    12aa:	51 e1       	ldi	r21, 0x11	; 17
    12ac:	07 c0       	rjmp	.+14     	; 0x12bc <__udivmodhi4_ep>

000012ae <__udivmodhi4_loop>:
    12ae:	aa 1f       	adc	r26, r26
    12b0:	bb 1f       	adc	r27, r27
    12b2:	a6 17       	cp	r26, r22
    12b4:	b7 07       	cpc	r27, r23
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <__udivmodhi4_ep>
    12b8:	a6 1b       	sub	r26, r22
    12ba:	b7 0b       	sbc	r27, r23

000012bc <__udivmodhi4_ep>:
    12bc:	88 1f       	adc	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	5a 95       	dec	r21
    12c2:	a9 f7       	brne	.-22     	; 0x12ae <__udivmodhi4_loop>
    12c4:	80 95       	com	r24
    12c6:	90 95       	com	r25
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	08 95       	ret

000012ce <__divmodhi4>:
    12ce:	97 fb       	bst	r25, 7
    12d0:	07 2e       	mov	r0, r23
    12d2:	16 f4       	brtc	.+4      	; 0x12d8 <__divmodhi4+0xa>
    12d4:	00 94       	com	r0
    12d6:	07 d0       	rcall	.+14     	; 0x12e6 <__divmodhi4_neg1>
    12d8:	77 fd       	sbrc	r23, 7
    12da:	09 d0       	rcall	.+18     	; 0x12ee <__divmodhi4_neg2>
    12dc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__udivmodhi4>
    12e0:	07 fc       	sbrc	r0, 7
    12e2:	05 d0       	rcall	.+10     	; 0x12ee <__divmodhi4_neg2>
    12e4:	3e f4       	brtc	.+14     	; 0x12f4 <__divmodhi4_exit>

000012e6 <__divmodhi4_neg1>:
    12e6:	90 95       	com	r25
    12e8:	81 95       	neg	r24
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	08 95       	ret

000012ee <__divmodhi4_neg2>:
    12ee:	70 95       	com	r23
    12f0:	61 95       	neg	r22
    12f2:	7f 4f       	sbci	r23, 0xFF	; 255

000012f4 <__divmodhi4_exit>:
    12f4:	08 95       	ret

000012f6 <_exit>:
    12f6:	f8 94       	cli

000012f8 <__stop_program>:
    12f8:	ff cf       	rjmp	.-2      	; 0x12f8 <__stop_program>
