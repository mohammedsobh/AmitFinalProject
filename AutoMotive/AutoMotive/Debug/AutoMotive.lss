
AutoMotive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a38  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a6  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b4a  00000000  00000000  00002a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002fc  00000000  00000000  000035d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055d  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001370  00000000  00000000  00003e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0000519d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_1>
   8:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bc 02 	call	0x578	; 0x578 <main>
  64:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPortDir>:
 */ 
#include "DIO.h"

void DIO_SetPortDir(Uint8 Port,Uint8 Dir)
{
	switch(Dir)
  6c:	66 23       	and	r22, r22
  6e:	19 f0       	breq	.+6      	; 0x76 <DIO_SetPortDir+0xa>
  70:	6f 3f       	cpi	r22, 0xFF	; 255
  72:	89 f0       	breq	.+34     	; 0x96 <DIO_SetPortDir+0x2a>
  74:	08 95       	ret
	{
		case DIO_PORT_DIR_INPUT:
			switch(Port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	41 f0       	breq	.+16     	; 0x8a <DIO_SetPortDir+0x1e>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPortDir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	39 f0       	breq	.+14     	; 0x8e <DIO_SetPortDir+0x22>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	39 f0       	breq	.+14     	; 0x92 <DIO_SetPortDir+0x26>
  84:	08 95       	ret
			{
				case DIO_PORTA:
					DDRA = 0X00;
  86:	1a ba       	out	0x1a, r1	; 26
				break;
  88:	08 95       	ret
				case DIO_PORTB:
					DDRB = 0X00;
  8a:	17 ba       	out	0x17, r1	; 23
				break;
  8c:	08 95       	ret
				case DIO_PORTC:
					DDRC = 0X00;
  8e:	14 ba       	out	0x14, r1	; 20
				break;
  90:	08 95       	ret
				case DIO_PORTD:
					DDRD = 0X00;
  92:	11 ba       	out	0x11, r1	; 17
				break;
  94:	08 95       	ret
			}
		break;
		case DIO_PORT_DIR_OUTPUT:
			switch(Port)
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	49 f0       	breq	.+18     	; 0xac <DIO_SetPortDir+0x40>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_SetPortDir+0x3a>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	49 f0       	breq	.+18     	; 0xb2 <DIO_SetPortDir+0x46>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	51 f0       	breq	.+20     	; 0xb8 <DIO_SetPortDir+0x4c>
  a4:	08 95       	ret
			{
				case DIO_PORTA:
					DDRA = 0XFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a bb       	out	0x1a, r24	; 26
				break;
  aa:	08 95       	ret
				case DIO_PORTB:
					DDRB = 0XFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	87 bb       	out	0x17, r24	; 23
				break;
  b0:	08 95       	ret
				case DIO_PORTC:
					DDRC = 0XFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 bb       	out	0x14, r24	; 20
				break;
  b6:	08 95       	ret
				case DIO_PORTD:
					DDRD = 0XFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	81 bb       	out	0x11, r24	; 17
  bc:	08 95       	ret

000000be <DIO_SetPinDir>:
	}
	
}
void DIO_SetPinDir(Uint8 Port,Uint8 Pin,Uint8 Dir)
{
	switch(Dir)
  be:	44 23       	and	r20, r20
  c0:	b9 f1       	breq	.+110    	; 0x130 <DIO_SetPinDir+0x72>
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	09 f0       	breq	.+2      	; 0xc8 <DIO_SetPinDir+0xa>
  c6:	6b c0       	rjmp	.+214    	; 0x19e <DIO_SetPinDir+0xe0>
	{
		case DIO_PIN_DIR_OUTPUT:
			switch(Port)
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	89 f0       	breq	.+34     	; 0xee <DIO_SetPinDir+0x30>
  cc:	28 f0       	brcs	.+10     	; 0xd8 <DIO_SetPinDir+0x1a>
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	c9 f0       	breq	.+50     	; 0x104 <DIO_SetPinDir+0x46>
  d2:	83 30       	cpi	r24, 0x03	; 3
  d4:	11 f1       	breq	.+68     	; 0x11a <DIO_SetPinDir+0x5c>
  d6:	08 95       	ret
			{
				case DIO_PORTA:
					set_bit(DDRA,Pin);
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDir+0x26>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDir+0x22>
  e8:	82 2b       	or	r24, r18
  ea:	8a bb       	out	0x1a, r24	; 26
				break;
  ec:	08 95       	ret
				case DIO_PORTB:
					set_bit(DDRB,Pin);
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x3c>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x38>
  fe:	82 2b       	or	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
				break;
 102:	08 95       	ret
				case DIO_PORTC:
					set_bit(DDRC,Pin);
 104:	24 b3       	in	r18, 0x14	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDir+0x52>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDir+0x4e>
 114:	82 2b       	or	r24, r18
 116:	84 bb       	out	0x14, r24	; 20
				break;
 118:	08 95       	ret
				case DIO_PORTD:
					set_bit(DDRD,Pin);
 11a:	21 b3       	in	r18, 0x11	; 17
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_SetPinDir+0x68>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_SetPinDir+0x64>
 12a:	82 2b       	or	r24, r18
 12c:	81 bb       	out	0x11, r24	; 17
				break;
 12e:	08 95       	ret
			}
		break;
		case DIO_PIN_DIR_INPUT:
			switch(Port)
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	91 f0       	breq	.+36     	; 0x158 <DIO_SetPinDir+0x9a>
 134:	28 f0       	brcs	.+10     	; 0x140 <DIO_SetPinDir+0x82>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	d9 f0       	breq	.+54     	; 0x170 <DIO_SetPinDir+0xb2>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	29 f1       	breq	.+74     	; 0x188 <DIO_SetPinDir+0xca>
 13e:	08 95       	ret
			{
				case DIO_PORTA:
					clr_bit(DDRA,Pin);
 140:	2a b3       	in	r18, 0x1a	; 26
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_SetPinDir+0x8e>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_SetPinDir+0x8a>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	8a bb       	out	0x1a, r24	; 26
				break;
 156:	08 95       	ret
				case DIO_PORTB:
					clr_bit(DDRB,Pin);
 158:	27 b3       	in	r18, 0x17	; 23
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_SetPinDir+0xa6>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_SetPinDir+0xa2>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	87 bb       	out	0x17, r24	; 23
				break;
 16e:	08 95       	ret
				case DIO_PORTC:
					clr_bit(DDRC,Pin);
 170:	24 b3       	in	r18, 0x14	; 20
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPinDir+0xbe>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPinDir+0xba>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	84 bb       	out	0x14, r24	; 20
				break;
 186:	08 95       	ret
				case DIO_PORTD:
					clr_bit(DDRD,Pin);
 188:	21 b3       	in	r18, 0x11	; 17
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_SetPinDir+0xd6>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_SetPinDir+0xd2>
 198:	80 95       	com	r24
 19a:	82 23       	and	r24, r18
 19c:	81 bb       	out	0x11, r24	; 17
 19e:	08 95       	ret

000001a0 <DIO_SetPortVal>:
	
}

void DIO_SetPortVal(Uint8 Port,Uint8 Val)
{
	switch(Port)
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	41 f0       	breq	.+16     	; 0x1b4 <DIO_SetPortVal+0x14>
 1a4:	28 f0       	brcs	.+10     	; 0x1b0 <DIO_SetPortVal+0x10>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	39 f0       	breq	.+14     	; 0x1b8 <DIO_SetPortVal+0x18>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	39 f0       	breq	.+14     	; 0x1bc <DIO_SetPortVal+0x1c>
 1ae:	08 95       	ret
	{
		case DIO_PORTA:
			PORTA = Val;
 1b0:	6b bb       	out	0x1b, r22	; 27
		break;
 1b2:	08 95       	ret
		case DIO_PORTB:
			PORTB = Val;
 1b4:	68 bb       	out	0x18, r22	; 24
		break;
 1b6:	08 95       	ret
		case DIO_PORTC:
			PORTC = Val;
 1b8:	65 bb       	out	0x15, r22	; 21
		break;
 1ba:	08 95       	ret
		case DIO_PORTD:
			PORTD = Val;
 1bc:	62 bb       	out	0x12, r22	; 18
 1be:	08 95       	ret

000001c0 <DIO_SetPinVal>:
		break;
	}
}
void DIO_SetPinVal(Uint8 Port,Uint8 Pin,Uint8 Val)
{
	switch(Val)
 1c0:	44 23       	and	r20, r20
 1c2:	b9 f1       	breq	.+110    	; 0x232 <DIO_SetPinVal+0x72>
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_SetPinVal+0xa>
 1c8:	6b c0       	rjmp	.+214    	; 0x2a0 <DIO_SetPinVal+0xe0>
	{
		case DIO_PIN_HIGH:
		switch(Port)
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	89 f0       	breq	.+34     	; 0x1f0 <DIO_SetPinVal+0x30>
 1ce:	28 f0       	brcs	.+10     	; 0x1da <DIO_SetPinVal+0x1a>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	c9 f0       	breq	.+50     	; 0x206 <DIO_SetPinVal+0x46>
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	11 f1       	breq	.+68     	; 0x21c <DIO_SetPinVal+0x5c>
 1d8:	08 95       	ret
		{
			case DIO_PORTA:
			set_bit(PORTA,Pin);
 1da:	2b b3       	in	r18, 0x1b	; 27
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_SetPinVal+0x26>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_SetPinVal+0x22>
 1ea:	82 2b       	or	r24, r18
 1ec:	8b bb       	out	0x1b, r24	; 27
			break;
 1ee:	08 95       	ret
			case DIO_PORTB:
			set_bit(PORTB,Pin);
 1f0:	28 b3       	in	r18, 0x18	; 24
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_SetPinVal+0x3c>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_SetPinVal+0x38>
 200:	82 2b       	or	r24, r18
 202:	88 bb       	out	0x18, r24	; 24
			break;
 204:	08 95       	ret
			case DIO_PORTC:
			set_bit(PORTC,Pin);
 206:	25 b3       	in	r18, 0x15	; 21
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_SetPinVal+0x52>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_SetPinVal+0x4e>
 216:	82 2b       	or	r24, r18
 218:	85 bb       	out	0x15, r24	; 21
			break;
 21a:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD,Pin);
 21c:	22 b3       	in	r18, 0x12	; 18
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_SetPinVal+0x68>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_SetPinVal+0x64>
 22c:	82 2b       	or	r24, r18
 22e:	82 bb       	out	0x12, r24	; 18
			break;
 230:	08 95       	ret
		}
		break;
		case DIO_PIN_LOW:
		switch(Port)
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	91 f0       	breq	.+36     	; 0x25a <DIO_SetPinVal+0x9a>
 236:	28 f0       	brcs	.+10     	; 0x242 <DIO_SetPinVal+0x82>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	d9 f0       	breq	.+54     	; 0x272 <DIO_SetPinVal+0xb2>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	29 f1       	breq	.+74     	; 0x28a <DIO_SetPinVal+0xca>
 240:	08 95       	ret
		{
			case DIO_PORTA:
			clr_bit(PORTA,Pin);
 242:	2b b3       	in	r18, 0x1b	; 27
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPinVal+0x8e>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPinVal+0x8a>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	8b bb       	out	0x1b, r24	; 27
			break;
 258:	08 95       	ret
			case DIO_PORTB:
			clr_bit(PORTB,Pin);
 25a:	28 b3       	in	r18, 0x18	; 24
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_SetPinVal+0xa6>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_SetPinVal+0xa2>
 26a:	80 95       	com	r24
 26c:	82 23       	and	r24, r18
 26e:	88 bb       	out	0x18, r24	; 24
			break;
 270:	08 95       	ret
			case DIO_PORTC:
			clr_bit(PORTC,Pin);
 272:	25 b3       	in	r18, 0x15	; 21
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_SetPinVal+0xbe>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_SetPinVal+0xba>
 282:	80 95       	com	r24
 284:	82 23       	and	r24, r18
 286:	85 bb       	out	0x15, r24	; 21
			break;
 288:	08 95       	ret
			case DIO_PORTD:
			clr_bit(PORTD,Pin);
 28a:	22 b3       	in	r18, 0x12	; 18
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_SetPinVal+0xd6>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_SetPinVal+0xd2>
 29a:	80 95       	com	r24
 29c:	82 23       	and	r24, r18
 29e:	82 bb       	out	0x12, r24	; 18
 2a0:	08 95       	ret

000002a2 <IRInit>:
 *  Author: eng_s
 */
#include "IR.h"
void IRInit(void)
{
	DIO_SetPinDir(IR_PORT,FRONT_IR_PIN,DIO_PIN_DIR_OUTPUT);
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDir>
	DIO_SetPinDir(IR_PORT,BACK_IR_PIN,DIO_PIN_DIR_OUTPUT);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	63 e0       	ldi	r22, 0x03	; 3
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDir>
 2b6:	08 95       	ret

000002b8 <LCDEN>:
 */ 
#include "LCD4bit_8bit.h"



void LCDEN (LCD *lcd){
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	ec 01       	movw	r28, r24
	DIO_SetPinVal(lcd->controlPort,lcd->ENPin,DIO_PIN_HIGH);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	6c 81       	ldd	r22, Y+4	; 0x04
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	8f e8       	ldi	r24, 0x8F	; 143
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCDEN+0x14>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <LCDEN+0x1a>
 2d2:	00 00       	nop
	_delay_us(100);
	DIO_SetPinVal(lcd->controlPort,lcd->ENPin,DIO_PIN_LOW);
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	6c 81       	ldd	r22, Y+4	; 0x04
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
 2de:	8f e8       	ldi	r24, 0x8F	; 143
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCDEN+0x2a>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <LCDEN+0x30>
 2e8:	00 00       	nop
	_delay_us(100);
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <PortWrite>:
void PortWrite(LCD *lcd,Uint8 Data){
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	ec 01       	movw	r28, r24
 2f8:	16 2f       	mov	r17, r22
	
	if (lcd->mode == LCD_4BIT_MODE)
 2fa:	88 81       	ld	r24, Y
 2fc:	81 11       	cpse	r24, r1
 2fe:	35 c0       	rjmp	.+106    	; 0x36a <PortWrite+0x7a>
	{
		if ((Data & 1))
 300:	60 ff       	sbrs	r22, 0
 302:	06 c0       	rjmp	.+12     	; 0x310 <PortWrite+0x20>
		{
			DIO_SetPinVal(lcd->dataPort,lcd->D4Pin,DIO_PIN_HIGH);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	6e 81       	ldd	r22, Y+6	; 0x06
 308:	8d 81       	ldd	r24, Y+5	; 0x05
 30a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
 30e:	05 c0       	rjmp	.+10     	; 0x31a <PortWrite+0x2a>
		} 
		else
		{
			DIO_SetPinVal(lcd->dataPort,lcd->D4Pin,DIO_PIN_LOW);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	6e 81       	ldd	r22, Y+6	; 0x06
 314:	8d 81       	ldd	r24, Y+5	; 0x05
 316:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
		}
		if ((Data & 2))
 31a:	11 ff       	sbrs	r17, 1
 31c:	06 c0       	rjmp	.+12     	; 0x32a <PortWrite+0x3a>
		{
			DIO_SetPinVal(lcd->dataPort,lcd->D5Pin,DIO_PIN_HIGH);
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	6f 81       	ldd	r22, Y+7	; 0x07
 322:	8d 81       	ldd	r24, Y+5	; 0x05
 324:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
 328:	05 c0       	rjmp	.+10     	; 0x334 <PortWrite+0x44>
		}
		else
		{
			DIO_SetPinVal(lcd->dataPort,lcd->D5Pin,DIO_PIN_LOW);
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	6f 81       	ldd	r22, Y+7	; 0x07
 32e:	8d 81       	ldd	r24, Y+5	; 0x05
 330:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
		}
		if ((Data & 4))
 334:	12 ff       	sbrs	r17, 2
 336:	06 c0       	rjmp	.+12     	; 0x344 <PortWrite+0x54>
		{
			DIO_SetPinVal(lcd->dataPort,lcd->D6Pin,DIO_PIN_HIGH);
 338:	41 e0       	ldi	r20, 0x01	; 1
 33a:	68 85       	ldd	r22, Y+8	; 0x08
 33c:	8d 81       	ldd	r24, Y+5	; 0x05
 33e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
 342:	05 c0       	rjmp	.+10     	; 0x34e <PortWrite+0x5e>
		}
		else
		{
			DIO_SetPinVal(lcd->dataPort,lcd->D6Pin,DIO_PIN_LOW);
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	68 85       	ldd	r22, Y+8	; 0x08
 348:	8d 81       	ldd	r24, Y+5	; 0x05
 34a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
		}
		if ((Data & 8))
 34e:	13 ff       	sbrs	r17, 3
 350:	06 c0       	rjmp	.+12     	; 0x35e <PortWrite+0x6e>
		{
			DIO_SetPinVal(lcd->dataPort,lcd->D7Pin,DIO_PIN_HIGH);
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	69 85       	ldd	r22, Y+9	; 0x09
 356:	8d 81       	ldd	r24, Y+5	; 0x05
 358:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
 35c:	09 c0       	rjmp	.+18     	; 0x370 <PortWrite+0x80>
		}
		else
		{
			DIO_SetPinVal(lcd->dataPort,lcd->D7Pin,DIO_PIN_LOW);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	69 85       	ldd	r22, Y+9	; 0x09
 362:	8d 81       	ldd	r24, Y+5	; 0x05
 364:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
 368:	03 c0       	rjmp	.+6      	; 0x370 <PortWrite+0x80>
		}

	} 
	else
	{
		DIO_SetPortVal(lcd->dataPort,Data);
 36a:	8d 81       	ldd	r24, Y+5	; 0x05
 36c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_SetPortVal>
	}


	
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	08 95       	ret

00000378 <cmd>:
void cmd (LCD *lcd,Uint8 command){
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	ec 01       	movw	r28, r24
 380:	16 2f       	mov	r17, r22
	
	DIO_SetPinVal(lcd->controlPort,lcd->RSPin,DIO_PIN_LOW);
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	6a 81       	ldd	r22, Y+2	; 0x02
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
	if (lcd->mode == LCD_4BIT_MODE)
 38c:	88 81       	ld	r24, Y
 38e:	81 11       	cpse	r24, r1
 390:	12 c0       	rjmp	.+36     	; 0x3b6 <cmd+0x3e>
	{
		PortWrite(lcd,(command>>4));
 392:	61 2f       	mov	r22, r17
 394:	62 95       	swap	r22
 396:	6f 70       	andi	r22, 0x0F	; 15
 398:	ce 01       	movw	r24, r28
 39a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <PortWrite>
		LCDEN (lcd);
 39e:	ce 01       	movw	r24, r28
 3a0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCDEN>
		PortWrite(lcd,command & 0x0F);
 3a4:	61 2f       	mov	r22, r17
 3a6:	6f 70       	andi	r22, 0x0F	; 15
 3a8:	ce 01       	movw	r24, r28
 3aa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <PortWrite>
		LCDEN (lcd);
 3ae:	ce 01       	movw	r24, r28
 3b0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCDEN>
 3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <cmd+0x4c>
	}
	else
	{
		PortWrite(lcd,command);
 3b6:	61 2f       	mov	r22, r17
 3b8:	ce 01       	movw	r24, r28
 3ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <PortWrite>
		LCDEN (lcd);
 3be:	ce 01       	movw	r24, r28
 3c0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCDEN>
	}
	
}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	08 95       	ret

000003cc <LCDInit>:
void LCDInit(LCD *lcd)
{
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	ec 01       	movw	r28, r24
	DIO_SetPinDir(lcd->controlPort,lcd->RSPin,DIO_PIN_DIR_OUTPUT);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	6a 81       	ldd	r22, Y+2	; 0x02
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDir>
	DIO_SetPinDir(lcd->controlPort,lcd->RWPin,DIO_PIN_DIR_OUTPUT);
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	6b 81       	ldd	r22, Y+3	; 0x03
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDir>
	DIO_SetPinDir(lcd->controlPort,lcd->ENPin,DIO_PIN_DIR_OUTPUT);
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	6c 81       	ldd	r22, Y+4	; 0x04
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDir>
	DIO_SetPinVal(lcd->controlPort,lcd->RWPin,DIO_PIN_LOW);
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	6b 81       	ldd	r22, Y+3	; 0x03
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <DIO_SetPinVal>
	if (lcd->mode == LCD_4BIT_MODE)
 3fa:	88 81       	ld	r24, Y
 3fc:	81 11       	cpse	r24, r1
 3fe:	3c c0       	rjmp	.+120    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
	{
		DIO_SetPinDir(lcd->dataPort,lcd->D4Pin,DIO_PIN_DIR_OUTPUT);
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	6e 81       	ldd	r22, Y+6	; 0x06
 404:	8d 81       	ldd	r24, Y+5	; 0x05
 406:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDir>
		DIO_SetPinDir(lcd->dataPort,lcd->D5Pin,DIO_PIN_DIR_OUTPUT);
 40a:	41 e0       	ldi	r20, 0x01	; 1
 40c:	6f 81       	ldd	r22, Y+7	; 0x07
 40e:	8d 81       	ldd	r24, Y+5	; 0x05
 410:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDir>
		DIO_SetPinDir(lcd->dataPort,lcd->D6Pin,DIO_PIN_DIR_OUTPUT);
 414:	41 e0       	ldi	r20, 0x01	; 1
 416:	68 85       	ldd	r22, Y+8	; 0x08
 418:	8d 81       	ldd	r24, Y+5	; 0x05
 41a:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDir>
		DIO_SetPinDir(lcd->dataPort,lcd->D7Pin,DIO_PIN_DIR_OUTPUT);
 41e:	41 e0       	ldi	r20, 0x01	; 1
 420:	69 85       	ldd	r22, Y+9	; 0x09
 422:	8d 81       	ldd	r24, Y+5	; 0x05
 424:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_SetPinDir>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	2f ef       	ldi	r18, 0xFF	; 255
 42a:	89 ef       	ldi	r24, 0xF9	; 249
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 438:	00 00       	nop
		_delay_ms(20);
		
		///////////////////LCD 4 BIT MODE/////////////////////
		cmd(lcd,0x33);
 43a:	63 e3       	ldi	r22, 0x33	; 51
 43c:	ce 01       	movw	r24, r28
 43e:	0e 94 bc 01 	call	0x378	; 0x378 <cmd>
 442:	8f e9       	ldi	r24, 0x9F	; 159
 444:	9f e0       	ldi	r25, 0x0F	; 15
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
		_delay_ms(1);
		cmd(lcd,0x32);
 44e:	62 e3       	ldi	r22, 0x32	; 50
 450:	ce 01       	movw	r24, r28
 452:	0e 94 bc 01 	call	0x378	; 0x378 <cmd>
 456:	8f e9       	ldi	r24, 0x9F	; 159
 458:	9f e0       	ldi	r25, 0x0F	; 15
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 460:	00 00       	nop
		_delay_ms(1);
		cmd(lcd,0x28);
 462:	68 e2       	ldi	r22, 0x28	; 40
 464:	ce 01       	movw	r24, r28
 466:	0e 94 bc 01 	call	0x378	; 0x378 <cmd>
 46a:	8f e9       	ldi	r24, 0x9F	; 159
 46c:	9f e0       	ldi	r25, 0x0F	; 15
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 474:	00 00       	nop
 476:	17 c0       	rjmp	.+46     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		_delay_ms(1);
	} 
	else
	{
		DIO_SetPortDir(lcd->dataPort,DIO_PORT_DIR_OUTPUT);
 478:	6f ef       	ldi	r22, 0xFF	; 255
 47a:	8d 81       	ldd	r24, Y+5	; 0x05
 47c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPortDir>
 480:	9f ef       	ldi	r25, 0xFF	; 255
 482:	29 ef       	ldi	r18, 0xF9	; 249
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	91 50       	subi	r25, 0x01	; 1
 488:	20 40       	sbci	r18, 0x00	; 0
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 490:	00 00       	nop
		_delay_ms(20);
		///////////////////LCD 8 BIT MODE/////////////////////
		cmd(lcd,0x38);
 492:	68 e3       	ldi	r22, 0x38	; 56
 494:	ce 01       	movw	r24, r28
 496:	0e 94 bc 01 	call	0x378	; 0x378 <cmd>
 49a:	8f e9       	ldi	r24, 0x9F	; 159
 49c:	9f e0       	ldi	r25, 0x0F	; 15
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
		_delay_ms(1);
	}
	///////////// Reset process from datasheet /////////
	cmd(lcd,0x03);
 4a6:	63 e0       	ldi	r22, 0x03	; 3
 4a8:	ce 01       	movw	r24, r28
 4aa:	0e 94 bc 01 	call	0x378	; 0x378 <cmd>
 4ae:	8f e1       	ldi	r24, 0x1F	; 31
 4b0:	9e e4       	ldi	r25, 0x4E	; 78
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
	_delay_ms(5);
	cmd(lcd,0x03);
 4ba:	63 e0       	ldi	r22, 0x03	; 3
 4bc:	ce 01       	movw	r24, r28
 4be:	0e 94 bc 01 	call	0x378	; 0x378 <cmd>
 4c2:	8f ed       	ldi	r24, 0xDF	; 223
 4c4:	9b ea       	ldi	r25, 0xAB	; 171
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
	_delay_ms(11);
	cmd(lcd,0x03);
 4ce:	63 e0       	ldi	r22, 0x03	; 3
 4d0:	ce 01       	movw	r24, r28
 4d2:	0e 94 bc 01 	call	0x378	; 0x378 <cmd>
	
	cmd(lcd,0x06); // clear LCD
 4d6:	66 e0       	ldi	r22, 0x06	; 6
 4d8:	ce 01       	movw	r24, r28
 4da:	0e 94 bc 01 	call	0x378	; 0x378 <cmd>
 4de:	8f e9       	ldi	r24, 0x9F	; 159
 4e0:	9f e0       	ldi	r25, 0x0F	; 15
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e8:	00 00       	nop
	_delay_ms(1);
	
	cmd(lcd,0x0C); // cursor OFF
 4ea:	6c e0       	ldi	r22, 0x0C	; 12
 4ec:	ce 01       	movw	r24, r28
 4ee:	0e 94 bc 01 	call	0x378	; 0x378 <cmd>
 4f2:	8f e9       	ldi	r24, 0x9F	; 159
 4f4:	9f e0       	ldi	r25, 0x0F	; 15
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fc:	00 00       	nop
	_delay_ms(1);
	
	cmd(lcd,0x80); // ---8 go to first line and --0 is for 0th position
 4fe:	60 e8       	ldi	r22, 0x80	; 128
 500:	ce 01       	movw	r24, r28
 502:	0e 94 bc 01 	call	0x378	; 0x378 <cmd>
 506:	8f e9       	ldi	r24, 0x9F	; 159
 508:	9f e0       	ldi	r25, 0x0F	; 15
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 510:	00 00       	nop
	_delay_ms(1);
}
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <SystemInit>:
#include "IR.h"
#include <avr/interrupt.h>
#include <util/delay.h>

void SystemInit(void)
{
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	2a 97       	sbiw	r28, 0x0a	; 10
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
	LCD Lcd1;
	Lcd1.mode = LCD_4BIT_MODE;
 52e:	19 82       	std	Y+1, r1	; 0x01
	Lcd1.controlPort = DIO_PORTB;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	8a 83       	std	Y+2, r24	; 0x02
	Lcd1.RSPin = DIO_PIN_1;
 534:	8b 83       	std	Y+3, r24	; 0x03
	Lcd1.RWPin = DIO_PIN_2;
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	8c 83       	std	Y+4, r24	; 0x04
	Lcd1.ENPin = DIO_PIN_3;
 53a:	13 e0       	ldi	r17, 0x03	; 3
 53c:	1d 83       	std	Y+5, r17	; 0x05
	Lcd1.dataPort = DIO_PORTA;
 53e:	1e 82       	std	Y+6, r1	; 0x06
	Lcd1.D4Pin = DIO_PIN_4;
 540:	84 e0       	ldi	r24, 0x04	; 4
 542:	8f 83       	std	Y+7, r24	; 0x07
	Lcd1.D5Pin = DIO_PIN_5;
 544:	85 e0       	ldi	r24, 0x05	; 5
 546:	88 87       	std	Y+8, r24	; 0x08
	Lcd1.D6Pin = DIO_PIN_6;
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	89 87       	std	Y+9, r24	; 0x09
	Lcd1.D7Pin = DIO_PIN_7;
 54c:	87 e0       	ldi	r24, 0x07	; 7
 54e:	8a 87       	std	Y+10, r24	; 0x0a
	LCDInit(&Lcd1);
 550:	ce 01       	movw	r24, r28
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LCDInit>
	IRInit();
 558:	0e 94 51 01 	call	0x2a2	; 0x2a2 <IRInit>
	GICR = 1<<INT0 | 1<<INT1;		/* Enable INT0*/
 55c:	80 ec       	ldi	r24, 0xC0	; 192
 55e:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;  /* Trigger INT0 on rising edge */
 560:	15 bf       	out	0x35, r17	; 53
	sei();
 562:	78 94       	sei
}
 564:	2a 96       	adiw	r28, 0x0a	; 10
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	08 95       	ret

00000578 <main>:

int main(void)
{
    /* Replace with your application code */
	SystemInit();
 578:	0e 94 8c 02 	call	0x518	; 0x518 <SystemInit>
 57c:	ff cf       	rjmp	.-2      	; 0x57c <main+0x4>

0000057e <__vector_1>:
		
    }
}

ISR(INT0_vect)
{
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
	
}
 588:	0f 90       	pop	r0
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	0f 90       	pop	r0
 58e:	1f 90       	pop	r1
 590:	18 95       	reti

00000592 <__vector_2>:
ISR(INT1_vect)
{
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
	
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <_exit>:
 5a6:	f8 94       	cli

000005a8 <__stop_program>:
 5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <__stop_program>
